{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.messageQueue = []; // Queue for messages\n  }\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n        if (message.body) {\n          onTaskMessageReceived(JSON.parse(message.body));\n        }\n      });\n      this.stompClient.subscribe(`/user/${userId}/queue/categories`, message => {\n        if (message.body) {\n          onCategoryMessageReceived(JSON.parse(message.body));\n        }\n      });\n\n      // Send all messages in the queue\n      while (this.messageQueue.length > 0) {\n        const {\n          destination,\n          message\n        } = this.messageQueue.shift();\n        this.sendMessage(destination, message);\n      }\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected. Queueing message.');\n      this.messageQueue.push({\n        destination,\n        message\n      });\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","messageQueue","connect","userId","onTaskMessageReceived","onCategoryMessageReceived","console","log","socket","over","frame","subscribe","message","body","JSON","parse","length","destination","shift","sendMessage","error","setTimeout","disconnect","send","stringify","push","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.messageQueue = []; // Queue for messages\n  }\n\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n\n      this.stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n        if (message.body) {\n          onTaskMessageReceived(JSON.parse(message.body));\n        }\n      });\n\n      this.stompClient.subscribe(`/user/${userId}/queue/categories`, (message) => {\n        if (message.body) {\n          onCategoryMessageReceived(JSON.parse(message.body));\n        }\n      });\n\n      // Send all messages in the queue\n      while (this.messageQueue.length > 0) {\n        const { destination, message } = this.messageQueue.shift();\n        this.sendMessage(destination, message);\n      }\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected. Queueing message.');\n      this.messageQueue.push({ destination, message });\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}