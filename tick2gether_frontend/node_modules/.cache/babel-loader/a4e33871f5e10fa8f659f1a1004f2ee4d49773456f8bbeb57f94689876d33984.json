{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  async connect(onMessageReceived) {\n    try {\n      const socket = new SockJS(SOCKET_URL);\n      this.stompClient = Stomp.over(socket);\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      await new Promise((resolve, reject) => {\n        this.stompClient.connect(headers, () => {\n          console.log('Connected to WebSocket');\n          this.stompClient.subscribe('/topic/tasks', message => {\n            this.handleMessage(message, onMessageReceived);\n          });\n          this.stompClient.subscribe('/topic/sharedTasks', message => {\n            this.handleMessage(message, onMessageReceived);\n          });\n          this.stompClient.subscribe('/user/queue/tasks', message => {\n            this.handleMessage(message, onMessageReceived);\n          });\n          resolve();\n        }, error => {\n          console.error('Error connecting to WebSocket:', error);\n          reject(error);\n        });\n      });\n    } catch (error) {\n      console.error('Error in WebSocket connection:', error);\n      setTimeout(() => this.connect(onMessageReceived), 5000); // Retry connection\n    }\n  }\n  handleMessage(message, onMessageReceived) {\n    if (message.body) {\n      try {\n        const parsedMessage = JSON.parse(message.body);\n        onMessageReceived(parsedMessage);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      console.log('Sending message to', destination);\n      try {\n        this.stompClient.send(destination, headers, JSON.stringify(message));\n      } catch (error) {\n        console.error('Failed to send WebSocket message:', error);\n      }\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => {\n  webSocketService.connect(onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendUpdateTaskMessage = taskDTO => {\n  if (taskDTO.completed == null) {\n    taskDTO.completed = false;\n  }\n  console.log('Sending update task message:', taskDTO);\n  sendWebSocketMessage(`/app/updateTask/${taskDTO.taskId}`, taskDTO);\n};\nexport const sendUpdateSharedTaskMessage = (taskDTO, userId) => {\n  if (taskDTO.completed == null) {\n    taskDTO.completed = false;\n  }\n  if (!userId) {\n    console.error('User ID is required for updating shared tasks');\n    return;\n  }\n  console.log('Sending update shared task message:', taskDTO);\n  sendWebSocketMessage(`/app/updateSharedTask/${userId}`, taskDTO);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","socket","over","token","localStorage","getItem","headers","Authorization","Promise","resolve","reject","console","log","subscribe","message","handleMessage","error","setTimeout","body","parsedMessage","JSON","parse","disconnect","sendMessage","destination","connected","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage","sendUpdateTaskMessage","taskDTO","completed","taskId","sendUpdateSharedTaskMessage","userId"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    async connect(onMessageReceived) {\n        try {\n            const socket = new SockJS(SOCKET_URL);\n            this.stompClient = Stomp.over(socket);\n\n            const token = localStorage.getItem('jwtToken');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n            await new Promise((resolve, reject) => {\n                this.stompClient.connect(headers, () => {\n                    console.log('Connected to WebSocket');\n                    \n                    this.stompClient.subscribe('/topic/tasks', (message) => {\n                        this.handleMessage(message, onMessageReceived);\n                    });\n\n                    this.stompClient.subscribe('/topic/sharedTasks', (message) => {\n                        this.handleMessage(message, onMessageReceived);\n                    });\n\n                    this.stompClient.subscribe('/user/queue/tasks', (message) => {\n                        this.handleMessage(message, onMessageReceived);\n                    });\n\n                    resolve();\n                }, (error) => {\n                    console.error('Error connecting to WebSocket:', error);\n                    reject(error);\n                });\n            });\n        } catch (error) {\n            console.error('Error in WebSocket connection:', error);\n            setTimeout(() => this.connect(onMessageReceived), 5000); // Retry connection\n        }\n    }\n\n    handleMessage(message, onMessageReceived) {\n        if (message.body) {\n            try {\n                const parsedMessage = JSON.parse(message.body);\n                onMessageReceived(parsedMessage);\n            } catch (error) {\n                console.error('Failed to parse WebSocket message:', error);\n            }\n        }\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n            });\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            const token = localStorage.getItem('jwtToken');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n            console.log('Sending message to', destination);\n            try {\n                this.stompClient.send(destination, headers, JSON.stringify(message));\n            } catch (error) {\n                console.error('Failed to send WebSocket message:', error);\n            }\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => {\n    webSocketService.connect(onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n    webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n    webSocketService.sendMessage(destination, message);\n};\n\nexport const sendUpdateTaskMessage = (taskDTO) => {\n    if (taskDTO.completed == null) {\n        taskDTO.completed = false;\n    }\n    console.log('Sending update task message:', taskDTO);\n    sendWebSocketMessage(`/app/updateTask/${taskDTO.taskId}`, taskDTO);\n};\n\nexport const sendUpdateSharedTaskMessage = (taskDTO, userId) => {\n    if (taskDTO.completed == null) {\n        taskDTO.completed = false;\n    }\n    if (!userId) {\n        console.error('User ID is required for updating shared tasks');\n        return;\n    }\n    console.log('Sending update shared task message:', taskDTO);\n    sendWebSocketMessage(`/app/updateSharedTask/${userId}`, taskDTO);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}