{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isAfter } from 'date-fns';\nimport { updateTask } from '../api';\nimport { sendWebSocketMessage } from '../websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ToDoList({\n  todos = [],\n  setTasks,\n  isDeleteMode,\n  onEditTodo,\n  selectedCategory,\n  handleDeleteTask\n}) {\n  _s();\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n  useEffect(() => {\n    console.log('Todos updated:', todos);\n  }, [todos]);\n  const handleCheckboxChange = async id => {\n    console.log('Checkbox changed for ID:', id);\n    const updatedTodos = todos.map(todo => {\n      if (todo.taskId === id) {\n        const updatedTodo = {\n          ...todo,\n          completed: !todo.completed\n        };\n        if (updatedTodo.completed) {\n          updatedTodo.categoryId = 7; // Kategorie-ID auf 7 setzen, wenn die Aufgabe abgeschlossen ist\n        }\n        return updatedTodo;\n      }\n      return todo;\n    });\n    setTasks(updatedTodos);\n    const updatedTask = updatedTodos.find(todo => todo.taskId === id);\n    try {\n      // Aktualisiere das Backend über REST\n      await updateTask(updatedTask, userId);\n\n      // Senden der WebSocket-Nachricht\n      sendWebSocketMessage('/topic/tasks', {\n        type: 'TASK_UPDATE',\n        task: updatedTask\n      });\n      console.log('WebSocket update task successful');\n    } catch (error) {\n      console.error('Error updating task via WebSocket:', error);\n    }\n  };\n  const handleDeleteClick = async id => {\n    console.log('Deleting task with ID:', id);\n    try {\n      await handleDeleteTask(id);\n      console.log('Task deleted successfully');\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n    }\n  };\n  const handleDateChange = async (id, date, purpose) => {\n    console.log(`Updating ${purpose} date for ID: ${id}`);\n    const updatedTodos = todos.map(todo => {\n      if (todo.taskId === id) {\n        return {\n          ...todo,\n          [`${purpose}Date`]: date ? new Date(date).toISOString() : null\n        };\n      }\n      return todo;\n    });\n    setTasks(updatedTodos);\n    const updatedTask = updatedTodos.find(todo => todo.taskId === id);\n    try {\n      // Senden der WebSocket-Nachricht\n      sendWebSocketMessage('/app/updateTask', updatedTask);\n      console.log('WebSocket update date successful');\n    } catch (error) {\n      console.error('Error updating date via WebSocket:', error);\n    }\n  };\n  const today = startOfToday();\n  const filteredTodos = todos.filter(todo => {\n    switch (selectedCategory.name) {\n      case 'Planned':\n        return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n      case 'Today':\n        return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today) && todo.categoryId !== 7;\n      case 'Personal':\n      case 'Work':\n      case 'Any Time':\n        return todo.categoryId === selectedCategory.id;\n      case 'All Tasks':\n        return !todo.planDate && todo.categoryId !== 7;\n      case 'Logbook':\n        return todo.categoryId === 7;\n      default:\n        return todo.categoryId === selectedCategory.id;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      className: \"sr-only\",\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-1\",\n      children: filteredTodos.map(todo => /*#__PURE__*/_jsxDEV(ToDo, {\n        // Sicherstellen, dass jeder Todo-Element einen eindeutigen Key hat\n        todo: todo,\n        handleCheckboxChange: () => handleCheckboxChange(todo.taskId),\n        handleTodoClick: () => setSelectedTodoId(todo.taskId === selectedTodoId ? null : todo.taskId),\n        handleDelete: () => handleDeleteClick(todo.taskId),\n        handleEditClick: () => onEditTodo(todo),\n        isSelected: todo.taskId === selectedTodoId,\n        onDateChange: handleDateChange,\n        isDeleteMode: isDeleteMode\n      }, todo.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoList, \"y7hXGgDEL6mLLQHq94VAZqd74Dw=\");\n_c = ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","useEffect","ToDo","startOfToday","isAfter","updateTask","sendWebSocketMessage","jsxDEV","_jsxDEV","ToDoList","todos","setTasks","isDeleteMode","onEditTodo","selectedCategory","handleDeleteTask","_s","selectedTodoId","setSelectedTodoId","console","log","handleCheckboxChange","id","updatedTodos","map","todo","taskId","updatedTodo","completed","categoryId","updatedTask","find","userId","type","task","error","handleDeleteClick","response","data","message","handleDateChange","date","purpose","Date","toISOString","today","filteredTodos","filter","name","planDate","children","className","fileName","_jsxFileName","lineNumber","columnNumber","handleTodoClick","handleDelete","handleEditClick","isSelected","onDateChange","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isAfter } from 'date-fns';\nimport { updateTask } from '../api';\nimport { sendWebSocketMessage } from '../websocket';\n\nexport default function ToDoList({ todos = [], setTasks, isDeleteMode, onEditTodo, selectedCategory, handleDeleteTask }) {\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n\n  useEffect(() => {\n    console.log('Todos updated:', todos);\n  }, [todos]);\n\n  const handleCheckboxChange = async (id) => {\n    console.log('Checkbox changed for ID:', id);\n    const updatedTodos = todos.map(todo => {\n      if (todo.taskId === id) {\n        const updatedTodo = { ...todo, completed: !todo.completed };\n        if (updatedTodo.completed) {\n          updatedTodo.categoryId = 7; // Kategorie-ID auf 7 setzen, wenn die Aufgabe abgeschlossen ist\n        }\n        return updatedTodo;\n      }\n      return todo;\n    });\n  \n    setTasks(updatedTodos);\n  \n    const updatedTask = updatedTodos.find(todo => todo.taskId === id);\n    try {\n      // Aktualisiere das Backend über REST\n      await updateTask(updatedTask, userId);\n  \n      // Senden der WebSocket-Nachricht\n      sendWebSocketMessage('/topic/tasks', { type: 'TASK_UPDATE', task: updatedTask });\n      console.log('WebSocket update task successful');\n    } catch (error) {\n      console.error('Error updating task via WebSocket:', error);\n    }\n  };\n\n  const handleDeleteClick = async (id) => {\n    console.log('Deleting task with ID:', id);\n    try {\n      await handleDeleteTask(id);\n      console.log('Task deleted successfully');\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n    }\n  };\n\n  const handleDateChange = async (id, date, purpose) => {\n    console.log(`Updating ${purpose} date for ID: ${id}`);\n    const updatedTodos = todos.map(todo => {\n      if (todo.taskId === id) {\n        return {\n          ...todo,\n          [`${purpose}Date`]: date ? new Date(date).toISOString() : null,\n        };\n      }\n      return todo;\n    });\n\n    setTasks(updatedTodos);\n\n    const updatedTask = updatedTodos.find(todo => todo.taskId === id);\n    try {\n      // Senden der WebSocket-Nachricht\n      sendWebSocketMessage('/app/updateTask', updatedTask);\n      console.log('WebSocket update date successful');\n    } catch (error) {\n      console.error('Error updating date via WebSocket:', error);\n    }\n  };\n\n  const today = startOfToday();\n\n  const filteredTodos = todos.filter(todo => {\n    switch (selectedCategory.name) {\n      case 'Planned':\n        return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n      case 'Today':\n        return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today) && todo.categoryId !== 7;\n      case 'Personal':\n      case 'Work':\n      case 'Any Time':\n        return todo.categoryId === selectedCategory.id;\n      case 'All Tasks':\n        return !todo.planDate && todo.categoryId !== 7;\n      case 'Logbook':\n        return todo.categoryId === 7;\n      default:\n        return todo.categoryId === selectedCategory.id;\n    }\n  });\n\n  return (\n    <fieldset>\n      <legend className=\"sr-only\">Tasks</legend>\n      <div className=\"space-y-1\">\n        {filteredTodos.map(todo => (\n          <ToDo\n            key={todo.taskId} // Sicherstellen, dass jeder Todo-Element einen eindeutigen Key hat\n            todo={todo}\n            handleCheckboxChange={() => handleCheckboxChange(todo.taskId)}\n            handleTodoClick={() => setSelectedTodoId(todo.taskId === selectedTodoId ? null : todo.taskId)}\n            handleDelete={() => handleDeleteClick(todo.taskId)}\n            handleEditClick={() => onEditTodo(todo)}\n            isSelected={todo.taskId === selectedTodoId}\n            onDateChange={handleDateChange}\n            isDeleteMode={isDeleteMode}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}