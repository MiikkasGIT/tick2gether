{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  // Initialisiere categorizedTasks mit leeren Arrays für jede Kategorie\n  const categorizedTasks = {};\n\n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n  tasks.forEach(task => {\n    // Für alle anderen Kategorien\n    switch (task.categoryId) {\n      case 1:\n        // Alle Aufgaben\n        if (!categorizedTasks[1]) categorizedTasks[1] = [];\n        categorizedTasks[1].push(task);\n        break;\n      case 2:\n        categorizedTasks[2].push(task);\n        break;\n      case 3:\n        // Geplant (Aufgaben, die ein Plan-Datum haben)\n        if (task.planDate) {\n          if (!categorizedTasks[3]) categorizedTasks[3] = [];\n          categorizedTasks[3].push(task);\n        }\n        break;\n      case 4:\n        // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n        if (!task.dueDate) {\n          if (!categorizedTasks[4]) categorizedTasks[4] = [];\n          categorizedTasks[4].push(task);\n        }\n        break;\n      case 5:\n        // Arbeit (Aufgaben mit Kategorie-ID 5)\n        if (!categorizedTasks[5]) categorizedTasks[5] = [];\n        categorizedTasks[5].push(task);\n        break;\n      case 6:\n        // Persönlich (Aufgaben mit Kategorie-ID 6)\n        if (!categorizedTasks[6]) categorizedTasks[6] = [];\n        categorizedTasks[6].push(task);\n        break;\n      case 7:\n        categorizedTasks[7].push(task);\n        break;\n      default:\n        // Benutzerdefinierte Kategorien\n        if (!categorizedTasks[task.categoryId]) categorizedTasks[task.categoryId] = [];\n        categorizedTasks[task.categoryId].push(task);\n        break;\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","task","push","planDate","dueDate"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  // Initialisiere categorizedTasks mit leeren Arrays für jede Kategorie\n  const categorizedTasks = {};\n  \n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  tasks.forEach(task => {\n  \n      // Für alle anderen Kategorien\n      switch (task.categoryId) {\n        case 1:\n          // Alle Aufgaben\n          if (!categorizedTasks[1]) categorizedTasks[1] = [];\n          categorizedTasks[1].push(task);\n          break;\n        case 2:\n            categorizedTasks[2].push(task);\n          break;\n        case 3:\n          // Geplant (Aufgaben, die ein Plan-Datum haben)\n          if (task.planDate) {\n            if (!categorizedTasks[3]) categorizedTasks[3] = [];\n            categorizedTasks[3].push(task);\n          }\n          break;\n        case 4:\n          // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n          if (!task.dueDate) {\n            if (!categorizedTasks[4]) categorizedTasks[4] = [];\n            categorizedTasks[4].push(task);\n          }\n          break;\n        case 5:\n          // Arbeit (Aufgaben mit Kategorie-ID 5)\n          if (!categorizedTasks[5]) categorizedTasks[5] = [];\n          categorizedTasks[5].push(task);\n          break;\n        case 6:\n          // Persönlich (Aufgaben mit Kategorie-ID 6)\n          if (!categorizedTasks[6]) categorizedTasks[6] = [];\n          categorizedTasks[6].push(task);\n          break;\n        case 7:\n            categorizedTasks[7].push(task);\n            break;\n        default:\n          // Benutzerdefinierte Kategorien\n          if (!categorizedTasks[task.categoryId]) categorizedTasks[task.categoryId] = [];\n          categorizedTasks[task.categoryId].push(task);\n          break;\n      }\n  });\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD;EACA,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;EAEFL,KAAK,CAACG,OAAO,CAACG,IAAI,IAAI;IAElB;IACA,QAAQA,IAAI,CAACD,UAAU;MACrB,KAAK,CAAC;QACJ;QACA,IAAI,CAACH,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACK,IAAI,CAACD,IAAI,CAAC;QAC9B;MACF,KAAK,CAAC;QACFJ,gBAAgB,CAAC,CAAC,CAAC,CAACK,IAAI,CAACD,IAAI,CAAC;QAChC;MACF,KAAK,CAAC;QACJ;QACA,IAAIA,IAAI,CAACE,QAAQ,EAAE;UACjB,IAAI,CAACN,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;UAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACK,IAAI,CAACD,IAAI,CAAC;QAChC;QACA;MACF,KAAK,CAAC;QACJ;QACA,IAAI,CAACA,IAAI,CAACG,OAAO,EAAE;UACjB,IAAI,CAACP,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;UAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACK,IAAI,CAACD,IAAI,CAAC;QAChC;QACA;MACF,KAAK,CAAC;QACJ;QACA,IAAI,CAACJ,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACK,IAAI,CAACD,IAAI,CAAC;QAC9B;MACF,KAAK,CAAC;QACJ;QACA,IAAI,CAACJ,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACK,IAAI,CAACD,IAAI,CAAC;QAC9B;MACF,KAAK,CAAC;QACFJ,gBAAgB,CAAC,CAAC,CAAC,CAACK,IAAI,CAACD,IAAI,CAAC;QAC9B;MACJ;QACE;QACA,IAAI,CAACJ,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,EAAEH,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,GAAG,EAAE;QAC9EH,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,CAACE,IAAI,CAACD,IAAI,CAAC;QAC5C;IACJ;EACJ,CAAC,CAAC;EAEF,OAAOJ,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}