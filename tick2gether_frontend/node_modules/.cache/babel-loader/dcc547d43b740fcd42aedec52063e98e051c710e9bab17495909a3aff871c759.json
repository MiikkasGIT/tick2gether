{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Funktion zur Initialisierung der API mit festgelegter userID\nconst initializeApiWithUserId = async () => {\n  try {\n    // Schritt 1: Einloggen und Token erhalten\n    const credentials = {/* Hier deine Login-Daten */};\n    const tokenResponse = await axios.post('http://localhost:8080/api/v1/auth/login', credentials);\n    const token = tokenResponse.data;\n\n    // Schritt 2: Token in Cookies speichern\n    Cookies.set('jwtToken', token);\n\n    // Schritt 3: UserID abrufen\n    const userIdResponse = await axios.get('http://localhost:8080/api/v1/auth/userid', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const userId = userIdResponse.data.userId;\n\n    // Schritt 4: API mit baseURL und Autorisierung konfigurieren\n    const api = axios.create({\n      baseURL: 'http://localhost:8080/api/v1',\n      withCredentials: true,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    // Schritt 5: Interceptors für den JWT-Token hinzufügen\n    api.interceptors.request.use(config => {\n      const token = Cookies.get('jwtToken');\n      console.debug('Interceptor: JWT token from cookies:', token);\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n        console.debug('Interceptor: Authorization header set with token');\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Schritt 6: Funktionen für API-Anfragen definieren\n    const fetchTasks = () => api.get(`/task/getTasks?userId=${userId}`).then(res => res.data);\n    const addTask = task => api.post('/task/save', task).then(res => res.data);\n    const updateTask = task => api.put('/task/update', task).then(res => res.data);\n    const deleteTask = id => api.delete(`/task/delete/${id}`).then(res => res.data);\n    const fetchUser = () => api.get(`/user/${userId}`).then(res => res.data);\n    const registerUser = user => api.post('/auth/register', user).then(res => res.data);\n    const updateUser = user => api.put('/user/update', user).then(res => res.data);\n    const deleteUser = id => api.delete(`/user/deleteuser/${id}`).then(res => res.data);\n    const addCategory = category => api.post('/category/save', category).then(res => res.data);\n    const generateTokenForCategory = async categoryId => {\n      try {\n        const response = await api.post('/token/generateForCategory', {\n          categoryId\n        });\n        return response.data;\n      } catch (error) {\n        console.error('Error generating token for category:', error);\n        throw error;\n      }\n    };\n    const generateTokenForTask = async taskId => {\n      try {\n        const response = await api.post('/token/generateForTask', {\n          taskId\n        });\n        return response.data;\n      } catch (error) {\n        console.error('Error generating token for task:', error);\n        throw error;\n      }\n    };\n\n    // Schritt 7: Rückgabe der konfigurierten API-Methoden\n    return {\n      fetchTasks,\n      addTask,\n      updateTask,\n      deleteTask,\n      fetchUser,\n      registerUser,\n      updateUser,\n      deleteUser,\n      addCategory,\n      generateTokenForCategory,\n      generateTokenForTask\n    };\n  } catch (error) {\n    console.error('Error initializing API:', error);\n    throw new Error('API initialization failed');\n  }\n};\nexport default initializeApiWithUserId;","map":{"version":3,"names":["axios","Cookies","initializeApiWithUserId","credentials","tokenResponse","post","token","data","set","userIdResponse","get","headers","Authorization","userId","api","create","baseURL","withCredentials","interceptors","request","use","config","console","debug","error","Promise","reject","fetchTasks","then","res","addTask","task","updateTask","put","deleteTask","id","delete","fetchUser","registerUser","user","updateUser","deleteUser","addCategory","category","generateTokenForCategory","categoryId","response","generateTokenForTask","taskId","Error"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Funktion zur Initialisierung der API mit festgelegter userID\nconst initializeApiWithUserId = async () => {\n  try {\n    // Schritt 1: Einloggen und Token erhalten\n    const credentials = { /* Hier deine Login-Daten */ };\n    const tokenResponse = await axios.post('http://localhost:8080/api/v1/auth/login', credentials);\n    const token = tokenResponse.data;\n\n    // Schritt 2: Token in Cookies speichern\n    Cookies.set('jwtToken', token);\n\n    // Schritt 3: UserID abrufen\n    const userIdResponse = await axios.get('http://localhost:8080/api/v1/auth/userid', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const userId = userIdResponse.data.userId;\n\n    // Schritt 4: API mit baseURL und Autorisierung konfigurieren\n    const api = axios.create({\n      baseURL: 'http://localhost:8080/api/v1',\n      withCredentials: true,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    // Schritt 5: Interceptors für den JWT-Token hinzufügen\n    api.interceptors.request.use(\n      config => {\n        const token = Cookies.get('jwtToken');\n        console.debug('Interceptor: JWT token from cookies:', token);\n        if (token) {\n          config.headers['Authorization'] = `Bearer ${token}`;\n          console.debug('Interceptor: Authorization header set with token');\n        }\n        return config;\n      },\n      error => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Schritt 6: Funktionen für API-Anfragen definieren\n    const fetchTasks = () => api.get(`/task/getTasks?userId=${userId}`).then(res => res.data);\n    const addTask = (task) => api.post('/task/save', task).then(res => res.data);\n    const updateTask = (task) => api.put('/task/update', task).then(res => res.data);\n    const deleteTask = (id) => api.delete(`/task/delete/${id}`).then(res => res.data);\n    const fetchUser = () => api.get(`/user/${userId}`).then(res => res.data);\n    const registerUser = (user) => api.post('/auth/register', user).then(res => res.data);\n    const updateUser = (user) => api.put('/user/update', user).then(res => res.data);\n    const deleteUser = (id) => api.delete(`/user/deleteuser/${id}`).then(res => res.data);\n    const addCategory = (category) => api.post('/category/save', category).then(res => res.data);\n    const generateTokenForCategory = async (categoryId) => {\n      try {\n        const response = await api.post('/token/generateForCategory', { categoryId });\n        return response.data;\n      } catch (error) {\n        console.error('Error generating token for category:', error);\n        throw error;\n      }\n    };\n    const generateTokenForTask = async (taskId) => {\n      try {\n        const response = await api.post('/token/generateForTask', { taskId });\n        return response.data;\n      } catch (error) {\n        console.error('Error generating token for task:', error);\n        throw error;\n      }\n    };\n\n    // Schritt 7: Rückgabe der konfigurierten API-Methoden\n    return {\n      fetchTasks,\n      addTask,\n      updateTask,\n      deleteTask,\n      fetchUser,\n      registerUser,\n      updateUser,\n      deleteUser,\n      addCategory,\n      generateTokenForCategory,\n      generateTokenForTask\n    };\n  } catch (error) {\n    console.error('Error initializing API:', error);\n    throw new Error('API initialization failed');\n  }\n};\n\nexport default initializeApiWithUserId;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AACA,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,CAAE,6BAA8B;IACpD,MAAMC,aAAa,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,yCAAyC,EAAEF,WAAW,CAAC;IAC9F,MAAMG,KAAK,GAAGF,aAAa,CAACG,IAAI;;IAEhC;IACAN,OAAO,CAACO,GAAG,CAAC,UAAU,EAAEF,KAAK,CAAC;;IAE9B;IACA,MAAMG,cAAc,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,0CAA0C,EAAE;MACjFC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK;MAChC;IACF,CAAC,CAAC;IACF,MAAMO,MAAM,GAAGJ,cAAc,CAACF,IAAI,CAACM,MAAM;;IAEzC;IACA,MAAMC,GAAG,GAAGd,KAAK,CAACe,MAAM,CAAC;MACvBC,OAAO,EAAE,8BAA8B;MACvCC,eAAe,EAAE,IAAI;MACrBN,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK;MAChC;IACF,CAAC,CAAC;;IAEF;IACAQ,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;MACR,MAAMf,KAAK,GAAGL,OAAO,CAACS,GAAG,CAAC,UAAU,CAAC;MACrCY,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEjB,KAAK,CAAC;MAC5D,IAAIA,KAAK,EAAE;QACTe,MAAM,CAACV,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;QACnDgB,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;MACnE;MACA,OAAOF,MAAM;IACf,CAAC,EACDG,KAAK,IAAI;MACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CACF,CAAC;;IAED;IACA,MAAMG,UAAU,GAAGA,CAAA,KAAMb,GAAG,CAACJ,GAAG,CAAC,yBAAyBG,MAAM,EAAE,CAAC,CAACe,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IACzF,MAAMuB,OAAO,GAAIC,IAAI,IAAKjB,GAAG,CAACT,IAAI,CAAC,YAAY,EAAE0B,IAAI,CAAC,CAACH,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IAC5E,MAAMyB,UAAU,GAAID,IAAI,IAAKjB,GAAG,CAACmB,GAAG,CAAC,cAAc,EAAEF,IAAI,CAAC,CAACH,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IAChF,MAAM2B,UAAU,GAAIC,EAAE,IAAKrB,GAAG,CAACsB,MAAM,CAAC,gBAAgBD,EAAE,EAAE,CAAC,CAACP,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IACjF,MAAM8B,SAAS,GAAGA,CAAA,KAAMvB,GAAG,CAACJ,GAAG,CAAC,SAASG,MAAM,EAAE,CAAC,CAACe,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IACxE,MAAM+B,YAAY,GAAIC,IAAI,IAAKzB,GAAG,CAACT,IAAI,CAAC,gBAAgB,EAAEkC,IAAI,CAAC,CAACX,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IACrF,MAAMiC,UAAU,GAAID,IAAI,IAAKzB,GAAG,CAACmB,GAAG,CAAC,cAAc,EAAEM,IAAI,CAAC,CAACX,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IAChF,MAAMkC,UAAU,GAAIN,EAAE,IAAKrB,GAAG,CAACsB,MAAM,CAAC,oBAAoBD,EAAE,EAAE,CAAC,CAACP,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IACrF,MAAMmC,WAAW,GAAIC,QAAQ,IAAK7B,GAAG,CAACT,IAAI,CAAC,gBAAgB,EAAEsC,QAAQ,CAAC,CAACf,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACtB,IAAI,CAAC;IAC5F,MAAMqC,wBAAwB,GAAG,MAAOC,UAAU,IAAK;MACrD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhC,GAAG,CAACT,IAAI,CAAC,4BAA4B,EAAE;UAAEwC;QAAW,CAAC,CAAC;QAC7E,OAAOC,QAAQ,CAACvC,IAAI;MACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5D,MAAMA,KAAK;MACb;IACF,CAAC;IACD,MAAMuB,oBAAoB,GAAG,MAAOC,MAAM,IAAK;MAC7C,IAAI;QACF,MAAMF,QAAQ,GAAG,MAAMhC,GAAG,CAACT,IAAI,CAAC,wBAAwB,EAAE;UAAE2C;QAAO,CAAC,CAAC;QACrE,OAAOF,QAAQ,CAACvC,IAAI;MACtB,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxD,MAAMA,KAAK;MACb;IACF,CAAC;;IAED;IACA,OAAO;MACLG,UAAU;MACVG,OAAO;MACPE,UAAU;MACVE,UAAU;MACVG,SAAS;MACTC,YAAY;MACZE,UAAU;MACVC,UAAU;MACVC,WAAW;MACXE,wBAAwB;MACxBG;IACF,CAAC;EACH,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAM,IAAIyB,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF,CAAC;AAED,eAAe/C,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}