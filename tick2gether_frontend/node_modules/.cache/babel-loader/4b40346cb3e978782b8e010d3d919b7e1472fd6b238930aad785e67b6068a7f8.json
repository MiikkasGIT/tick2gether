{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.messageQueue = []; // Warteschlange f端r Nachrichten\n  }\n\n  // Verbindet zum WebSocket und abonniert den angegebenen Topic\n  connect(userId, onMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopic(userId, onMessageReceived);\n\n      // Sende alle Nachrichten in der Warteschlange\n      this.processQueue();\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onMessageReceived), this.reconnectDelay);\n    });\n  }\n\n  // Abonniert den spezifischen Topic f端r den Benutzer\n  subscribeToTopic(userId, onMessageReceived) {\n    const topic = `/user/${userId}/queue/tasks`;\n    console.log(`Subscribing to topic: ${topic}`);\n    this.stompClient.subscribe(topic, message => {\n      if (message.body) {\n        console.log(`Received message on topic ${topic}:`, message.body);\n        onMessageReceived(JSON.parse(message.body));\n      }\n    });\n  }\n\n  // Verarbeitet Nachrichten in der Warteschlange\n  processQueue() {\n    while (this.messageQueue.length > 0) {\n      const {\n        destination,\n        message\n      } = this.messageQueue.shift();\n      this.sendMessage(destination, message);\n    }\n  }\n\n  // Trennt die WebSocket-Verbindung\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  // Sendet eine Nachricht an den angegebenen Zielort\n  sendMessage(destination, message) {\n    if (this.connected) {\n      console.log(`Sending message to destination ${destination}:`, message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected. Queueing message.');\n      this.messageQueue.push({\n        destination,\n        message\n      });\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\n\n// Exportierte Funktionen zur Nutzung des WebSocket-Services\nexport const connectWebSocket = (userId, onMessageReceived) => {\n  webSocketService.connect(userId, onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","messageQueue","connect","userId","onMessageReceived","console","log","socket","over","frame","subscribeToTopic","processQueue","error","setTimeout","topic","subscribe","message","body","JSON","parse","length","destination","shift","sendMessage","disconnect","send","stringify","push","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.messageQueue = []; // Warteschlange f端r Nachrichten\n  }\n\n  // Verbindet zum WebSocket und abonniert den angegebenen Topic\n  connect(userId, onMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopic(userId, onMessageReceived);\n\n      // Sende alle Nachrichten in der Warteschlange\n      this.processQueue();\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onMessageReceived), this.reconnectDelay);\n    });\n  }\n\n  // Abonniert den spezifischen Topic f端r den Benutzer\n  subscribeToTopic(userId, onMessageReceived) {\n    const topic = `/user/${userId}/queue/tasks`;\n    console.log(`Subscribing to topic: ${topic}`);\n    this.stompClient.subscribe(topic, (message) => {\n      if (message.body) {\n        console.log(`Received message on topic ${topic}:`, message.body);\n        onMessageReceived(JSON.parse(message.body));\n      }\n    });\n  }\n\n  // Verarbeitet Nachrichten in der Warteschlange\n  processQueue() {\n    while (this.messageQueue.length > 0) {\n      const { destination, message } = this.messageQueue.shift();\n      this.sendMessage(destination, message);\n    }\n  }\n\n  // Trennt die WebSocket-Verbindung\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  // Sendet eine Nachricht an den angegebenen Zielort\n  sendMessage(destination, message) {\n    if (this.connected) {\n      console.log(`Sending message to destination ${destination}:`, message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected. Queueing message.');\n      this.messageQueue.push({ destination, message });\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\n// Exportierte Funktionen zur Nutzung des WebSocket-Services\nexport const connectWebSocket = (userId, onMessageReceived) => {\n  webSocketService.connect(userId, onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}