{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Bereits mit WebSocket verbunden');\n      return;\n    }\n    console.log('Versuche, WebSocket zu verbinden...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Mit WebSocket verbunden:', frame);\n      this.connected = true;\n      this.subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived);\n    }, error => {\n      console.error('Fehler beim Verbinden mit WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n  subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe('/topic/tasks', onTaskMessageReceived, 'tasks');\n    this.subscribe('/topic/categories', onCategoryMessageReceived, 'categories');\n  }\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      console.log(`Abonniere ${subscriptionKey} unter ${destination}`);\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, message => {\n        console.log(`${subscriptionKey} Nachricht erhalten:`, message.body);\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Fehler beim Parsen der ${subscriptionKey} Nachricht:`, error);\n        }\n      });\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Von WebSocket getrennt');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket-Client ist nicht vorhanden. Keine Verbindung zum Trennen.');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n      console.log('WebSocket-Nachricht gesendet:', {\n        destination,\n        message\n      });\n    } else {\n      console.error('Nachricht konnte nicht gesendet werden. WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/topic/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  console.log('Trenne WebSocket-Verbindung...');\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sende WebSocket-Nachricht...');\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  console.log(`Sende WebSocket-Nachricht an Benutzer ${userId}:`, message);\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","subscriptions","connect","onTaskMessageReceived","onCategoryMessageReceived","console","log","socket","over","frame","subscribeToTopics","error","setTimeout","subscribe","destination","callback","subscriptionKey","message","body","parsedMessage","JSON","parse","disconnect","warn","sendMessage","send","stringify","sendWebSocketMessageToUser","userId","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Bereits mit WebSocket verbunden');\n      return;\n    }\n\n    console.log('Versuche, WebSocket zu verbinden...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Mit WebSocket verbunden:', frame);\n      this.connected = true;\n      this.subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived);\n    }, (error) => {\n      console.error('Fehler beim Verbinden mit WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n\n  subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe('/topic/tasks', onTaskMessageReceived, 'tasks');\n    this.subscribe('/topic/categories', onCategoryMessageReceived, 'categories');\n  }\n\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      console.log(`Abonniere ${subscriptionKey} unter ${destination}`);\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, (message) => {\n        console.log(`${subscriptionKey} Nachricht erhalten:`, message.body);\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Fehler beim Parsen der ${subscriptionKey} Nachricht:`, error);\n        }\n      });\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Von WebSocket getrennt');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket-Client ist nicht vorhanden. Keine Verbindung zum Trennen.');\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n      console.log('WebSocket-Nachricht gesendet:', { destination, message });\n    } else {\n      console.error('Nachricht konnte nicht gesendet werden. WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/topic/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  console.log('Trenne WebSocket-Verbindung...');\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sende WebSocket-Nachricht...');\n  webSocketService.sendMessage(destination, message);\n};\n\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  console.log(`Sende WebSocket-Nachricht an Benutzer ${userId}:`, message);\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}