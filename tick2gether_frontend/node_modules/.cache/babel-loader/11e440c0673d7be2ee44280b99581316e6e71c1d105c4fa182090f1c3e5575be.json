{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  // Initialisiere categorizedTasks mit leeren Arrays für jede Kategorie\n  const categorizedTasks = {};\n\n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Durchlaufe alle Aufgaben und ordne sie den entsprechenden Kategorien zu\n  tasks.forEach(task => {\n    const {\n      categoryId,\n      completed,\n      planDate,\n      dueDate\n    } = task;\n    if (categoryId in categorizedTasks) {\n      if (categoryId === 1) {\n        // Alle Aufgaben\n        categorizedTasks[1].push(task);\n      } else if (categoryId === 2) {\n        // Heute (Aufgaben, die heute fällig sind)\n        const today = new Date().toISOString().split('T')[0];\n        if (dueDate === today) {\n          categorizedTasks[2].push(task);\n        }\n      } else if (categoryId === 3) {\n        // Geplant (Aufgaben, die ein Plan-Datum haben)\n        if (planDate) {\n          categorizedTasks[3].push(task);\n        }\n      } else if (categoryId === 4) {\n        // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n        if (!dueDate) {\n          categorizedTasks[4].push(task);\n        }\n      } else if (categoryId === 5) {\n        // Arbeit\n        categorizedTasks[5].push(task);\n      } else if (categoryId === 6) {\n        // Persönlich\n        categorizedTasks[6].push(task);\n      } else if (categoryId === 7) {\n        // Logbuch (Abgeschlossene Aufgaben)\n        if (completed) {\n          categorizedTasks[7].push(task);\n        }\n      } else {\n        // Benutzerdefinierte Kategorien\n        if (!categorizedTasks[categoryId]) {\n          categorizedTasks[categoryId] = [];\n        }\n        categorizedTasks[categoryId].push(task);\n      }\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","task","completed","planDate","dueDate","push","today","Date","toISOString","split"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  // Initialisiere categorizedTasks mit leeren Arrays für jede Kategorie\n  const categorizedTasks = {};\n\n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Durchlaufe alle Aufgaben und ordne sie den entsprechenden Kategorien zu\n  tasks.forEach(task => {\n    const { categoryId, completed, planDate, dueDate } = task;\n\n    if (categoryId in categorizedTasks) {\n      if (categoryId === 1) {\n        // Alle Aufgaben\n        categorizedTasks[1].push(task);\n      } else if (categoryId === 2) {\n        // Heute (Aufgaben, die heute fällig sind)\n        const today = new Date().toISOString().split('T')[0];\n        if (dueDate === today) {\n          categorizedTasks[2].push(task);\n        }\n      } else if (categoryId === 3) {\n        // Geplant (Aufgaben, die ein Plan-Datum haben)\n        if (planDate) {\n          categorizedTasks[3].push(task);\n        }\n      } else if (categoryId === 4) {\n        // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n        if (!dueDate) {\n          categorizedTasks[4].push(task);\n        }\n      } else if (categoryId === 5) {\n        // Arbeit\n        categorizedTasks[5].push(task);\n      } else if (categoryId === 6) {\n        // Persönlich\n        categorizedTasks[6].push(task);\n      } else if (categoryId === 7) {\n        // Logbuch (Abgeschlossene Aufgaben)\n        if (completed) {\n          categorizedTasks[7].push(task);\n        }\n      } else {\n        // Benutzerdefinierte Kategorien\n        if (!categorizedTasks[categoryId]) {\n          categorizedTasks[categoryId] = [];\n        }\n        categorizedTasks[categoryId].push(task);\n      }\n    }\n  });\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD;EACA,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;;EAEF;EACAL,KAAK,CAACG,OAAO,CAACG,IAAI,IAAI;IACpB,MAAM;MAAED,UAAU;MAAEE,SAAS;MAAEC,QAAQ;MAAEC;IAAQ,CAAC,GAAGH,IAAI;IAEzD,IAAID,UAAU,IAAIH,gBAAgB,EAAE;MAClC,IAAIG,UAAU,KAAK,CAAC,EAAE;QACpB;QACAH,gBAAgB,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACJ,IAAI,CAAC;MAChC,CAAC,MAAM,IAAID,UAAU,KAAK,CAAC,EAAE;QAC3B;QACA,MAAMM,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpD,IAAIL,OAAO,KAAKE,KAAK,EAAE;UACrBT,gBAAgB,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACJ,IAAI,CAAC;QAChC;MACF,CAAC,MAAM,IAAID,UAAU,KAAK,CAAC,EAAE;QAC3B;QACA,IAAIG,QAAQ,EAAE;UACZN,gBAAgB,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACJ,IAAI,CAAC;QAChC;MACF,CAAC,MAAM,IAAID,UAAU,KAAK,CAAC,EAAE;QAC3B;QACA,IAAI,CAACI,OAAO,EAAE;UACZP,gBAAgB,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACJ,IAAI,CAAC;QAChC;MACF,CAAC,MAAM,IAAID,UAAU,KAAK,CAAC,EAAE;QAC3B;QACAH,gBAAgB,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACJ,IAAI,CAAC;MAChC,CAAC,MAAM,IAAID,UAAU,KAAK,CAAC,EAAE;QAC3B;QACAH,gBAAgB,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACJ,IAAI,CAAC;MAChC,CAAC,MAAM,IAAID,UAAU,KAAK,CAAC,EAAE;QAC3B;QACA,IAAIE,SAAS,EAAE;UACbL,gBAAgB,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACJ,IAAI,CAAC;QAChC;MACF,CAAC,MAAM;QACL;QACA,IAAI,CAACJ,gBAAgB,CAACG,UAAU,CAAC,EAAE;UACjCH,gBAAgB,CAACG,UAAU,CAAC,GAAG,EAAE;QACnC;QACAH,gBAAgB,CAACG,UAAU,CAAC,CAACK,IAAI,CAACJ,IAAI,CAAC;MACzC;IACF;EACF,CAAC,CAAC;EAEF,OAAOJ,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}