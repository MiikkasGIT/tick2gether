{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n  cconnect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe(`/user/${userId}/queue/tasks`, onTaskMessageReceived, `tasks-${userId}`);\n    this.subscribe(`/user/${userId}/queue/categories`, onCategoryMessageReceived, `categories-${userId}`);\n  }\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      console.log(`Abonniere ${subscriptionKey} unter ${destination}`);\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, message => {\n        console.log(`${subscriptionKey} Nachricht erhalten:`, message.body);\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Parsed message:', parsedMessage); // Debugging-Log hinzufügen\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Fehler beim Parsen der ${subscriptionKey} Nachricht:`, error);\n        }\n      });\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Von WebSocket getrennt');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket-Client ist nicht vorhanden. Keine Verbindung zum Trennen.');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n      console.log('WebSocket-Nachricht gesendet:', {\n        destination,\n        message\n      });\n    } else {\n      console.error('Nachricht konnte nicht gesendet werden. WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/queue/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  console.log('Trenne WebSocket-Verbindung...');\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sende WebSocket-Nachricht...');\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","subscriptions","cconnect","userId","onTaskMessageReceived","onCategoryMessageReceived","console","log","socket","over","connect","frame","subscribeToTopics","error","setTimeout","subscribe","destination","callback","subscriptionKey","message","body","parsedMessage","JSON","parse","disconnect","warn","sendMessage","send","stringify","sendWebSocketMessageToUser","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n\n  cconnect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n  \n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n  \n    this.stompClient.connect({}, (frame) => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n\n\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe(`/user/${userId}/queue/tasks`, onTaskMessageReceived, `tasks-${userId}`);\n    this.subscribe(`/user/${userId}/queue/categories`, onCategoryMessageReceived, `categories-${userId}`);\n  }\n\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      console.log(`Abonniere ${subscriptionKey} unter ${destination}`);\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, (message) => {\n        console.log(`${subscriptionKey} Nachricht erhalten:`, message.body);\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Parsed message:', parsedMessage); // Debugging-Log hinzufügen\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Fehler beim Parsen der ${subscriptionKey} Nachricht:`, error);\n        }\n      });\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Von WebSocket getrennt');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket-Client ist nicht vorhanden. Keine Verbindung zum Trennen.');\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n      console.log('WebSocket-Nachricht gesendet:', { destination, message });\n    } else {\n      console.error('Nachricht konnte nicht gesendet werden. WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/queue/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  console.log('Trenne WebSocket-Verbindung...');\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sende WebSocket-Nachricht...');\n  webSocketService.sendMessage(destination, message);\n};\n\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}