{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived, sharedTaskId = null, sharedCategoryId = null) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000\n  });\n  stompClient.onConnect = frame => {\n    console.log('WebSocket connected');\n    try {\n      // Subscribing to user's task and category queues\n      stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Task message received for user:', userId, parsedMessage);\n        onTaskMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to task topic: /user/${userId}/queue/tasks`);\n      stompClient.subscribe(`/user/${userId}/queue/categories`, message => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Category message received for user:', userId, parsedMessage);\n        onCategoryMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to category topic: /user/${userId}/queue/categories`);\n\n      // Subscribing to shared task and category queues if provided\n      if (sharedTaskId) {\n        const taskTopic = `/task/${sharedTaskId}/queue`;\n        stompClient.subscribe(taskTopic, message => {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Task message received for shared task:', sharedTaskId, parsedMessage);\n          onTaskMessageReceived(parsedMessage);\n        });\n        console.log(`SUBSCRIBED to shared task topic: ${taskTopic}`);\n      }\n      if (sharedCategoryId) {\n        const categoryTopic = `/category/${sharedCategoryId}/queue`;\n        stompClient.subscribe(categoryTopic, message => {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Category message received for shared category:', sharedCategoryId, parsedMessage);\n          onCategoryMessageReceived(parsedMessage);\n        });\n        console.log(`SUBSCRIBED to shared category topic: ${categoryTopic}`);\n      }\n    } catch (error) {\n      console.error('Subscription error:', error);\n    }\n  };\n  stompClient.onStompError = frame => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n  stompClient.onWebSocketClose = event => {\n    console.warn('WebSocket closed:', event);\n  };\n  stompClient.onWebSocketError = error => {\n    console.error('WebSocket error:', error);\n  };\n  stompClient.activate();\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message)\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};","map":{"version":3,"names":["Client","SockJS","stompClient","connectWebSocket","userId","onTaskMessageReceived","onCategoryMessageReceived","sharedTaskId","sharedCategoryId","socket","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","console","log","subscribe","message","parsedMessage","JSON","parse","body","taskTopic","categoryTopic","error","onStompError","headers","onWebSocketClose","event","warn","onWebSocketError","activate","disconnectWebSocket","deactivate","sendWebSocketMessage","destination","connected","publish","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nlet stompClient = null;\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived, sharedTaskId = null, sharedCategoryId = null) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n  });\n\n  stompClient.onConnect = (frame) => {\n    console.log('WebSocket connected');\n    \n    try {\n      // Subscribing to user's task and category queues\n      stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Task message received for user:', userId, parsedMessage);\n        onTaskMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to task topic: /user/${userId}/queue/tasks`);\n\n      stompClient.subscribe(`/user/${userId}/queue/categories`, (message) => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Category message received for user:', userId, parsedMessage);\n        onCategoryMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to category topic: /user/${userId}/queue/categories`);\n\n      // Subscribing to shared task and category queues if provided\n      if (sharedTaskId) {\n        const taskTopic = `/task/${sharedTaskId}/queue`;\n        stompClient.subscribe(taskTopic, (message) => {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Task message received for shared task:', sharedTaskId, parsedMessage);\n          onTaskMessageReceived(parsedMessage);\n        });\n        console.log(`SUBSCRIBED to shared task topic: ${taskTopic}`);\n      }\n\n      if (sharedCategoryId) {\n        const categoryTopic = `/category/${sharedCategoryId}/queue`;\n        stompClient.subscribe(categoryTopic, (message) => {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Category message received for shared category:', sharedCategoryId, parsedMessage);\n          onCategoryMessageReceived(parsedMessage);\n        });\n        console.log(`SUBSCRIBED to shared category topic: ${categoryTopic}`);\n      }\n    } catch (error) {\n      console.error('Subscription error:', error);\n    }\n  };\n\n  stompClient.onStompError = (frame) => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n\n  stompClient.onWebSocketClose = (event) => {\n    console.warn('WebSocket closed:', event);\n  };\n\n  stompClient.onWebSocketError = (error) => {\n    console.error('WebSocket error:', error);\n  };\n\n  stompClient.activate();\n};\n\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message),\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}