{"ast":null,"code":"// websocket.js\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000\n  });\n  stompClient.onConnect = frame => {\n    console.log('WebSocket connected');\n    const userTaskQueue = `/user/${userId}/queue/tasks`;\n    const userCategoryQueue = `/user/${userId}/queue/categories`;\n    stompClient.subscribe(userTaskQueue, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Task message received on topic ${userTaskQueue}:`, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    stompClient.subscribe(userCategoryQueue, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Category message received on topic ${userCategoryQueue}:`, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n  };\n  stompClient.onStompError = frame => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n  stompClient.activate();\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message)\n    });\n    console.log(`Sending WebSocket message to topic ${destination}:`, message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\nexport const subscribeToSharedTask = (taskId, onTaskMessageReceived) => {\n  const taskQueue = `/task/${taskId}/queue`;\n  if (stompClient && stompClient.connected) {\n    stompClient.subscribe(taskQueue, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Task message received for shared task on topic ${taskQueue}:`, taskId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    console.log(`Subscribed to shared task on topic ${taskQueue}:`, taskId);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\nexport const subscribeToSharedCategory = (categoryId, onCategoryMessageReceived) => {\n  const categoryQueue = `/category/${categoryId}/queue`;\n  if (stompClient && stompClient.connected) {\n    stompClient.subscribe(categoryQueue, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Category message received for shared category on topic ${categoryQueue}:`, categoryId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n    console.log(`Subscribed to shared category on topic ${categoryQueue}:`, categoryId);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};","map":{"version":3,"names":["Client","SockJS","stompClient","connectWebSocket","userId","onTaskMessageReceived","onCategoryMessageReceived","socket","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","console","log","userTaskQueue","userCategoryQueue","subscribe","message","parsedMessage","JSON","parse","body","onStompError","error","headers","activate","disconnectWebSocket","deactivate","sendWebSocketMessage","destination","connected","publish","stringify","subscribeToSharedTask","taskId","taskQueue","subscribeToSharedCategory","categoryId","categoryQueue"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["// websocket.js\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nlet stompClient = null;\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n  });\n\n  stompClient.onConnect = (frame) => {\n    console.log('WebSocket connected');\n    const userTaskQueue = `/user/${userId}/queue/tasks`;\n    const userCategoryQueue = `/user/${userId}/queue/categories`;\n\n    stompClient.subscribe(userTaskQueue, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Task message received on topic ${userTaskQueue}:`, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n\n    stompClient.subscribe(userCategoryQueue, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Category message received on topic ${userCategoryQueue}:`, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n  };\n\n  stompClient.onStompError = (frame) => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n\n  stompClient.activate();\n};\n\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message),\n    });\n    console.log(`Sending WebSocket message to topic ${destination}:`, message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n\nexport const subscribeToSharedTask = (taskId, onTaskMessageReceived) => {\n  const taskQueue = `/task/${taskId}/queue`;\n  if (stompClient && stompClient.connected) {\n    stompClient.subscribe(taskQueue, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Task message received for shared task on topic ${taskQueue}:`, taskId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    console.log(`Subscribed to shared task on topic ${taskQueue}:`, taskId);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n\nexport const subscribeToSharedCategory = (categoryId, onCategoryMessageReceived) => {\n  const categoryQueue = `/category/${categoryId}/queue`;\n  if (stompClient && stompClient.connected) {\n    stompClient.subscribe(categoryQueue, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log(`Category message received for shared category on topic ${categoryQueue}:`, categoryId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n    console.log(`Subscribed to shared category on topic ${categoryQueue}:`, categoryId);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}