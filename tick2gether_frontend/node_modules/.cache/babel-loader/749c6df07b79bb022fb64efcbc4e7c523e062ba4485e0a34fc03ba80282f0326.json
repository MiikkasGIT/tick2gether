{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n  categories.forEach(category => {\n    switch (category.categoryId) {\n      case 1:\n        // Alle Aufgaben\n        categorizedTasks[category.categoryId] = tasks;\n        break;\n      case 2:\n        // Heute (Aufgaben, die heute fällig sind)\n        categorizedTasks[category.categoryId] = tasks.filter(task => {\n          const today = new Date().toISOString().split('T')[0];\n          return task.dueDate === today;\n        });\n        break;\n      case 3:\n        // Geplant (Aufgaben, die ein Plan-Datum haben)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.planDate);\n        break;\n      case 4:\n        // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n        categorizedTasks[category.categoryId] = tasks.filter(task => !task.dueDate);\n        break;\n      case 5:\n        // Arbeit (Aufgaben mit Kategorie-ID 5)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.categoryId === 5);\n        break;\n      case 6:\n        // Persönlich (Aufgaben mit Kategorie-ID 6)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.categoryId === 6);\n        break;\n      case 7:\n        // Logbuch (Abgeschlossene Aufgaben)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.completed);\n        break;\n      default:\n        // Benutzerdefinierte Kategorien\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.categoryId === category.categoryId);\n        break;\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","filter","task","today","Date","toISOString","split","dueDate","planDate","completed"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  categories.forEach(category => {\n    switch (category.categoryId) {\n      case 1:\n        // Alle Aufgaben\n        categorizedTasks[category.categoryId] = tasks;\n        break;\n      case 2:\n        // Heute (Aufgaben, die heute fällig sind)\n        categorizedTasks[category.categoryId] = tasks.filter(task => {\n          const today = new Date().toISOString().split('T')[0];\n          return task.dueDate === today;\n        });\n        break;\n      case 3:\n        // Geplant (Aufgaben, die ein Plan-Datum haben)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.planDate);\n        break;\n      case 4:\n        // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n        categorizedTasks[category.categoryId] = tasks.filter(task => !task.dueDate);\n        break;\n      case 5:\n        // Arbeit (Aufgaben mit Kategorie-ID 5)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.categoryId === 5);\n        break;\n      case 6:\n        // Persönlich (Aufgaben mit Kategorie-ID 6)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.categoryId === 6);\n        break;\n      case 7:\n        // Logbuch (Abgeschlossene Aufgaben)\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.completed);\n        break;\n      default:\n        // Benutzerdefinierte Kategorien\n        categorizedTasks[category.categoryId] = tasks.filter(task => task.categoryId === category.categoryId);\n        break;\n    }\n  });\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;EAE3BD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7B,QAAQA,QAAQ,CAACC,UAAU;MACzB,KAAK,CAAC;QACJ;QACAH,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK;QAC7C;MACF,KAAK,CAAC;QACJ;QACAE,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAI;UAC3D,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACpD,OAAOJ,IAAI,CAACK,OAAO,KAAKJ,KAAK;QAC/B,CAAC,CAAC;QACF;MACF,KAAK,CAAC;QACJ;QACAN,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACM,QAAQ,CAAC;QAC3E;MACF,KAAK,CAAC;QACJ;QACAX,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACK,OAAO,CAAC;QAC3E;MACF,KAAK,CAAC;QACJ;QACAV,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,UAAU,KAAK,CAAC,CAAC;QACnF;MACF,KAAK,CAAC;QACJ;QACAH,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,UAAU,KAAK,CAAC,CAAC;QACnF;MACF,KAAK,CAAC;QACJ;QACAH,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACO,SAAS,CAAC;QAC5E;MACF;QACE;QACAZ,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,UAAU,KAAKD,QAAQ,CAACC,UAAU,CAAC;QACrG;IACJ;EACF,CAAC,CAAC;EAEF,OAAOH,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}