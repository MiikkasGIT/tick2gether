{"ast":null,"code":"// websocket.js\nimport Stomp from 'stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = Stomp.over(socket);\n  stompClient.connect({}, () => {\n    console.log('WebSocket connected');\n    stompClient.subscribe('/user/' + userId + '/queue/tasks', message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received:', parsedMessage); // Debugging-Log hinzufügen\n      onTaskMessageReceived(parsedMessage);\n    });\n    stompClient.subscribe('/user/' + userId + '/queue/categories', message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received:', parsedMessage); // Debugging-Log hinzufügen\n      onCategoryMessageReceived(parsedMessage);\n    });\n  }, error => {\n    console.error('WebSocket connection error:', error);\n  });\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.disconnect();\n    console.log('WebSocket disconnected');\n  }\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(destination, {}, JSON.stringify(message));\n    console.log('Sending WebSocket message:', message); // Debugging-Log hinzufügen\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};","map":{"version":3,"names":["Stomp","SockJS","stompClient","connectWebSocket","userId","onTaskMessageReceived","onCategoryMessageReceived","socket","over","connect","console","log","subscribe","message","parsedMessage","JSON","parse","body","error","disconnectWebSocket","disconnect","sendWebSocketMessage","destination","connected","send","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["// websocket.js\nimport Stomp from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nlet stompClient = null;\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = Stomp.over(socket);\n\n  stompClient.connect({}, () => {\n    console.log('WebSocket connected');\n    stompClient.subscribe('/user/' + userId + '/queue/tasks', (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received:', parsedMessage); // Debugging-Log hinzufügen\n      onTaskMessageReceived(parsedMessage);\n    });\n\n    stompClient.subscribe('/user/' + userId + '/queue/categories', (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received:', parsedMessage); // Debugging-Log hinzufügen\n      onCategoryMessageReceived(parsedMessage);\n    });\n  }, (error) => {\n    console.error('WebSocket connection error:', error);\n  });\n};\n\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.disconnect();\n    console.log('WebSocket disconnected');\n  }\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(destination, {}, JSON.stringify(message));\n    console.log('Sending WebSocket message:', message); // Debugging-Log hinzufügen\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,qBAAqB,EAAEC,yBAAyB,KAAK;EAC5F,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC,0BAA0B,CAAC;EACrDC,WAAW,GAAGF,KAAK,CAACQ,IAAI,CAACD,MAAM,CAAC;EAEhCL,WAAW,CAACO,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCT,WAAW,CAACU,SAAS,CAAC,QAAQ,GAAGR,MAAM,GAAG,cAAc,EAAGS,OAAO,IAAK;MACrE,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAC9CP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEG,aAAa,CAAC,CAAC,CAAC;MACtDT,qBAAqB,CAACS,aAAa,CAAC;IACtC,CAAC,CAAC;IAEFZ,WAAW,CAACU,SAAS,CAAC,QAAQ,GAAGR,MAAM,GAAG,mBAAmB,EAAGS,OAAO,IAAK;MAC1E,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAC9CP,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEG,aAAa,CAAC,CAAC,CAAC;MAC1DR,yBAAyB,CAACQ,aAAa,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC,EAAGI,KAAK,IAAK;IACZR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,IAAIjB,WAAW,KAAK,IAAI,EAAE;IACxBA,WAAW,CAACkB,UAAU,CAAC,CAAC;IACxBV,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC;AACF,CAAC;AAED,OAAO,MAAMU,oBAAoB,GAAGA,CAACC,WAAW,EAAET,OAAO,KAAK;EAC5D,IAAIX,WAAW,IAAIA,WAAW,CAACqB,SAAS,EAAE;IACxCrB,WAAW,CAACsB,IAAI,CAACF,WAAW,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACU,SAAS,CAACZ,OAAO,CAAC,CAAC;IAC1DH,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEE,OAAO,CAAC,CAAC,CAAC;EACtD,CAAC,MAAM;IACLH,OAAO,CAACQ,KAAK,CAAC,4BAA4B,CAAC;EAC7C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}