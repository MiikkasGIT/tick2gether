{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe(`/user/${userId}/queue/tasks`, onTaskMessageReceived, `tasks-${userId}`);\n    this.subscribe(`/user/${userId}/queue/categories`, onCategoryMessageReceived, `categories-${userId}`);\n  }\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      console.log(`Subscribing to ${subscriptionKey} at ${destination}`);\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, message => {\n        console.log(`${subscriptionKey} message received:`, message.body);\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Parsed message:', parsedMessage); // Debugging log\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Error parsing ${subscriptionKey} message:`, error);\n        }\n      });\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket client not present. No connection to disconnect.');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n      console.log('WebSocket message sent:', {\n        destination,\n        message\n      });\n    } else {\n      console.error('Message could not be sent. WebSocket connection is not established.');\n    }\n  }\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/queue/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  console.log('Disconnecting WebSocket...');\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sending WebSocket message...');\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","subscriptions","connect","userId","onTaskMessageReceived","onCategoryMessageReceived","console","log","socket","over","frame","subscribeToTopics","error","setTimeout","subscribe","destination","callback","subscriptionKey","message","body","parsedMessage","JSON","parse","disconnect","warn","sendMessage","send","stringify","sendWebSocketMessageToUser","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n\n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe(`/user/${userId}/queue/tasks`, onTaskMessageReceived, `tasks-${userId}`);\n    this.subscribe(`/user/${userId}/queue/categories`, onCategoryMessageReceived, `categories-${userId}`);\n  }\n\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      console.log(`Subscribing to ${subscriptionKey} at ${destination}`);\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, (message) => {\n        console.log(`${subscriptionKey} message received:`, message.body);\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Parsed message:', parsedMessage); // Debugging log\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Error parsing ${subscriptionKey} message:`, error);\n        }\n      });\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket client not present. No connection to disconnect.');\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n      console.log('WebSocket message sent:', { destination, message });\n    } else {\n      console.error('Message could not be sent. WebSocket connection is not established.');\n    }\n  }\n\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/queue/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  console.log('Disconnecting WebSocket...');\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sending WebSocket message...');\n  webSocketService.sendMessage(destination, message);\n};\n\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}