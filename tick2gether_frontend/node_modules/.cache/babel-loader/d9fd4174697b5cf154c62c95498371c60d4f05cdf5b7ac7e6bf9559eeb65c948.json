{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport { fetchUserId } from '../api'; // Importiere die fetchUserId Funktion\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.maxReconnectAttempts = 10; // Max. Anzahl an Wiederverbindungsversuchen\n    this.messageQueue = []; // Warteschlange für Nachrichten\n    this.reconnectAttempts = 0; // Anzahl der Wiederverbindungsversuche\n  }\n  async connect(onMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n    try {\n      // Benutzer-ID abrufen\n      const userId = await fetchUserId();\n      if (!userId) {\n        throw new Error('Failed to fetch user ID');\n      }\n      const socket = new SockJS(SOCKET_URL);\n      this.stompClient = Stomp.over(socket);\n      this.stompClient.connect({}, frame => {\n        console.log('Connected to WebSocket:', frame);\n        this.connected = true;\n        this.reconnectAttempts = 0; // Reset retry counter\n        this.subscribeToTopic(userId, onMessageReceived);\n        this.processQueue();\n      }, error => {\n        console.error('Error connecting to WebSocket:', error);\n        this.connected = false;\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          setTimeout(() => this.connect(onMessageReceived), this.reconnectDelay);\n        } else {\n          console.error('Max reconnect attempts reached.');\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching user ID:', error);\n    }\n  }\n  subscribeToTopic(userId, onMessageReceived) {\n    if (!userId) {\n      console.error('Invalid userId:', userId);\n      return;\n    }\n    const topic = `/user/${userId}/queue/tasks`;\n    console.log(`Subscribing to topic: ${topic}`);\n    if (this.stompClient) {\n      this.stompClient.subscribe(topic, message => {\n        if (message.body) {\n          console.log(`Received message on topic ${topic}:`, message.body);\n          onMessageReceived(JSON.parse(message.body));\n        }\n      });\n    } else {\n      console.error('STOMP client is not initialized.');\n    }\n  }\n  processQueue() {\n    while (this.messageQueue.length > 0) {\n      const {\n        destination,\n        message\n      } = this.messageQueue.shift();\n      this.sendMessage(destination, message);\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.connected) {\n      console.log(`Sending message to destination ${destination}:`, message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected. Queueing message.');\n      this.messageQueue.push({\n        destination,\n        message\n      });\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => {\n  webSocketService.connect(onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","fetchUserId","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","maxReconnectAttempts","messageQueue","reconnectAttempts","connect","onMessageReceived","console","log","userId","Error","socket","over","frame","subscribeToTopic","processQueue","error","setTimeout","topic","subscribe","message","body","JSON","parse","length","destination","shift","sendMessage","disconnect","send","stringify","push","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport { fetchUserId } from '../api'; // Importiere die fetchUserId Funktion\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.maxReconnectAttempts = 10; // Max. Anzahl an Wiederverbindungsversuchen\n    this.messageQueue = []; // Warteschlange für Nachrichten\n    this.reconnectAttempts = 0; // Anzahl der Wiederverbindungsversuche\n  }\n\n  async connect(onMessageReceived) {\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n\n    try {\n      // Benutzer-ID abrufen\n      const userId = await fetchUserId();\n      \n      if (!userId) {\n        throw new Error('Failed to fetch user ID');\n      }\n\n      const socket = new SockJS(SOCKET_URL);\n      this.stompClient = Stomp.over(socket);\n\n      this.stompClient.connect({}, (frame) => {\n        console.log('Connected to WebSocket:', frame);\n        this.connected = true;\n        this.reconnectAttempts = 0; // Reset retry counter\n        this.subscribeToTopic(userId, onMessageReceived);\n        this.processQueue();\n      }, (error) => {\n        console.error('Error connecting to WebSocket:', error);\n        this.connected = false;\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          setTimeout(() => this.connect(onMessageReceived), this.reconnectDelay);\n        } else {\n          console.error('Max reconnect attempts reached.');\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching user ID:', error);\n    }\n  }\n\n  subscribeToTopic(userId, onMessageReceived) {\n    if (!userId) {\n      console.error('Invalid userId:', userId);\n      return;\n    }\n\n    const topic = `/user/${userId}/queue/tasks`;\n    console.log(`Subscribing to topic: ${topic}`);\n\n    if (this.stompClient) {\n      this.stompClient.subscribe(topic, (message) => {\n        if (message.body) {\n          console.log(`Received message on topic ${topic}:`, message.body);\n          onMessageReceived(JSON.parse(message.body));\n        }\n      });\n    } else {\n      console.error('STOMP client is not initialized.');\n    }\n  }\n\n  processQueue() {\n    while (this.messageQueue.length > 0) {\n      const { destination, message } = this.messageQueue.shift();\n      this.sendMessage(destination, message);\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.connected) {\n      console.log(`Sending message to destination ${destination}:`, message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected. Queueing message.');\n      this.messageQueue.push({ destination, message });\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => {\n  webSocketService.connect(onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}