{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\n// WebSocket URL - Ersetze dies durch die tatsächliche URL deines WebSocket-Servers\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\n// WebSocketService-Klasse\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n\n  // Methode zum Verbinden mit dem WebSocket-Server\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    if (this.stompClient) {\n      console.log('Bereits mit WebSocket verbunden');\n      return; // Verhindert eine erneute Verbindung, wenn bereits verbunden\n    }\n    console.log('Versuche, WebSocket zu verbinden...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Mit WebSocket verbunden:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, error => {\n      console.error('Fehler beim Verbinden mit WebSocket:', error);\n      this.connected = false;\n      console.log(`Wiederverbindungsversuch in ${this.reconnectDelay / 1000} Sekunden...`);\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  // Methode zum Abonnieren von Themen\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    // Abonnieren von Aufgabenaktualisierungen, falls noch nicht abonniert\n    if (!this.subscriptions[`tasks-${userId}`]) {\n      console.log(`Abonnieren von Aufgaben für Benutzer ${userId}`);\n      this.subscriptions[`tasks-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n        console.log('Aufgaben-Nachricht erhalten:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Geparste Aufgaben-Nachricht:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Fehler beim Parsen der Aufgaben-Nachricht:', error);\n        }\n      });\n    } else {\n      console.log(`Bereits für Aufgaben von Benutzer ${userId} abonniert`);\n    }\n\n    // Abonnieren von Kategorisierung-Updates, falls noch nicht abonniert\n    if (!this.subscriptions[`categories-${userId}`]) {\n      console.log(`Abonnieren von Kategorien für Benutzer ${userId}`);\n      this.subscriptions[`categories-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n        console.log('Kategorisierung-Nachricht erhalten:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Geparste Kategorisierung-Nachricht:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Fehler beim Parsen der Kategorisierung-Nachricht:', error);\n        }\n      });\n    } else {\n      console.log(`Bereits für Kategorien von Benutzer ${userId} abonniert`);\n    }\n  }\n\n  // Methode zum Trennen der WebSocket-Verbindung\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Von WebSocket getrennt');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket-Client ist nicht vorhanden. Keine Verbindung zum Trennen.');\n    }\n  }\n\n  // Methode zum Senden von Nachrichten über WebSocket\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      try {\n        this.stompClient.send(destination, {}, JSON.stringify(message));\n        console.log('WebSocket-Nachricht gesendet:', {\n          destination,\n          message\n        });\n      } catch (error) {\n        console.error('Fehler beim Senden der WebSocket-Nachricht:', error);\n      }\n    } else {\n      console.error('Nachricht konnte nicht gesendet werden. WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n}\n\n// Instanziierung der WebSocketService-Klasse\nconst webSocketService = new WebSocketService();\n\n// Exportierte Funktionen zur Verwendung außerhalb der Klasse\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  console.log('WebSocket wird verbunden...');\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\nexport const disconnectWebSocket = () => {\n  console.log('Trenne WebSocket-Verbindung...');\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sende WebSocket-Nachricht...');\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","subscriptions","connect","onTaskMessageReceived","onCategoryMessageReceived","userId","console","log","socket","over","frame","subscribeToTopics","error","setTimeout","subscribe","message","body","taskMessage","JSON","parse","categoryMessage","disconnect","warn","sendMessage","destination","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\n// WebSocket URL - Ersetze dies durch die tatsächliche URL deines WebSocket-Servers\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\n// WebSocketService-Klasse\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 Sekunden\n    this.subscriptions = {}; // Abonnements speichern, um doppelte Listener zu vermeiden\n  }\n\n  // Methode zum Verbinden mit dem WebSocket-Server\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    if (this.stompClient) {\n      console.log('Bereits mit WebSocket verbunden');\n      return; // Verhindert eine erneute Verbindung, wenn bereits verbunden\n    }\n\n    console.log('Versuche, WebSocket zu verbinden...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Mit WebSocket verbunden:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, (error) => {\n      console.error('Fehler beim Verbinden mit WebSocket:', error);\n      this.connected = false;\n      console.log(`Wiederverbindungsversuch in ${this.reconnectDelay / 1000} Sekunden...`);\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  // Methode zum Abonnieren von Themen\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    // Abonnieren von Aufgabenaktualisierungen, falls noch nicht abonniert\n    if (!this.subscriptions[`tasks-${userId}`]) {\n      console.log(`Abonnieren von Aufgaben für Benutzer ${userId}`);\n      this.subscriptions[`tasks-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n        console.log('Aufgaben-Nachricht erhalten:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Geparste Aufgaben-Nachricht:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Fehler beim Parsen der Aufgaben-Nachricht:', error);\n        }\n      });\n    } else {\n      console.log(`Bereits für Aufgaben von Benutzer ${userId} abonniert`);\n    }\n\n    // Abonnieren von Kategorisierung-Updates, falls noch nicht abonniert\n    if (!this.subscriptions[`categories-${userId}`]) {\n      console.log(`Abonnieren von Kategorien für Benutzer ${userId}`);\n      this.subscriptions[`categories-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n        console.log('Kategorisierung-Nachricht erhalten:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Geparste Kategorisierung-Nachricht:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Fehler beim Parsen der Kategorisierung-Nachricht:', error);\n        }\n      });\n    } else {\n      console.log(`Bereits für Kategorien von Benutzer ${userId} abonniert`);\n    }\n  }\n\n  // Methode zum Trennen der WebSocket-Verbindung\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Von WebSocket getrennt');\n        this.connected = false;\n      });\n    } else {\n      console.warn('WebSocket-Client ist nicht vorhanden. Keine Verbindung zum Trennen.');\n    }\n  }\n\n  // Methode zum Senden von Nachrichten über WebSocket\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      try {\n        this.stompClient.send(destination, {}, JSON.stringify(message));\n        console.log('WebSocket-Nachricht gesendet:', { destination, message });\n      } catch (error) {\n        console.error('Fehler beim Senden der WebSocket-Nachricht:', error);\n      }\n    } else {\n      console.error('Nachricht konnte nicht gesendet werden. WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n}\n\n// Instanziierung der WebSocketService-Klasse\nconst webSocketService = new WebSocketService();\n\n// Exportierte Funktionen zur Verwendung außerhalb der Klasse\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  console.log('WebSocket wird verbunden...');\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\n\nexport const disconnectWebSocket = () => {\n  console.log('Trenne WebSocket-Verbindung...');\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sende WebSocket-Nachricht...');\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}