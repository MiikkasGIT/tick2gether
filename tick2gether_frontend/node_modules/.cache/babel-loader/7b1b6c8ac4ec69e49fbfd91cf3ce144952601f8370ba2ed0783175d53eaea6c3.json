{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/WebSocketTestComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage } from '../websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketTestComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const userId = 1; // example user ID\n  const taskId = 1; // example task ID\n\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n      setMessages(prevMessages => [...prevMessages, message]);\n    };\n    connectWebSocket(userId, handleWebSocketMessage);\n    return () => {\n      disconnectWebSocket();\n    };\n  }, [userId]);\n  const handleSendMessage = () => {\n    const taskSaveDTO = {\n      text: 'Updated Task',\n      deadline: new Date(),\n      planDate: new Date(),\n      userId: userId,\n      categoryId: 1,\n      completed: false\n    };\n    sendUpdateTaskMessage(taskId, taskSaveDTO);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"WebSocket Test Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Send Update Task Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: JSON.stringify(message)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketTestComponent, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = WebSocketTestComponent;\nexport default WebSocketTestComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketTestComponent\");","map":{"version":3,"names":["React","useState","useEffect","connectWebSocket","disconnectWebSocket","sendUpdateTaskMessage","jsxDEV","_jsxDEV","WebSocketTestComponent","_s","messages","setMessages","userId","taskId","handleWebSocketMessage","message","console","log","prevMessages","handleSendMessage","taskSaveDTO","text","deadline","Date","planDate","categoryId","completed","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/WebSocketTestComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage } from '../websocket';\n\nconst WebSocketTestComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const userId = 1; // example user ID\n  const taskId = 1; // example task ID\n\n  useEffect(() => {\n    const handleWebSocketMessage = (message) => {\n      console.log('Received WebSocket message:', message);\n      setMessages((prevMessages) => [...prevMessages, message]);\n    };\n\n    connectWebSocket(userId, handleWebSocketMessage);\n\n    return () => {\n      disconnectWebSocket();\n    };\n  }, [userId]);\n\n  const handleSendMessage = () => {\n    const taskSaveDTO = {\n      text: 'Updated Task',\n      deadline: new Date(),\n      planDate: new Date(),\n      userId: userId,\n      categoryId: 1,\n      completed: false\n    };\n    sendUpdateTaskMessage(taskId, taskSaveDTO);\n  };\n\n  return (\n    <div>\n      <h2>WebSocket Test Component</h2>\n      <button onClick={handleSendMessage}>Send Update Task Message</button>\n      <ul>\n        {messages.map((message, index) => (\n          <li key={index}>{JSON.stringify(message)}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default WebSocketTestComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,qBAAqB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5F,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMW,MAAM,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMC,MAAM,GAAG,CAAC,CAAC,CAAC;;EAElBX,SAAS,CAAC,MAAM;IACd,MAAMY,sBAAsB,GAAIC,OAAO,IAAK;MAC1CC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,OAAO,CAAC;MACnDJ,WAAW,CAAEO,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,OAAO,CAAC,CAAC;IAC3D,CAAC;IAEDZ,gBAAgB,CAACS,MAAM,EAAEE,sBAAsB,CAAC;IAEhD,OAAO,MAAM;MACXV,mBAAmB,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACQ,MAAM,CAAC,CAAC;EAEZ,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,WAAW,GAAG;MAClBC,IAAI,EAAE,cAAc;MACpBC,QAAQ,EAAE,IAAIC,IAAI,CAAC,CAAC;MACpBC,QAAQ,EAAE,IAAID,IAAI,CAAC,CAAC;MACpBX,MAAM,EAAEA,MAAM;MACda,UAAU,EAAE,CAAC;MACbC,SAAS,EAAE;IACb,CAAC;IACDrB,qBAAqB,CAACQ,MAAM,EAAEO,WAAW,CAAC;EAC5C,CAAC;EAED,oBACEb,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCxB,OAAA;MAAQyB,OAAO,EAAEb,iBAAkB;MAAAQ,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrExB,OAAA;MAAAoB,QAAA,EACGjB,QAAQ,CAACuB,GAAG,CAAC,CAAClB,OAAO,EAAEmB,KAAK,kBAC3B3B,OAAA;QAAAoB,QAAA,EAAiBQ,IAAI,CAACC,SAAS,CAACrB,OAAO;MAAC,GAA/BmB,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA+B,CAC9C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACtB,EAAA,CAzCID,sBAAsB;AAAA6B,EAAA,GAAtB7B,sBAAsB;AA2C5B,eAAeA,sBAAsB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}