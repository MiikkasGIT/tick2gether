{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n\n      // Subscription example\n      this.stompClient.subscribe('/topic/tasks', message => {\n        if (message.body) {\n          onMessageReceived(JSON.parse(message.body));\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => this.connect(onMessageReceived), 5000);\n    });\n  }\n  sendUpdateTaskMessage(taskId, taskDTO) {\n    if (this.stompClient && this.stompClient.connected) {\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      this.stompClient.send(`/app/updateTask/${taskId}`, headers, JSON.stringify(taskDTO));\n    } else {\n      console.error('WebSocket connection is not established');\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => {\n  webSocketService.connect(onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendUpdateTaskMessage = (taskId, taskDTO) => {\n  webSocketService.sendUpdateTaskMessage(taskId, taskDTO);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","socket","over","frame","console","log","subscribe","message","body","JSON","parse","error","setTimeout","sendUpdateTaskMessage","taskId","taskDTO","connected","token","localStorage","getItem","headers","Authorization","send","stringify","disconnect","webSocketService","connectWebSocket","disconnectWebSocket"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    connect(onMessageReceived) {\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n\n        this.stompClient.connect({}, (frame) => {\n            console.log('Connected to WebSocket:', frame);\n\n            // Subscription example\n            this.stompClient.subscribe('/topic/tasks', (message) => {\n                if (message.body) {\n                    onMessageReceived(JSON.parse(message.body));\n                }\n            });\n        }, (error) => {\n            console.error('Error connecting to WebSocket:', error);\n            setTimeout(() => this.connect(onMessageReceived), 5000);\n        });\n    }\n\n    sendUpdateTaskMessage(taskId, taskDTO) {\n        if (this.stompClient && this.stompClient.connected) {\n            const token = localStorage.getItem('jwtToken');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n            this.stompClient.send(`/app/updateTask/${taskId}`, headers, JSON.stringify(taskDTO));\n        } else {\n            console.error('WebSocket connection is not established');\n        }\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n            });\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => {\n    webSocketService.connect(onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n    webSocketService.disconnect();\n};\n\nexport const sendUpdateTaskMessage = (taskId, taskDTO) => {\n    webSocketService.sendUpdateTaskMessage(taskId, taskDTO);\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,UAAU,GAAG,0BAA0B;AAE7C,MAAMC,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,WAAW,GAAG,IAAI;EAC3B;EAEAC,OAAOA,CAACC,iBAAiB,EAAE;IACvB,MAAMC,MAAM,GAAG,IAAIP,MAAM,CAACC,UAAU,CAAC;IACrC,IAAI,CAACG,WAAW,GAAGL,KAAK,CAACS,IAAI,CAACD,MAAM,CAAC;IAErC,IAAI,CAACH,WAAW,CAACC,OAAO,CAAC,CAAC,CAAC,EAAGI,KAAK,IAAK;MACpCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAAC;;MAE7C;MACA,IAAI,CAACL,WAAW,CAACQ,SAAS,CAAC,cAAc,EAAGC,OAAO,IAAK;QACpD,IAAIA,OAAO,CAACC,IAAI,EAAE;UACdR,iBAAiB,CAACS,IAAI,CAACC,KAAK,CAACH,OAAO,CAACC,IAAI,CAAC,CAAC;QAC/C;MACJ,CAAC,CAAC;IACN,CAAC,EAAGG,KAAK,IAAK;MACVP,OAAO,CAACO,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDC,UAAU,CAAC,MAAM,IAAI,CAACb,OAAO,CAACC,iBAAiB,CAAC,EAAE,IAAI,CAAC;IAC3D,CAAC,CAAC;EACN;EAEAa,qBAAqBA,CAACC,MAAM,EAAEC,OAAO,EAAE;IACnC,IAAI,IAAI,CAACjB,WAAW,IAAI,IAAI,CAACA,WAAW,CAACkB,SAAS,EAAE;MAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,MAAMC,OAAO,GAAGH,KAAK,GAAG;QAAEI,aAAa,EAAE,UAAUJ,KAAK;MAAG,CAAC,GAAG,CAAC,CAAC;MACjE,IAAI,CAACnB,WAAW,CAACwB,IAAI,CAAC,mBAAmBR,MAAM,EAAE,EAAEM,OAAO,EAAEX,IAAI,CAACc,SAAS,CAACR,OAAO,CAAC,CAAC;IACxF,CAAC,MAAM;MACHX,OAAO,CAACO,KAAK,CAAC,yCAAyC,CAAC;IAC5D;EACJ;EAEAa,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC1B,WAAW,EAAE;MAClB,IAAI,CAACA,WAAW,CAAC0B,UAAU,CAAC,MAAM;QAC9BpB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC9C,CAAC,CAAC;IACN;EACJ;AACJ;AAEA,MAAMoB,gBAAgB,GAAG,IAAI7B,gBAAgB,CAAC,CAAC;AAE/C,OAAO,MAAM8B,gBAAgB,GAAI1B,iBAAiB,IAAK;EACnDyB,gBAAgB,CAAC1B,OAAO,CAACC,iBAAiB,CAAC;AAC/C,CAAC;AAED,OAAO,MAAM2B,mBAAmB,GAAGA,CAAA,KAAM;EACrCF,gBAAgB,CAACD,UAAU,CAAC,CAAC;AACjC,CAAC;AAED,OAAO,MAAMX,qBAAqB,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;EACtDU,gBAAgB,CAACZ,qBAAqB,CAACC,MAAM,EAAEC,OAAO,CAAC;AAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}