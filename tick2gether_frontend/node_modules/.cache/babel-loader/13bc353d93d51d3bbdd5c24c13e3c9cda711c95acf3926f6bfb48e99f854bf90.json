{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isSameDay, isAfter, isBefore } from 'date-fns';\nimport { deleteTask, updateTask } from '../api'; // Importiere die API-Funktion\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ToDoList({\n  todos = [],\n  setTodos,\n  isDeleteMode,\n  onEditTodo,\n  onDateChange,\n  selectedCategory\n}) {\n  _s();\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n  useEffect(() => {\n    console.log('Todos updated:', todos);\n  }, [todos]);\n  const handleCheckboxChange = id => {\n    console.log('Checkbox changed for ID:', id);\n    const updatedTodos = todos.map(todo => todo.taskId === id ? {\n      ...todo,\n      completed: !todo.completed\n    } : todo);\n    setTodos(updatedTodos);\n  };\n  const handleDeleteClick = async id => {\n    console.log('Deleting task with ID:', id);\n    try {\n      await deleteTask(id); // Aufruf der API-Funktion zum Löschen des Todos\n      const updatedTodos = todos.filter(todo => todo.taskId !== id);\n      setTodos(updatedTodos);\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n      // Handle error (e.g., show error message to user)\n    }\n  };\n  const handleTodoClick = id => {\n    console.log('Todo clicked with ID:', id);\n    setSelectedTodoId(id); // Set selected todo id\n  };\n  const handleEditClick = todo => {\n    onEditTodo(todo);\n  };\n  const handleDateChange = async (id, date, purpose) => {\n    const formattedDate = date.toISOString().split('T')[0]; // Format the date as \"yyyy-MM-dd\"\n    console.log(`Updating ${purpose} date to:`, formattedDate);\n    try {\n      const updatedTodos = todos.map(todo => todo.taskId === id ? {\n        ...todo,\n        [`${purpose}Date`]: formattedDate\n      } : todo);\n      setTodos(updatedTodos);\n\n      // Hier den API-Aufruf zum Backend hinzufügen\n      const updatedTask = updatedTodos.find(todo => todo.taskId === id);\n      await updateTask(updatedTask); // API-Aufruf zum Aktualisieren des Tasks\n    } catch (error) {\n      console.error('Error updating date:', error);\n    }\n  };\n  const today = startOfToday();\n  const filteredTodos = todos.filter(todo => {\n    if (selectedCategory.name === 'Planned') {\n      return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n    }\n    if (selectedCategory.name === 'Today' || selectedCategory.name === 'Personal' || selectedCategory.name === 'Work' || selectedCategory.name === 'Any Time') {\n      return todo.category === selectedCategory.name && (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today));\n    }\n    if (selectedCategory.name === 'All Tasks') {\n      return (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today)) && todo.category !== 'Planned';\n    }\n    if (selectedCategory.name === 'Logbook') {\n      return todo.category === 'Logbook';\n    }\n    return todo.category === selectedCategory.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      className: \"sr-only\",\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-1\",\n      children: filteredTodos.map(todo => /*#__PURE__*/_jsxDEV(ToDo, {\n        // Verwenden Sie taskId als Schlüssel\n        todo: todo,\n        handleCheckboxChange: () => handleCheckboxChange(todo.taskId),\n        handleTodoClick: () => handleTodoClick(todo.taskId),\n        handleDelete: () => handleDeleteClick(todo.taskId),\n        handleEditClick: () => handleEditClick(todo),\n        isDeleteMode: isDeleteMode,\n        onDateChange: handleDateChange,\n        isSelected: todo.taskId === selectedTodoId // Pass the selected state\n        ,\n        isTodayCategory: selectedCategory.name === 'Today'\n      }, todo.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoList, \"y7hXGgDEL6mLLQHq94VAZqd74Dw=\");\n_c = ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","useEffect","ToDo","startOfToday","isSameDay","isAfter","isBefore","deleteTask","updateTask","jsxDEV","_jsxDEV","ToDoList","todos","setTodos","isDeleteMode","onEditTodo","onDateChange","selectedCategory","_s","selectedTodoId","setSelectedTodoId","console","log","handleCheckboxChange","id","updatedTodos","map","todo","taskId","completed","handleDeleteClick","filter","error","response","data","message","handleTodoClick","handleEditClick","handleDateChange","date","purpose","formattedDate","toISOString","split","updatedTask","find","today","filteredTodos","name","planDate","Date","category","children","className","fileName","_jsxFileName","lineNumber","columnNumber","handleDelete","isSelected","isTodayCategory","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isSameDay, isAfter, isBefore } from 'date-fns';\nimport { deleteTask, updateTask } from '../api'; // Importiere die API-Funktion\n\nexport default function ToDoList({ todos = [], setTodos, isDeleteMode, onEditTodo, onDateChange, selectedCategory }) {\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n\n  useEffect(() => {\n    console.log('Todos updated:', todos);\n  }, [todos]);\n\n  const handleCheckboxChange = (id) => {\n    console.log('Checkbox changed for ID:', id);\n    const updatedTodos = todos.map(todo =>\n      todo.taskId === id ? { ...todo, completed: !todo.completed } : todo\n    );\n    setTodos(updatedTodos);\n  };\n\n  const handleDeleteClick = async (id) => {\n    console.log('Deleting task with ID:', id);\n    try {\n      await deleteTask(id); // Aufruf der API-Funktion zum Löschen des Todos\n      const updatedTodos = todos.filter(todo => todo.taskId !== id);\n      setTodos(updatedTodos);\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n      // Handle error (e.g., show error message to user)\n    }\n  };\n\n  const handleTodoClick = (id) => {\n    console.log('Todo clicked with ID:', id);\n    setSelectedTodoId(id); // Set selected todo id\n  };\n\n  const handleEditClick = (todo) => {\n    onEditTodo(todo);\n  };\n\n  const handleDateChange = async (id, date, purpose) => {\n    const formattedDate = date.toISOString().split('T')[0]; // Format the date as \"yyyy-MM-dd\"\n    console.log(`Updating ${purpose} date to:`, formattedDate);\n    try {\n      const updatedTodos = todos.map(todo =>\n        todo.taskId === id ? { ...todo, [`${purpose}Date`]: formattedDate } : todo\n      );\n      setTodos(updatedTodos);\n\n      // Hier den API-Aufruf zum Backend hinzufügen\n      const updatedTask = updatedTodos.find(todo => todo.taskId === id);\n      await updateTask(updatedTask); // API-Aufruf zum Aktualisieren des Tasks\n    } catch (error) {\n      console.error('Error updating date:', error);\n    }\n  };\n\n  const today = startOfToday();\n\n  const filteredTodos = todos.filter(todo => {\n    if (selectedCategory.name === 'Planned') {\n      return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n    }\n    if (selectedCategory.name === 'Today' || selectedCategory.name === 'Personal' || selectedCategory.name === 'Work' || selectedCategory.name === 'Any Time') {\n      return (todo.category === selectedCategory.name && (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today)));\n    }\n    if (selectedCategory.name === 'All Tasks') {\n      return (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today)) && todo.category !== 'Planned';\n    }\n    if (selectedCategory.name === 'Logbook') {\n      return todo.category === 'Logbook';\n    }\n    return todo.category === selectedCategory.name;\n  });\n\n  return (\n    <fieldset>\n      <legend className=\"sr-only\">Tasks</legend>\n      <div className=\"space-y-1\">\n        {filteredTodos.map(todo => (\n          <ToDo\n            key={todo.taskId} // Verwenden Sie taskId als Schlüssel\n            todo={todo}\n            handleCheckboxChange={() => handleCheckboxChange(todo.taskId)}\n            handleTodoClick={() => handleTodoClick(todo.taskId)}\n            handleDelete={() => handleDeleteClick(todo.taskId)}\n            handleEditClick={() => handleEditClick(todo)}\n            isDeleteMode={isDeleteMode}\n            onDateChange={handleDateChange}\n            isSelected={todo.taskId === selectedTodoId} // Pass the selected state\n            isTodayCategory={selectedCategory.name === 'Today'}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}