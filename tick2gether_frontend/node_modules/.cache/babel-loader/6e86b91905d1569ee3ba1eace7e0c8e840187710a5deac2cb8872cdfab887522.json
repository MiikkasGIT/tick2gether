{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Initialize standard categories\n  const standardCategories = [1, 2, 3, 4, 5, 6, 7];\n  standardCategories.forEach(id => {\n    if (!categorizedTasks[id]) {\n      categorizedTasks[id] = [];\n    }\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const {\n      categoryId,\n      completed,\n      planDate\n    } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (true) {\n      case categoryId !== 7:\n        categorizedTasks[1].push(task); // All Tasks (excluding Logbook)\n        break;\n      case completed:\n        categorizedTasks[7].push(task); // Logbook\n        break;\n      case categoryId === 2:\n        categorizedTasks[2].push(task); // Today\n        break;\n      case !!planDate:\n        categorizedTasks[3].push(task); // Planned\n        break;\n      case categoryId === 4:\n        categorizedTasks[4].push(task); // Any Time\n        break;\n      case categoryId === 5:\n        categorizedTasks[5].push(task); // Work\n        break;\n      case categoryId === 6:\n        categorizedTasks[6].push(task); // Personal\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","standardCategories","id","task","completed","planDate","console","log","taskId","push"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Initialize standard categories\n  const standardCategories = [1, 2, 3, 4, 5, 6, 7];\n  standardCategories.forEach(id => {\n    if (!categorizedTasks[id]) {\n      categorizedTasks[id] = [];\n    }\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const { categoryId, completed, planDate } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (true) {\n      case categoryId !== 7:\n        categorizedTasks[1].push(task); // All Tasks (excluding Logbook)\n        break;\n      case completed:\n        categorizedTasks[7].push(task); // Logbook\n        break;\n      case categoryId === 2:\n        categorizedTasks[2].push(task); // Today\n        break;\n      case !!planDate:\n        categorizedTasks[3].push(task); // Planned\n        break;\n      case categoryId === 4:\n        categorizedTasks[4].push(task); // Any Time\n        break;\n      case categoryId === 5:\n        categorizedTasks[5].push(task); // Work\n        break;\n      case categoryId === 6:\n        categorizedTasks[6].push(task); // Personal\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;;EAEF;EACA,MAAMC,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChDA,kBAAkB,CAACH,OAAO,CAACI,EAAE,IAAI;IAC/B,IAAI,CAACL,gBAAgB,CAACK,EAAE,CAAC,EAAE;MACzBL,gBAAgB,CAACK,EAAE,CAAC,GAAG,EAAE;IAC3B;EACF,CAAC,CAAC;;EAEF;EACAP,KAAK,CAACG,OAAO,CAACK,IAAI,IAAI;IACpB,MAAM;MAAEH,UAAU;MAAEI,SAAS;MAAEC;IAAS,CAAC,GAAGF,IAAI;;IAEhD;IACAG,OAAO,CAACC,GAAG,CAAC,4BAA4BJ,IAAI,CAACK,MAAM,iBAAiBR,UAAU,EAAE,CAAC;;IAEjF;IACA,IAAI,CAACH,gBAAgB,CAACG,UAAU,CAAC,EAAE;MACjCH,gBAAgB,CAACG,UAAU,CAAC,GAAG,EAAE;IACnC;IACAH,gBAAgB,CAACG,UAAU,CAAC,CAACS,IAAI,CAACN,IAAI,CAAC;;IAEvC;IACA,QAAQ,IAAI;MACV,KAAKH,UAAU,KAAK,CAAC;QACnBH,gBAAgB,CAAC,CAAC,CAAC,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKC,SAAS;QACZP,gBAAgB,CAAC,CAAC,CAAC,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKH,UAAU,KAAK,CAAC;QACnBH,gBAAgB,CAAC,CAAC,CAAC,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAK,CAAC,CAACE,QAAQ;QACbR,gBAAgB,CAAC,CAAC,CAAC,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKH,UAAU,KAAK,CAAC;QACnBH,gBAAgB,CAAC,CAAC,CAAC,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKH,UAAU,KAAK,CAAC;QACnBH,gBAAgB,CAAC,CAAC,CAAC,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKH,UAAU,KAAK,CAAC;QACnBH,gBAAgB,CAAC,CAAC,CAAC,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;QAChC;MACF;QACE;IACJ;EACF,CAAC,CAAC;;EAEF;EACAG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEV,gBAAgB,CAAC;EAEnD,OAAOA,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}