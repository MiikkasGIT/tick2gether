{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.connected = true;\n      this.stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n        console.log('Task message received:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Parsed task message:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Error parsing task message:', error);\n        }\n      });\n      this.stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n        console.log('Category message received:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Parsed category message:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Error parsing category message:', error);\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}","map":{"version":3,"names":["WebSocketService","constructor","stompClient","connected","reconnectDelay","connect","onTaskMessageReceived","onCategoryMessageReceived","userId","socket","SockJS","SOCKET_URL","Stomp","over","console","log","subscribe","message","body","taskMessage","JSON","parse","error","categoryMessage","setTimeout","disconnect","sendMessage","destination","send","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.connected = true;\n      this.stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n        console.log('Task message received:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Parsed task message:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Error parsing task message:', error);\n        }\n      });\n      this.stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n        console.log('Category message received:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Parsed category message:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Error parsing category message:', error);\n        }\n      });\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\n"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,cAAc,GAAG,IAAI,CAAC,CAAC;EAC9B;EAEAC,OAAOA,CAACC,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,EAAE;IAChE,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAU,CAAC;IACrC,IAAI,CAACT,WAAW,GAAGU,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC;IAErC,IAAI,CAACP,WAAW,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MACjCS,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAACZ,SAAS,GAAG,IAAI;MACrB,IAAI,CAACD,WAAW,CAACc,SAAS,CAAC,SAASR,MAAM,cAAc,EAAGS,OAAO,IAAK;QACrEH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,OAAO,CAACC,IAAI,CAAC;QACnD,IAAI;UACF,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,IAAI,CAAC;UAC5CJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEI,WAAW,CAAC;UAChDb,qBAAqB,CAACa,WAAW,CAAC;QACpC,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;MACF,CAAC,CAAC;MACF,IAAI,CAACpB,WAAW,CAACc,SAAS,CAAC,SAASR,MAAM,mBAAmB,EAAGS,OAAO,IAAK;QAC1EH,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEE,OAAO,CAACC,IAAI,CAAC;QACvD,IAAI;UACF,MAAMK,eAAe,GAAGH,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,IAAI,CAAC;UAChDJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEQ,eAAe,CAAC;UACxDhB,yBAAyB,CAACgB,eAAe,CAAC;QAC5C,CAAC,CAAC,OAAOD,KAAK,EAAE;UACdR,OAAO,CAACQ,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACzD;MACF,CAAC,CAAC;IACJ,CAAC,EAAGA,KAAK,IAAK;MACZR,OAAO,CAACQ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,IAAI,CAACnB,SAAS,GAAG,KAAK;MACtBqB,UAAU,CAAC,MAAM,IAAI,CAACnB,OAAO,CAACC,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,CAAC,EAAE,IAAI,CAACJ,cAAc,CAAC;IAC/G,CAAC,CAAC;EACJ;EAEAqB,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACvB,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACuB,UAAU,CAAC,MAAM;QAChCX,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C,IAAI,CAACZ,SAAS,GAAG,KAAK;MACxB,CAAC,CAAC;IACJ;EACF;EAEAuB,WAAWA,CAACC,WAAW,EAAEV,OAAO,EAAE;IAChC,IAAI,IAAI,CAACf,WAAW,IAAI,IAAI,CAACC,SAAS,EAAE;MACtCW,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,OAAO,CAAC;MACxC,IAAI,CAACf,WAAW,CAAC0B,IAAI,CAACD,WAAW,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACS,SAAS,CAACZ,OAAO,CAAC,CAAC;IACjE,CAAC,MAAM;MACLH,OAAO,CAACQ,KAAK,CAAC,8CAA8C,CAAC;IAC/D;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}