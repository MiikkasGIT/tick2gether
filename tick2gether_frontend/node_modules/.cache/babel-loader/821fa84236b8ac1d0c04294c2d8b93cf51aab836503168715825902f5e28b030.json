{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nlet stompClient = null;\nexport function connectWebSocket(userId, messageHandler) {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    debug: str => {\n      console.log(str);\n    },\n    onConnect: frame => {\n      console.log('Connected: ' + frame);\n      stompClient.subscribe('/topic/tasks', message => {\n        const parsedMessage = JSON.parse(message.body);\n        messageHandler(parsedMessage);\n      });\n    }\n  });\n  stompClient.activate();\n}\nexport function sendWebSocketMessage(destination, message) {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message)\n    });\n  } else {\n    console.error('WebSocket connection is not established.');\n  }\n}\nexport function disconnectWebSocket() {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n  }\n  console.log('Disconnected');\n}","map":{"version":3,"names":["SockJS","Client","stompClient","connectWebSocket","userId","messageHandler","socket","webSocketFactory","debug","str","console","log","onConnect","frame","subscribe","message","parsedMessage","JSON","parse","body","activate","sendWebSocketMessage","destination","connected","publish","stringify","error","disconnectWebSocket","deactivate"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\n\nlet stompClient = null;\n\nexport function connectWebSocket(userId, messageHandler) {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    debug: (str) => {\n      console.log(str);\n    },\n    onConnect: (frame) => {\n      console.log('Connected: ' + frame);\n      stompClient.subscribe('/topic/tasks', (message) => {\n        const parsedMessage = JSON.parse(message.body);\n        messageHandler(parsedMessage);\n      });\n    },\n  });\n\n  stompClient.activate();\n}\n\nexport function sendWebSocketMessage(destination, message) {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message),\n    });\n  } else {\n    console.error('WebSocket connection is not established.');\n  }\n}\n\nexport function disconnectWebSocket() {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n  }\n  console.log('Disconnected');\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,cAAc,EAAE;EACvD,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC,0BAA0B,CAAC;EACrDE,WAAW,GAAG,IAAID,MAAM,CAAC;IACvBM,gBAAgB,EAAEA,CAAA,KAAMD,MAAM;IAC9BE,KAAK,EAAGC,GAAG,IAAK;MACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC;IACDG,SAAS,EAAGC,KAAK,IAAK;MACpBH,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGE,KAAK,CAAC;MAClCX,WAAW,CAACY,SAAS,CAAC,cAAc,EAAGC,OAAO,IAAK;QACjD,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QAC9Cd,cAAc,CAACW,aAAa,CAAC;MAC/B,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEFd,WAAW,CAACkB,QAAQ,CAAC,CAAC;AACxB;AAEA,OAAO,SAASC,oBAAoBA,CAACC,WAAW,EAAEP,OAAO,EAAE;EACzD,IAAIb,WAAW,IAAIA,WAAW,CAACqB,SAAS,EAAE;IACxCrB,WAAW,CAACsB,OAAO,CAAC;MAClBF,WAAW,EAAEA,WAAW;MACxBH,IAAI,EAAEF,IAAI,CAACQ,SAAS,CAACV,OAAO;IAC9B,CAAC,CAAC;EACJ,CAAC,MAAM;IACLL,OAAO,CAACgB,KAAK,CAAC,0CAA0C,CAAC;EAC3D;AACF;AAEA,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpC,IAAIzB,WAAW,KAAK,IAAI,EAAE;IACxBA,WAAW,CAAC0B,UAAU,CAAC,CAAC;EAC1B;EACAlB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}