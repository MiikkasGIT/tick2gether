{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Erstellen Sie ein Set von Kategorie-IDs für einen schnellen Zugriff\n  const standardCategoryIds = new Set(STANDARD_CATEGORIES.map(category => category.id));\n\n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.id] = [];\n  });\n  tasks.forEach(task => {\n    const categoryId = task.categoryId;\n\n    // Prüfen, ob die Aufgabe eine bekannte Kategorie-ID hat oder benutzerdefiniert ist\n    if (standardCategoryIds.has(categoryId) || categorizedTasks[categoryId]) {\n      switch (categoryId) {\n        case 1:\n          // All Tasks\n          categorizedTasks[1] = tasks;\n          break;\n        case 2:\n          // Today\n          categorizedTasks[2] = tasks.filter(task => new Date(task.dueDate).toDateString() === new Date().toDateString());\n          break;\n        case 3:\n          // Planned\n          categorizedTasks[3] = tasks.filter(task => task.planDate);\n          break;\n        case 4:\n          // Any Time\n          categorizedTasks[4] = tasks.filter(task => task.dueDate === undefined);\n          break;\n        case 5:\n          // Work\n          categorizedTasks[5] = tasks.filter(task => task.categoryId === 5);\n          break;\n        case 6:\n          // Personal\n          categorizedTasks[6] = tasks.filter(task => task.categoryId === 6);\n          break;\n        case 7:\n          // Logbook\n          categorizedTasks[7] = tasks.filter(task => task.completed);\n          break;\n        default:\n          // Benutzerdefinierte Kategorien\n          categorizedTasks[categoryId] = categorizedTasks[categoryId] || [];\n          categorizedTasks[categoryId].push(task);\n          break;\n      }\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","standardCategoryIds","Set","STANDARD_CATEGORIES","map","category","id","forEach","task","categoryId","has","filter","Date","dueDate","toDateString","planDate","undefined","completed","push"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Erstellen Sie ein Set von Kategorie-IDs für einen schnellen Zugriff\n  const standardCategoryIds = new Set(STANDARD_CATEGORIES.map(category => category.id));\n  \n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.id] = [];\n  });\n\n  tasks.forEach(task => {\n    const categoryId = task.categoryId;\n\n    // Prüfen, ob die Aufgabe eine bekannte Kategorie-ID hat oder benutzerdefiniert ist\n    if (standardCategoryIds.has(categoryId) || categorizedTasks[categoryId]) {\n      switch (categoryId) {\n        case 1:\n          // All Tasks\n          categorizedTasks[1] = tasks;\n          break;\n        case 2:\n          // Today\n          categorizedTasks[2] = tasks.filter(task => new Date(task.dueDate).toDateString() === new Date().toDateString());\n          break;\n        case 3:\n          // Planned\n          categorizedTasks[3] = tasks.filter(task => task.planDate);\n          break;\n        case 4:\n          // Any Time\n          categorizedTasks[4] = tasks.filter(task => task.dueDate === undefined);\n          break;\n        case 5:\n          // Work\n          categorizedTasks[5] = tasks.filter(task => task.categoryId === 5);\n          break;\n        case 6:\n          // Personal\n          categorizedTasks[6] = tasks.filter(task => task.categoryId === 6);\n          break;\n        case 7:\n          // Logbook\n          categorizedTasks[7] = tasks.filter(task => task.completed);\n          break;\n        default:\n          // Benutzerdefinierte Kategorien\n          categorizedTasks[categoryId] = categorizedTasks[categoryId] || [];\n          categorizedTasks[categoryId].push(task);\n          break;\n      }\n    }\n  });\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACA,MAAMC,mBAAmB,GAAG,IAAIC,GAAG,CAACC,mBAAmB,CAACC,GAAG,CAACC,QAAQ,IAAIA,QAAQ,CAACC,EAAE,CAAC,CAAC;;EAErF;EACAP,UAAU,CAACQ,OAAO,CAACF,QAAQ,IAAI;IAC7BL,gBAAgB,CAACK,QAAQ,CAACC,EAAE,CAAC,GAAG,EAAE;EACpC,CAAC,CAAC;EAEFR,KAAK,CAACS,OAAO,CAACC,IAAI,IAAI;IACpB,MAAMC,UAAU,GAAGD,IAAI,CAACC,UAAU;;IAElC;IACA,IAAIR,mBAAmB,CAACS,GAAG,CAACD,UAAU,CAAC,IAAIT,gBAAgB,CAACS,UAAU,CAAC,EAAE;MACvE,QAAQA,UAAU;QAChB,KAAK,CAAC;UACJ;UACAT,gBAAgB,CAAC,CAAC,CAAC,GAAGF,KAAK;UAC3B;QACF,KAAK,CAAC;UACJ;UACAE,gBAAgB,CAAC,CAAC,CAAC,GAAGF,KAAK,CAACa,MAAM,CAACH,IAAI,IAAI,IAAII,IAAI,CAACJ,IAAI,CAACK,OAAO,CAAC,CAACC,YAAY,CAAC,CAAC,KAAK,IAAIF,IAAI,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC;UAC/G;QACF,KAAK,CAAC;UACJ;UACAd,gBAAgB,CAAC,CAAC,CAAC,GAAGF,KAAK,CAACa,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACO,QAAQ,CAAC;UACzD;QACF,KAAK,CAAC;UACJ;UACAf,gBAAgB,CAAC,CAAC,CAAC,GAAGF,KAAK,CAACa,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACK,OAAO,KAAKG,SAAS,CAAC;UACtE;QACF,KAAK,CAAC;UACJ;UACAhB,gBAAgB,CAAC,CAAC,CAAC,GAAGF,KAAK,CAACa,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACC,UAAU,KAAK,CAAC,CAAC;UACjE;QACF,KAAK,CAAC;UACJ;UACAT,gBAAgB,CAAC,CAAC,CAAC,GAAGF,KAAK,CAACa,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACC,UAAU,KAAK,CAAC,CAAC;UACjE;QACF,KAAK,CAAC;UACJ;UACAT,gBAAgB,CAAC,CAAC,CAAC,GAAGF,KAAK,CAACa,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACS,SAAS,CAAC;UAC1D;QACF;UACE;UACAjB,gBAAgB,CAACS,UAAU,CAAC,GAAGT,gBAAgB,CAACS,UAAU,CAAC,IAAI,EAAE;UACjET,gBAAgB,CAACS,UAAU,CAAC,CAACS,IAAI,CAACV,IAAI,CAAC;UACvC;MACJ;IACF;EACF,CAAC,CAAC;EAEF,OAAOR,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}