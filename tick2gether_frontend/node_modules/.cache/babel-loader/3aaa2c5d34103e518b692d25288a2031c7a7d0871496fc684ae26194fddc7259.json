{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.subscriptions = {}; // Store subscriptions to avoid duplicate listeners\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    if (this.stompClient) {\n      console.log('Already connected to WebSocket');\n      return; // Avoid connecting if already connected\n    }\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    // Subscribe to task updates if not already subscribed\n    if (!this.subscriptions[`tasks-${userId}`]) {\n      this.subscriptions[`tasks-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n        console.log('Task message received:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Parsed task message:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Error parsing task message:', error);\n        }\n      });\n    } else {\n      console.log(`Already subscribed to tasks for user ${userId}`);\n    }\n\n    // Subscribe to category updates if not already subscribed\n    if (!this.subscriptions[`categories-${userId}`]) {\n      this.subscriptions[`categories-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n        console.log('Category message received:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Parsed category message:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Error parsing category message:', error);\n        }\n      });\n    } else {\n      console.log(`Already subscribed to categories for user ${userId}`);\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      console.log('Disconnecting from WebSocket...');\n      Object.values(this.subscriptions).forEach(subscription => subscription.unsubscribe());\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n        this.stompClient = null; // Reset stompClient\n        this.subscriptions = {}; // Clear subscriptions\n      });\n    } else {\n      console.log('WebSocket is not connected');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message to:', destination, 'Message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  const socket = new SockJS('/ws'); // Beispiel URL, anpassen je nach Konfiguration\n  const stompClient = Stomp.over(socket);\n  stompClient.connect({}, () => {\n    stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n      onTaskMessageReceived(JSON.parse(message.body));\n    });\n    stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n      onCategoryMessageReceived(JSON.parse(message.body));\n    });\n  });\n  return stompClient;\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","subscriptions","connect","onTaskMessageReceived","onCategoryMessageReceived","userId","console","log","socket","over","frame","subscribeToTopics","error","setTimeout","subscribe","message","body","taskMessage","JSON","parse","categoryMessage","disconnect","Object","values","forEach","subscription","unsubscribe","sendMessage","destination","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.subscriptions = {}; // Store subscriptions to avoid duplicate listeners\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    if (this.stompClient) {\n      console.log('Already connected to WebSocket');\n      return; // Avoid connecting if already connected\n    }\n\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    // Subscribe to task updates if not already subscribed\n    if (!this.subscriptions[`tasks-${userId}`]) {\n      this.subscriptions[`tasks-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n        console.log('Task message received:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Parsed task message:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Error parsing task message:', error);\n        }\n      });\n    } else {\n      console.log(`Already subscribed to tasks for user ${userId}`);\n    }\n\n    // Subscribe to category updates if not already subscribed\n    if (!this.subscriptions[`categories-${userId}`]) {\n      this.subscriptions[`categories-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n        console.log('Category message received:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Parsed category message:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Error parsing category message:', error);\n        }\n      });\n    } else {\n      console.log(`Already subscribed to categories for user ${userId}`);\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      console.log('Disconnecting from WebSocket...');\n      Object.values(this.subscriptions).forEach(subscription => subscription.unsubscribe());\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n        this.stompClient = null; // Reset stompClient\n        this.subscriptions = {}; // Clear subscriptions\n      });\n    } else {\n      console.log('WebSocket is not connected');\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message to:', destination, 'Message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  const socket = new SockJS('/ws'); // Beispiel URL, anpassen je nach Konfiguration\n  const stompClient = Stomp.over(socket);\n\n  stompClient.connect({}, () => {\n    stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n      onTaskMessageReceived(JSON.parse(message.body));\n    });\n    stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n      onCategoryMessageReceived(JSON.parse(message.body));\n    });\n  });\n\n  return stompClient;\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}