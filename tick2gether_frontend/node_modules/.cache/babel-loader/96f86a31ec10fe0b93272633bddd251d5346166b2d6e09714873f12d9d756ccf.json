{"ast":null,"code":"// websocket.js\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.stompClient.subscribe('/topic/greetings', message => {\n        if (message.body) {\n          onMessageReceived(message.body); // Hier message.body direkt setzen\n        }\n      });\n      this.stompClient.subscribe('/user/queue/tasks', message => {\n        if (message.body) {\n          onMessageReceived(message.body);\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.send(destination, {}, message);\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => {\n  webSocketService.connect(onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendUpdateTaskMessage = (taskId, taskDTO) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(`/app/updateTask/${taskId}`, {}, JSON.stringify(taskDTO));\n  } else {\n    console.error('WebSocket connection is not established');\n  }\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","socket","over","console","log","subscribe","message","body","error","setTimeout","disconnect","sendMessage","destination","connected","send","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage","sendUpdateTaskMessage","taskId","taskDTO","JSON","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["// websocket.js\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    connect(onMessageReceived) {\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n\n        this.stompClient.connect({}, () => {\n            console.log('Connected to WebSocket');\n\n            this.stompClient.subscribe('/topic/greetings', (message) => {\n                if (message.body) {\n                    onMessageReceived(message.body); // Hier message.body direkt setzen\n                }\n            });\n\n            this.stompClient.subscribe('/user/queue/tasks', (message) => {\n                if (message.body) {\n                    onMessageReceived(message.body);\n                }\n            });\n        }, (error) => {\n            console.error('Error connecting to WebSocket:', error);\n            setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n        });\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n            });\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            this.stompClient.send(destination, {}, message);\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => {\n    webSocketService.connect(onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n    webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n    webSocketService.sendMessage(destination, message);\n};\n\nexport const sendUpdateTaskMessage = (taskId, taskDTO) => {\n    if (stompClient && stompClient.connected) {\n        stompClient.send(`/app/updateTask/${taskId}`, {}, JSON.stringify(taskDTO));\n    } else {\n        console.error('WebSocket connection is not established');\n    }\n};\n"],"mappings":"AAAA;AACA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,UAAU,GAAG,0BAA0B;AAE7C,MAAMC,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,WAAW,GAAG,IAAI;EAC3B;EAEAC,OAAOA,CAACC,iBAAiB,EAAE;IACvB,MAAMC,MAAM,GAAG,IAAIP,MAAM,CAACC,UAAU,CAAC;IACrC,IAAI,CAACG,WAAW,GAAGL,KAAK,CAACS,IAAI,CAACD,MAAM,CAAC;IAErC,IAAI,CAACH,WAAW,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MAC/BI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MAErC,IAAI,CAACN,WAAW,CAACO,SAAS,CAAC,kBAAkB,EAAGC,OAAO,IAAK;QACxD,IAAIA,OAAO,CAACC,IAAI,EAAE;UACdP,iBAAiB,CAACM,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;QACrC;MACJ,CAAC,CAAC;MAEF,IAAI,CAACT,WAAW,CAACO,SAAS,CAAC,mBAAmB,EAAGC,OAAO,IAAK;QACzD,IAAIA,OAAO,CAACC,IAAI,EAAE;UACdP,iBAAiB,CAACM,OAAO,CAACC,IAAI,CAAC;QACnC;MACJ,CAAC,CAAC;IACN,CAAC,EAAGC,KAAK,IAAK;MACVL,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDC,UAAU,CAAC,MAAM,IAAI,CAACV,OAAO,CAACC,iBAAiB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC;EACN;EAEAU,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAACZ,WAAW,EAAE;MAClB,IAAI,CAACA,WAAW,CAACY,UAAU,CAAC,MAAM;QAC9BP,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC9C,CAAC,CAAC;IACN;EACJ;EAEAO,WAAWA,CAACC,WAAW,EAAEN,OAAO,EAAE;IAC9B,IAAI,IAAI,CAACR,WAAW,IAAI,IAAI,CAACA,WAAW,CAACe,SAAS,EAAE;MAChD,IAAI,CAACf,WAAW,CAACgB,IAAI,CAACF,WAAW,EAAE,CAAC,CAAC,EAAEN,OAAO,CAAC;IACnD;EACJ;AACJ;AAEA,MAAMS,gBAAgB,GAAG,IAAInB,gBAAgB,CAAC,CAAC;AAE/C,OAAO,MAAMoB,gBAAgB,GAAIhB,iBAAiB,IAAK;EACnDe,gBAAgB,CAAChB,OAAO,CAACC,iBAAiB,CAAC;AAC/C,CAAC;AAED,OAAO,MAAMiB,mBAAmB,GAAGA,CAAA,KAAM;EACrCF,gBAAgB,CAACL,UAAU,CAAC,CAAC;AACjC,CAAC;AAED,OAAO,MAAMQ,oBAAoB,GAAGA,CAACN,WAAW,EAAEN,OAAO,KAAK;EAC1DS,gBAAgB,CAACJ,WAAW,CAACC,WAAW,EAAEN,OAAO,CAAC;AACtD,CAAC;AAED,OAAO,MAAMa,qBAAqB,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;EACtD,IAAIvB,WAAW,IAAIA,WAAW,CAACe,SAAS,EAAE;IACtCf,WAAW,CAACgB,IAAI,CAAC,mBAAmBM,MAAM,EAAE,EAAE,CAAC,CAAC,EAAEE,IAAI,CAACC,SAAS,CAACF,OAAO,CAAC,CAAC;EAC9E,CAAC,MAAM;IACHlB,OAAO,CAACK,KAAK,CAAC,yCAAyC,CAAC;EAC5D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}