{"ast":null,"code":"import Stomp from 'stompjs';\nimport SockJS from 'sockjs-client';\n\n// URL des WebSocket-Endpunkts, der möglicherweise angepasst werden muss\nconst WS_URL = 'http://localhost:8080/ws'; // Stelle sicher, dass diese URL korrekt ist\n\n// WebSocket-Verbindung und STOMP-Client Referenzen\nlet stompClient = null;\nlet socket = null;\n\n// Funktion zum Verbinden mit dem WebSocket-Server\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  if (stompClient) {\n    console.warn('WebSocket already connected.');\n    return;\n  }\n  socket = new SockJS(WS_URL);\n  stompClient = Stomp.over(socket);\n  stompClient.connect({}, frame => {\n    console.log('Connected: ' + frame);\n    // Verbindung erfolgreich hergestellt, Abonnieren von Themen\n    stompClient.subscribe(`/topic/tasks/${userId}`, message => {\n      console.log('Message received on /topic/tasks/', message);\n      onTaskMessageReceived(JSON.parse(message.body));\n    });\n    stompClient.subscribe(`/topic/categories/${userId}`, message => {\n      console.log('Message received on /topic/categories/', message);\n      onCategoryMessageReceived(JSON.parse(message.body));\n    });\n  }, error => {\n    console.error('Error connecting to WebSocket:', error);\n  });\n};\n\n// Funktion zum Trennen der WebSocket-Verbindung\nexport const disconnectWebSocket = () => {\n  if (stompClient) {\n    stompClient.disconnect(() => {\n      console.log('Disconnected from WebSocket');\n    }, error => {\n      console.error('Error disconnecting WebSocket:', error);\n    });\n    stompClient = null;\n    socket = null;\n  } else {\n    console.warn('WebSocket is not connected.');\n  }\n};\n\n// Funktion zum Senden von Nachrichten über WebSocket\nexport const sendMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(destination, {}, JSON.stringify(message));\n  } else {\n    console.error('WebSocket is not connected.');\n  }\n};","map":{"version":3,"names":["Stomp","SockJS","WS_URL","stompClient","socket","connectWebSocket","userId","onTaskMessageReceived","onCategoryMessageReceived","console","warn","over","connect","frame","log","subscribe","message","JSON","parse","body","error","disconnectWebSocket","disconnect","sendMessage","destination","connected","send","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import Stomp from 'stompjs';\nimport SockJS from 'sockjs-client';\n\n// URL des WebSocket-Endpunkts, der möglicherweise angepasst werden muss\nconst WS_URL = 'http://localhost:8080/ws'; // Stelle sicher, dass diese URL korrekt ist\n\n// WebSocket-Verbindung und STOMP-Client Referenzen\nlet stompClient = null;\nlet socket = null;\n\n// Funktion zum Verbinden mit dem WebSocket-Server\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  if (stompClient) {\n    console.warn('WebSocket already connected.');\n    return;\n  }\n\n  socket = new SockJS(WS_URL);\n  stompClient = Stomp.over(socket);\n\n  stompClient.connect({}, (frame) => {\n    console.log('Connected: ' + frame);\n    // Verbindung erfolgreich hergestellt, Abonnieren von Themen\n    stompClient.subscribe(`/topic/tasks/${userId}`, (message) => {\n      console.log('Message received on /topic/tasks/', message);\n      onTaskMessageReceived(JSON.parse(message.body));\n    });\n\n    stompClient.subscribe(`/topic/categories/${userId}`, (message) => {\n      console.log('Message received on /topic/categories/', message);\n      onCategoryMessageReceived(JSON.parse(message.body));\n    });\n  }, (error) => {\n    console.error('Error connecting to WebSocket:', error);\n  });\n};\n\n// Funktion zum Trennen der WebSocket-Verbindung\nexport const disconnectWebSocket = () => {\n  if (stompClient) {\n    stompClient.disconnect(() => {\n      console.log('Disconnected from WebSocket');\n    }, (error) => {\n      console.error('Error disconnecting WebSocket:', error);\n    });\n    stompClient = null;\n    socket = null;\n  } else {\n    console.warn('WebSocket is not connected.');\n  }\n};\n\n// Funktion zum Senden von Nachrichten über WebSocket\nexport const sendMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(destination, {}, JSON.stringify(message));\n  } else {\n    console.error('WebSocket is not connected.');\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,eAAe;;AAElC;AACA,MAAMC,MAAM,GAAG,0BAA0B,CAAC,CAAC;;AAE3C;AACA,IAAIC,WAAW,GAAG,IAAI;AACtB,IAAIC,MAAM,GAAG,IAAI;;AAEjB;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,qBAAqB,EAAEC,yBAAyB,KAAK;EAC5F,IAAIL,WAAW,EAAE;IACfM,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC;IAC5C;EACF;EAEAN,MAAM,GAAG,IAAIH,MAAM,CAACC,MAAM,CAAC;EAC3BC,WAAW,GAAGH,KAAK,CAACW,IAAI,CAACP,MAAM,CAAC;EAEhCD,WAAW,CAACS,OAAO,CAAC,CAAC,CAAC,EAAGC,KAAK,IAAK;IACjCJ,OAAO,CAACK,GAAG,CAAC,aAAa,GAAGD,KAAK,CAAC;IAClC;IACAV,WAAW,CAACY,SAAS,CAAC,gBAAgBT,MAAM,EAAE,EAAGU,OAAO,IAAK;MAC3DP,OAAO,CAACK,GAAG,CAAC,mCAAmC,EAAEE,OAAO,CAAC;MACzDT,qBAAqB,CAACU,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC;IAEFhB,WAAW,CAACY,SAAS,CAAC,qBAAqBT,MAAM,EAAE,EAAGU,OAAO,IAAK;MAChEP,OAAO,CAACK,GAAG,CAAC,wCAAwC,EAAEE,OAAO,CAAC;MAC9DR,yBAAyB,CAACS,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ,CAAC,EAAGC,KAAK,IAAK;IACZX,OAAO,CAACW,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;EACxD,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,IAAIlB,WAAW,EAAE;IACfA,WAAW,CAACmB,UAAU,CAAC,MAAM;MAC3Bb,OAAO,CAACK,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC,EAAGM,KAAK,IAAK;MACZX,OAAO,CAACW,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;IACFjB,WAAW,GAAG,IAAI;IAClBC,MAAM,GAAG,IAAI;EACf,CAAC,MAAM;IACLK,OAAO,CAACC,IAAI,CAAC,6BAA6B,CAAC;EAC7C;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,WAAW,GAAGA,CAACC,WAAW,EAAER,OAAO,KAAK;EACnD,IAAIb,WAAW,IAAIA,WAAW,CAACsB,SAAS,EAAE;IACxCtB,WAAW,CAACuB,IAAI,CAACF,WAAW,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACU,SAAS,CAACX,OAAO,CAAC,CAAC;EAC5D,CAAC,MAAM;IACLP,OAAO,CAACW,KAAK,CAAC,6BAA6B,CAAC;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}