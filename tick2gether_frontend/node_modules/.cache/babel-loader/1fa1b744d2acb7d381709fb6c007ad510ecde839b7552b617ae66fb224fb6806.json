{"ast":null,"code":"// websocket.js\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nlet stompClient = null;\nexport function connectWebSocket(userId, onTaskMessageReceived) {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = Stomp.over(socket);\n  stompClient.connect({}, () => {\n    console.log('Connected to WebSocket server');\n    stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n      const parsedMessage = JSON.parse(message.body);\n      onTaskMessageReceived(parsedMessage);\n    });\n  }, error => {\n    console.error('Error connecting to WebSocket', error);\n  });\n}\nexport function disconnectWebSocket() {\n  if (stompClient !== null) {\n    stompClient.disconnect(() => {\n      console.log('Disconnected from WebSocket server');\n    });\n  }\n}\nexport function sendWebSocketMessage(destination, message) {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(destination, {}, JSON.stringify(message));\n  } else {\n    console.error('WebSocket is not connected');\n  }\n}","map":{"version":3,"names":["SockJS","Stomp","stompClient","connectWebSocket","userId","onTaskMessageReceived","socket","over","connect","console","log","subscribe","message","parsedMessage","JSON","parse","body","error","disconnectWebSocket","disconnect","sendWebSocketMessage","destination","connected","send","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["// websocket.js\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\n\nlet stompClient = null;\n\nexport function connectWebSocket(userId, onTaskMessageReceived) {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = Stomp.over(socket);\n  \n  stompClient.connect({}, () => {\n    console.log('Connected to WebSocket server');\n    stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      onTaskMessageReceived(parsedMessage);\n    });\n  }, (error) => {\n    console.error('Error connecting to WebSocket', error);\n  });\n}\n\nexport function disconnectWebSocket() {\n  if (stompClient !== null) {\n    stompClient.disconnect(() => {\n      console.log('Disconnected from WebSocket server');\n    });\n  }\n}\n\nexport function sendWebSocketMessage(destination, message) {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(destination, {}, JSON.stringify(message));\n  } else {\n    console.error('WebSocket is not connected');\n  }\n}\n"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,KAAK,MAAM,SAAS;AAE3B,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,qBAAqB,EAAE;EAC9D,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC,0BAA0B,CAAC;EACrDE,WAAW,GAAGD,KAAK,CAACM,IAAI,CAACD,MAAM,CAAC;EAEhCJ,WAAW,CAACM,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5CR,WAAW,CAACS,SAAS,CAAC,SAASP,MAAM,cAAc,EAAGQ,OAAO,IAAK;MAChE,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAC9CX,qBAAqB,CAACQ,aAAa,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC,EAAGI,KAAK,IAAK;IACZR,OAAO,CAACQ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACvD,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,mBAAmBA,CAAA,EAAG;EACpC,IAAIhB,WAAW,KAAK,IAAI,EAAE;IACxBA,WAAW,CAACiB,UAAU,CAAC,MAAM;MAC3BV,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACnD,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,SAASU,oBAAoBA,CAACC,WAAW,EAAET,OAAO,EAAE;EACzD,IAAIV,WAAW,IAAIA,WAAW,CAACoB,SAAS,EAAE;IACxCpB,WAAW,CAACqB,IAAI,CAACF,WAAW,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACU,SAAS,CAACZ,OAAO,CAAC,CAAC;EAC5D,CAAC,MAAM;IACLH,OAAO,CAACQ,KAAK,CAAC,4BAA4B,CAAC;EAC7C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}