{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  // Initialisiere categorizedTasks mit leeren Arrays für jede Kategorie\n  const categorizedTasks = {};\n\n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n  tasks.forEach(task => {\n    if (task.completed) {\n      // Alle abgeschlossenen Aufgaben gehen immer in die Kategorie 7 (Logbuch)\n      if (!categorizedTasks[7]) categorizedTasks[7] = [];\n      categorizedTasks[7].push(task);\n    } else {\n      // Für alle anderen Kategorien\n      switch (task.categoryId) {\n        case 1:\n          // Alle Aufgaben\n          if (!categorizedTasks[1]) categorizedTasks[1] = [];\n          categorizedTasks[1].push(task);\n          break;\n        case 2:\n          // Heute (Aufgaben, die heute fällig sind)\n          if (task.dueDate === new Date().toISOString().split('T')[0]) {\n            if (!categorizedTasks[2]) categorizedTasks[2] = [];\n            categorizedTasks[2].push(task);\n          }\n          break;\n        case 3:\n          // Geplant (Aufgaben, die ein Plan-Datum haben)\n          if (task.planDate) {\n            if (!categorizedTasks[3]) categorizedTasks[3] = [];\n            categorizedTasks[3].push(task);\n          }\n          break;\n        case 4:\n          // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n          if (!task.dueDate) {\n            if (!categorizedTasks[4]) categorizedTasks[4] = [];\n            categorizedTasks[4].push(task);\n          }\n          break;\n        case 5:\n          // Arbeit (Aufgaben mit Kategorie-ID 5)\n          if (!categorizedTasks[5]) categorizedTasks[5] = [];\n          categorizedTasks[5].push(task);\n          break;\n        case 6:\n          // Persönlich (Aufgaben mit Kategorie-ID 6)\n          if (!categorizedTasks[6]) categorizedTasks[6] = [];\n          categorizedTasks[6].push(task);\n          break;\n        default:\n          // Benutzerdefinierte Kategorien\n          if (!categorizedTasks[task.categoryId]) categorizedTasks[task.categoryId] = [];\n          categorizedTasks[task.categoryId].push(task);\n          break;\n      }\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","task","completed","push","dueDate","Date","toISOString","split","planDate"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  // Initialisiere categorizedTasks mit leeren Arrays für jede Kategorie\n  const categorizedTasks = {};\n  \n  // Initialisiere categorizedTasks für jede Kategorie-ID\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  tasks.forEach(task => {\n    if (task.completed) {\n      // Alle abgeschlossenen Aufgaben gehen immer in die Kategorie 7 (Logbuch)\n      if (!categorizedTasks[7]) categorizedTasks[7] = [];\n      categorizedTasks[7].push(task);\n    } else {\n      // Für alle anderen Kategorien\n      switch (task.categoryId) {\n        case 1:\n          // Alle Aufgaben\n          if (!categorizedTasks[1]) categorizedTasks[1] = [];\n          categorizedTasks[1].push(task);\n          break;\n        case 2:\n          // Heute (Aufgaben, die heute fällig sind)\n          if (task.dueDate === new Date().toISOString().split('T')[0]) {\n            if (!categorizedTasks[2]) categorizedTasks[2] = [];\n            categorizedTasks[2].push(task);\n          }\n          break;\n        case 3:\n          // Geplant (Aufgaben, die ein Plan-Datum haben)\n          if (task.planDate) {\n            if (!categorizedTasks[3]) categorizedTasks[3] = [];\n            categorizedTasks[3].push(task);\n          }\n          break;\n        case 4:\n          // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n          if (!task.dueDate) {\n            if (!categorizedTasks[4]) categorizedTasks[4] = [];\n            categorizedTasks[4].push(task);\n          }\n          break;\n        case 5:\n          // Arbeit (Aufgaben mit Kategorie-ID 5)\n          if (!categorizedTasks[5]) categorizedTasks[5] = [];\n          categorizedTasks[5].push(task);\n          break;\n        case 6:\n          // Persönlich (Aufgaben mit Kategorie-ID 6)\n          if (!categorizedTasks[6]) categorizedTasks[6] = [];\n          categorizedTasks[6].push(task);\n          break;\n        default:\n          // Benutzerdefinierte Kategorien\n          if (!categorizedTasks[task.categoryId]) categorizedTasks[task.categoryId] = [];\n          categorizedTasks[task.categoryId].push(task);\n          break;\n      }\n    }\n  });\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD;EACA,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;EAEFL,KAAK,CAACG,OAAO,CAACG,IAAI,IAAI;IACpB,IAAIA,IAAI,CAACC,SAAS,EAAE;MAClB;MACA,IAAI,CAACL,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;MAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;IAChC,CAAC,MAAM;MACL;MACA,QAAQA,IAAI,CAACD,UAAU;QACrB,KAAK,CAAC;UACJ;UACA,IAAI,CAACH,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;UAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAC9B;QACF,KAAK,CAAC;UACJ;UACA,IAAIA,IAAI,CAACG,OAAO,KAAK,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;YAC3D,IAAI,CAACV,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;YAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAChC;UACA;QACF,KAAK,CAAC;UACJ;UACA,IAAIA,IAAI,CAACO,QAAQ,EAAE;YACjB,IAAI,CAACX,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;YAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAChC;UACA;QACF,KAAK,CAAC;UACJ;UACA,IAAI,CAACA,IAAI,CAACG,OAAO,EAAE;YACjB,IAAI,CAACP,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;YAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAChC;UACA;QACF,KAAK,CAAC;UACJ;UACA,IAAI,CAACJ,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;UAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAC9B;QACF,KAAK,CAAC;UACJ;UACA,IAAI,CAACJ,gBAAgB,CAAC,CAAC,CAAC,EAAEA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;UAClDA,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAC9B;QACF;UACE;UACA,IAAI,CAACJ,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,EAAEH,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,GAAG,EAAE;UAC9EH,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,CAACG,IAAI,CAACF,IAAI,CAAC;UAC5C;MACJ;IACF;EACF,CAAC,CAAC;EAEF,OAAOJ,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}