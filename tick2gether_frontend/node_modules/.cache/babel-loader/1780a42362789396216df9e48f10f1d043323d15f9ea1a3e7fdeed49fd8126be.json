{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000\n  });\n  stompClient.onConnect = frame => {\n    console.log('WebSocket connected for user:', userId);\n    stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received for user:', userId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    stompClient.subscribe(`/user/${userId}/queue/categories`, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received for user:', userId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n  };\n  stompClient.onStompError = frame => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n  stompClient.activate();\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message)\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};","map":{"version":3,"names":["Client","SockJS","stompClient","connectWebSocket","userId","onTaskMessageReceived","onCategoryMessageReceived","socket","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","console","log","subscribe","message","parsedMessage","JSON","parse","body","onStompError","error","headers","activate","disconnectWebSocket","deactivate","sendWebSocketMessage","destination","connected","publish","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nlet stompClient = null;\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n  });\n\n  stompClient.onConnect = (frame) => {\n    console.log('WebSocket connected for user:', userId);\n    stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received for user:', userId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n\n    stompClient.subscribe(`/user/${userId}/queue/categories`, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received for user:', userId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n  };\n\n  stompClient.onStompError = (frame) => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n\n  stompClient.activate();\n};\n\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message),\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,qBAAqB,EAAEC,yBAAyB,KAAK;EAC5F,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC,0BAA0B,CAAC;EACrDC,WAAW,GAAG,IAAIF,MAAM,CAAC;IACvBQ,gBAAgB,EAAEA,CAAA,KAAMD,MAAM;IAC9BE,cAAc,EAAE,IAAI;IACpBC,iBAAiB,EAAE,IAAI;IACvBC,iBAAiB,EAAE;EACrB,CAAC,CAAC;EAEFT,WAAW,CAACU,SAAS,GAAIC,KAAK,IAAK;IACjCC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEX,MAAM,CAAC;IACpDF,WAAW,CAACc,SAAS,CAAC,SAASZ,MAAM,cAAc,EAAGa,OAAO,IAAK;MAChE,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAC9CP,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEX,MAAM,EAAEc,aAAa,CAAC;MACrEb,qBAAqB,CAACa,aAAa,CAAC;IACtC,CAAC,CAAC;IAEFhB,WAAW,CAACc,SAAS,CAAC,SAASZ,MAAM,mBAAmB,EAAGa,OAAO,IAAK;MACrE,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAC9CP,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEX,MAAM,EAAEc,aAAa,CAAC;MACzEZ,yBAAyB,CAACY,aAAa,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC;EAEDhB,WAAW,CAACoB,YAAY,GAAIT,KAAK,IAAK;IACpCC,OAAO,CAACS,KAAK,CAAC,yBAAyB,GAAGV,KAAK,CAACW,OAAO,CAAC,SAAS,CAAC,CAAC;IACnEV,OAAO,CAACS,KAAK,CAAC,sBAAsB,GAAGV,KAAK,CAACQ,IAAI,CAAC;EACpD,CAAC;EAEDnB,WAAW,CAACuB,QAAQ,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,IAAIxB,WAAW,KAAK,IAAI,EAAE;IACxBA,WAAW,CAACyB,UAAU,CAAC,CAAC;IACxBb,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC;AACF,CAAC;AAED,OAAO,MAAMa,oBAAoB,GAAGA,CAACC,WAAW,EAAEZ,OAAO,KAAK;EAC5D,IAAIf,WAAW,IAAIA,WAAW,CAAC4B,SAAS,EAAE;IACxC5B,WAAW,CAAC6B,OAAO,CAAC;MAClBF,WAAW,EAAEA,WAAW;MACxBR,IAAI,EAAEF,IAAI,CAACa,SAAS,CAACf,OAAO;IAC9B,CAAC,CAAC;IACFH,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEE,OAAO,CAAC;EACpD,CAAC,MAAM;IACLH,OAAO,CAACS,KAAK,CAAC,4BAA4B,CAAC;EAC7C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}