{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onMessageReceived) {\n    console.log('Attempting to connect to WebSocket...'); // Debug: Verbindungsversuch\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    const token = localStorage.getItem('jwtToken');\n    const headers = token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n    console.log('WebSocket headers:', headers); // Debug: WebSocket-Header\n\n    this.stompClient.connect(headers, () => {\n      console.log('Connected to WebSocket'); // Debug: Verbindung hergestellt\n\n      this.stompClient.subscribe('/topic/tasks', message => {\n        console.log('Received message on /topic/tasks:', message); // Debug: Nachricht auf /topic/tasks\n        if (message.body) {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Parsed message body on /topic/tasks:', parsedMessage); // Debug: Geparste Nachricht\n          onMessageReceived(parsedMessage);\n        }\n      });\n      this.stompClient.subscribe('/user/queue/tasks', message => {\n        console.log('Received message on /user/queue/tasks:', message); // Debug: Nachricht auf /user/queue/tasks\n        if (message.body) {\n          const parsedMessage = JSON.parse(message.body);\n          console.log('Parsed message body on /user/queue/tasks:', parsedMessage); // Debug: Geparste Nachricht\n          onMessageReceived(parsedMessage);\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error); // Debug: Verbindungsfehler\n      setTimeout(() => this.connect(onMessageReceived), 5000);\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket'); // Debug: Verbindung getrennt\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      console.log('Sending message to', destination, message); // Debug: Sendevorgang\n      console.log('WebSocket headers:', headers); // Debug: WebSocket-Header\n      this.stompClient.send(destination, headers, JSON.stringify(message));\n    } else {\n      console.error('WebSocket client is not connected'); // Debug: Verbindung nicht vorhanden\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => {\n  console.log('Initiating WebSocket connection...'); // Debug: Initiierung der Verbindung\n  webSocketService.connect(onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  console.log('Initiating WebSocket disconnection...'); // Debug: Initiierung der Trennung\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Preparing to send WebSocket message...'); // Debug: Vorbereitung des Sendevorgangs\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendUpdateTaskMessage = taskDTO => {\n  if (taskDTO.completed == null) {\n    taskDTO.completed = false;\n  }\n  console.log('Sending update task message:', taskDTO); // Debug: Sende-Aufgabenaktualisierung\n  sendWebSocketMessage(`/app/updateTask/${taskDTO.taskId}`, taskDTO);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","console","log","socket","over","token","localStorage","getItem","headers","Authorization","subscribe","message","body","parsedMessage","JSON","parse","error","setTimeout","disconnect","sendMessage","destination","connected","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage","sendUpdateTaskMessage","taskDTO","completed","taskId"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    connect(onMessageReceived) {\n        console.log('Attempting to connect to WebSocket...'); // Debug: Verbindungsversuch\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n\n        const token = localStorage.getItem('jwtToken');\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\n        console.log('WebSocket headers:', headers); // Debug: WebSocket-Header\n\n        this.stompClient.connect(headers, () => {\n            console.log('Connected to WebSocket'); // Debug: Verbindung hergestellt\n\n            this.stompClient.subscribe('/topic/tasks', (message) => {\n                console.log('Received message on /topic/tasks:', message); // Debug: Nachricht auf /topic/tasks\n                if (message.body) {\n                    const parsedMessage = JSON.parse(message.body);\n                    console.log('Parsed message body on /topic/tasks:', parsedMessage); // Debug: Geparste Nachricht\n                    onMessageReceived(parsedMessage);\n                }\n            });\n\n            this.stompClient.subscribe('/user/queue/tasks', (message) => {\n                console.log('Received message on /user/queue/tasks:', message); // Debug: Nachricht auf /user/queue/tasks\n                if (message.body) {\n                    const parsedMessage = JSON.parse(message.body);\n                    console.log('Parsed message body on /user/queue/tasks:', parsedMessage); // Debug: Geparste Nachricht\n                    onMessageReceived(parsedMessage);\n                }\n            });\n        }, (error) => {\n            console.error('Error connecting to WebSocket:', error); // Debug: Verbindungsfehler\n            setTimeout(() => this.connect(onMessageReceived), 5000);\n        });\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket'); // Debug: Verbindung getrennt\n            });\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            const token = localStorage.getItem('jwtToken');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n            console.log('Sending message to', destination, message); // Debug: Sendevorgang\n            console.log('WebSocket headers:', headers); // Debug: WebSocket-Header\n            this.stompClient.send(destination, headers, JSON.stringify(message));\n        } else {\n            console.error('WebSocket client is not connected'); // Debug: Verbindung nicht vorhanden\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => {\n    console.log('Initiating WebSocket connection...'); // Debug: Initiierung der Verbindung\n    webSocketService.connect(onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n    console.log('Initiating WebSocket disconnection...'); // Debug: Initiierung der Trennung\n    webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n    console.log('Preparing to send WebSocket message...'); // Debug: Vorbereitung des Sendevorgangs\n    webSocketService.sendMessage(destination, message);\n};\n\nexport const sendUpdateTaskMessage = (taskDTO) => {\n    if (taskDTO.completed == null) {\n        taskDTO.completed = false;\n    }\n    console.log('Sending update task message:', taskDTO); // Debug: Sende-Aufgabenaktualisierung\n    sendWebSocketMessage(`/app/updateTask/${taskDTO.taskId}`, taskDTO);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}