{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Categories from '../components/Categories';\nimport ToDoList from '../components/ToDoList';\nimport ToDoActions from '../components/ToDoActions';\nimport Navbar from '../components/Navbar';\nimport EditTaskPopUp from '../components/EditTaskPopUp';\nimport AddTaskPopUp from '../components/AddTaskPopUp';\nimport AddCategoryPopUp from '../components/AddCategoryPopUp';\nimport { fetchTasks, addTask, deleteTask, fetchUserId, fetchEmail, addCategory, fetchCategories, deleteCategory } from '../api';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage } from '../websocket';\nimport { iconMap, customCategoryIcon } from '../icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STANDARD_CATEGORIES = [{\n  id: 1,\n  name: 'All Tasks'\n}, {\n  id: 2,\n  name: 'Today'\n}, {\n  id: 3,\n  name: 'Planned'\n}, {\n  id: 4,\n  name: 'Any Time'\n}, {\n  id: 5,\n  name: 'Work'\n}, {\n  id: 6,\n  name: 'Personal'\n}, {\n  id: 7,\n  name: 'Logbook'\n}];\nfunction Dashboard() {\n  _s();\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const navigate = useNavigate();\n  const initializeDashboard = useCallback(async () => {\n    try {\n      const email = await fetchEmail();\n      const fetchedUserId = await fetchUserId(email);\n      if (fetchedUserId) {\n        setUserId(fetchedUserId);\n        const fetchedTasks = await fetchTasks();\n        setTasks(fetchedTasks);\n        const fetchedCategories = await fetchCategories(fetchedUserId);\n        if (Array.isArray(fetchedCategories)) {\n          const uniqueCategories = fetchedCategories.reduce((acc, category) => {\n            if (!acc.some(cat => cat.categoryId === category.categoryId)) {\n              acc.push({\n                ...category,\n                categoryId: category.categoryId,\n                icon: iconMap[category.name] || customCategoryIcon\n              });\n            }\n            return acc;\n          }, []);\n          setCategories(uniqueCategories);\n          if (uniqueCategories.length > 0) {\n            setSelectedCategory(uniqueCategories[0]);\n          } else {\n            setSelectedCategory(null); // Set to null if no categories exist\n          }\n        } else {\n          console.error('Fetched categories is not an array:', fetchedCategories);\n          setCategories([]);\n          setSelectedCategory(null);\n        }\n      } else {\n        navigate('/login');\n      }\n    } catch (error) {\n      console.error('Error initializing dashboard:', error);\n      navigate('/login');\n    }\n  }, [navigate]);\n  useEffect(() => {\n    initializeDashboard();\n  }, [initializeDashboard]);\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n      const {\n        type,\n        taskId,\n        ...updatedData\n      } = message;\n      setTasks(prevTasks => {\n        if (type === 'TASK_UPDATE') {\n          const taskIndex = prevTasks.findIndex(task => task.taskId === taskId);\n          if (taskIndex !== -1) {\n            const updatedTasks = [...prevTasks];\n            updatedTasks[taskIndex] = {\n              ...prevTasks[taskIndex],\n              ...updatedData\n            };\n            return updatedTasks;\n          } else {\n            return [...prevTasks, {\n              taskId,\n              ...updatedData\n            }];\n          }\n        }\n        return prevTasks;\n      });\n    };\n    if (userId) {\n      console.log('Connecting WebSocket for user ID:', userId);\n      const fetchIds = async () => {\n        try {\n          const fetchedTasks = await fetchTasks();\n          const fetchedCategories = await fetchCategories(userId);\n          const taskIds = fetchedTasks.map(task => task.taskId);\n          const categoryIds = Array.isArray(fetchedCategories) ? fetchedCategories.map(category => category.categoryId) : [];\n          connectWebSocket(userId, taskIds, categoryIds, handleWebSocketMessage);\n        } catch (error) {\n          console.error('Error fetching IDs for WebSocket:', error);\n        }\n      };\n      fetchIds();\n      return () => {\n        console.log('Disconnecting WebSocket for user ID:', userId);\n        disconnectWebSocket();\n      };\n    }\n  }, [userId]);\n  const handleAddNewTask = async newTask => {\n    if (!selectedCategory) return;\n    try {\n      const formattedTask = {\n        ...newTask,\n        categoryId: selectedCategory.categoryId,\n        userId: userId\n      };\n      console.log(\"Formatted Task before sending to backend:\", formattedTask);\n      const addedTask = await addTask(formattedTask, userId);\n      setShowAddTaskPopUp(false);\n\n      // Update categories state with the new category if it's newly created\n      setCategories(prevCategories => {\n        const categoryExists = prevCategories.some(cat => cat.categoryId === addedTask.categoryId);\n        if (!categoryExists) {\n          fetchCategories(userId).then(fetchedCategories => {\n            const updatedCategories = fetchedCategories.map(category => ({\n              ...category,\n              icon: iconMap[category.name] || customCategoryIcon\n            }));\n            setCategories(updatedCategories);\n          });\n        }\n        return prevCategories;\n      });\n\n      // Update tasks state\n      setTasks(prevTasks => {\n        const uniqueTasks = [...prevTasks, addedTask].filter((task, index, self) => index === self.findIndex(t => t.taskId === task.taskId));\n        return uniqueTasks;\n      });\n      sendUpdateTaskMessage(addedTask);\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n  const handleSaveTask = async updatedTask => {\n    if (!selectedCategory) return;\n    try {\n      const taskToUpdate = {\n        ...updatedTask,\n        userId: userId,\n        taskId: currentTask.taskId,\n        categoryId: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.categoryId) || currentTask.categoryId\n      };\n      console.log(\"Task to Update before sending to backend:\", taskToUpdate);\n      setShowEditTaskPopUp(false);\n      setTasks(prevTasks => {\n        const updatedTasks = prevTasks.map(task => task.taskId === taskToUpdate.taskId ? taskToUpdate : task);\n        return updatedTasks.filter((task, index, self) => index === self.findIndex(t => t.taskId === task.taskId));\n      });\n      sendUpdateTaskMessage(taskToUpdate);\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n  const handleDeleteTask = async id => {\n    try {\n      await deleteTask(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.taskId !== id));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const handleAddCategory = async newCategory => {\n    try {\n      const categoryExists = categories.some(cat => cat.name === newCategory.name);\n      if (categoryExists) {\n        console.warn('Category already exists:', newCategory);\n        return;\n      }\n      const data = await addCategory(newCategory);\n      const newCategoryObject = {\n        categoryId: data.categoryId,\n        // Ensure 'categoryId' is used instead of 'id'\n        name: data.name,\n        icon: customCategoryIcon\n      };\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n      setSelectedCategory(newCategoryObject); // Select the new category after adding it\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n  const handleDeleteCategory = async id => {\n    try {\n      await deleteCategory(id);\n      setCategories(prevCategories => prevCategories.filter(category => category.categoryId !== id));\n    } catch (error) {\n      console.error('Error deleting category:', error);\n    }\n  };\n  const toggleDeleteMode = () => {\n    setIsDeleteMode(prevMode => !prevMode);\n  };\n  const handleEditTask = task => {\n    setCurrentTask(task);\n    setShowEditTaskPopUp(true);\n  };\n\n  // Integrate categorization logic directly into the component\n  const categorizeTasks = (tasks, categories) => {\n    const categorizedTasks = {};\n    const standardCategoryIds = new Set(STANDARD_CATEGORIES.map(category => category.id));\n\n    // Initialize categorizedTasks for each standard category ID\n    standardCategoryIds.forEach(id => {\n      categorizedTasks[id] = [];\n    });\n\n    // Filter tasks based on category rules\n    tasks.forEach(task => {\n      const categoryId = task.categoryId;\n      if (standardCategoryIds.has(categoryId)) {\n        switch (categoryId) {\n          case 1:\n            // All Tasks: Exclude Logbook (id 7)\n            categorizedTasks[1] = tasks.filter(t => t.categoryId !== 7);\n            break;\n          case 2:\n            // Today: Tasks with category id 2\n            categorizedTasks[2] = tasks.filter(t => t.categoryId === 2);\n            break;\n          case 3:\n            // Planned: Tasks with a planDate\n            categorizedTasks[3] = tasks.filter(t => t.planDate);\n            break;\n          case 4:\n            // Any Time: Tasks with category id 4\n            categorizedTasks[4] = tasks.filter(t => t.categoryId === 4);\n            break;\n          case 5:\n            // Work: Tasks with category id 5\n            categorizedTasks[5] = tasks.filter(t => t.categoryId === 5);\n            break;\n          case 6:\n            // Personal: Tasks with category id 6\n            categorizedTasks[6] = tasks.filter(t => t.categoryId === 6);\n            break;\n          case 7:\n            // Logbook: Tasks with category id 7\n            categorizedTasks[7] = tasks.filter(t => t.categoryId === 7);\n            break;\n          default:\n            // Handle custom categories\n            if (!categorizedTasks[categoryId]) {\n              categorizedTasks[categoryId] = [];\n            }\n            categorizedTasks[categoryId].push(task);\n            break;\n        }\n      }\n    });\n    return categorizedTasks;\n  };\n  const filteredTasks = useMemo(() => {\n    if (selectedCategory) {\n      const categorizedTasks = categorizeTasks(tasks, categories);\n      return categorizedTasks[selectedCategory.categoryId] || [];\n    }\n    return tasks;\n  }, [tasks, categories, selectedCategory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Categories, {\n      categories: categories,\n      onAddCategory: () => setShowAddCategoryPopUp(true),\n      onDeleteCategory: handleDeleteCategory,\n      onSelectCategory: setSelectedCategory,\n      isDeleteMode: isDeleteMode,\n      toggleDeleteMode: toggleDeleteMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoActions, {\n      onAddTask: () => setShowAddTaskPopUp(true),\n      onDeleteTask: handleDeleteTask,\n      isDeleteMode: isDeleteMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n      tasks: filteredTasks,\n      onEditTask: handleEditTask,\n      isDeleteMode: isDeleteMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), showAddTaskPopUp && /*#__PURE__*/_jsxDEV(AddTaskPopUp, {\n      onSave: handleAddNewTask,\n      onCancel: () => setShowAddTaskPopUp(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 28\n    }, this), showEditTaskPopUp && /*#__PURE__*/_jsxDEV(EditTaskPopUp, {\n      task: currentTask,\n      onSave: handleSaveTask,\n      onCancel: () => setShowEditTaskPopUp(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 29\n    }, this), showAddCategoryPopUp && /*#__PURE__*/_jsxDEV(AddCategoryPopUp, {\n      onSave: handleAddCategory,\n      onCancel: () => setShowAddCategoryPopUp(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"4IAr4+a5WIw1UfDA51nc1OIYfDA=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useNavigate","Categories","ToDoList","ToDoActions","Navbar","EditTaskPopUp","AddTaskPopUp","AddCategoryPopUp","fetchTasks","addTask","deleteTask","fetchUserId","fetchEmail","addCategory","fetchCategories","deleteCategory","connectWebSocket","disconnectWebSocket","sendUpdateTaskMessage","iconMap","customCategoryIcon","jsxDEV","_jsxDEV","STANDARD_CATEGORIES","id","name","Dashboard","_s","showEditTaskPopUp","setShowEditTaskPopUp","showAddCategoryPopUp","setShowAddCategoryPopUp","isDeleteMode","setIsDeleteMode","tasks","setTasks","categories","setCategories","selectedCategory","setSelectedCategory","currentTask","setCurrentTask","showAddTaskPopUp","setShowAddTaskPopUp","userId","setUserId","navigate","initializeDashboard","email","fetchedUserId","fetchedTasks","fetchedCategories","Array","isArray","uniqueCategories","reduce","acc","category","some","cat","categoryId","push","icon","length","console","error","handleWebSocketMessage","message","log","type","taskId","updatedData","prevTasks","taskIndex","findIndex","task","updatedTasks","fetchIds","taskIds","map","categoryIds","handleAddNewTask","newTask","formattedTask","addedTask","prevCategories","categoryExists","then","updatedCategories","uniqueTasks","filter","index","self","t","handleSaveTask","updatedTask","taskToUpdate","handleDeleteTask","handleAddCategory","newCategory","warn","data","newCategoryObject","handleDeleteCategory","toggleDeleteMode","prevMode","handleEditTask","categorizeTasks","categorizedTasks","standardCategoryIds","Set","forEach","has","planDate","filteredTasks","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddCategory","onDeleteCategory","onSelectCategory","onAddTask","onDeleteTask","onEditTask","onSave","onCancel","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Categories from '../components/Categories';\nimport ToDoList from '../components/ToDoList';\nimport ToDoActions from '../components/ToDoActions';\nimport Navbar from '../components/Navbar';\nimport EditTaskPopUp from '../components/EditTaskPopUp';\nimport AddTaskPopUp from '../components/AddTaskPopUp';\nimport AddCategoryPopUp from '../components/AddCategoryPopUp';\nimport { fetchTasks, addTask, deleteTask, fetchUserId, fetchEmail, addCategory, fetchCategories, deleteCategory } from '../api';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage } from '../websocket';\nimport { iconMap, customCategoryIcon } from '../icons';\n\nconst STANDARD_CATEGORIES = [\n  { id: 1, name: 'All Tasks' },\n  { id: 2, name: 'Today' },\n  { id: 3, name: 'Planned' },\n  { id: 4, name: 'Any Time' },\n  { id: 5, name: 'Work' },\n  { id: 6, name: 'Personal' },\n  { id: 7, name: 'Logbook' },\n];\n\nfunction Dashboard() {\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const navigate = useNavigate();\n\n  const initializeDashboard = useCallback(async () => {\n    try {\n      const email = await fetchEmail();\n      const fetchedUserId = await fetchUserId(email);\n\n      if (fetchedUserId) {\n        setUserId(fetchedUserId);\n\n        const fetchedTasks = await fetchTasks();\n        setTasks(fetchedTasks);\n\n        const fetchedCategories = await fetchCategories(fetchedUserId);\n        if (Array.isArray(fetchedCategories)) {\n          const uniqueCategories = fetchedCategories.reduce((acc, category) => {\n            if (!acc.some(cat => cat.categoryId === category.categoryId)) {\n              acc.push({\n                ...category,\n                categoryId: category.categoryId,\n                icon: iconMap[category.name] || customCategoryIcon,\n              });\n            }\n            return acc;\n          }, []);\n          setCategories(uniqueCategories);\n\n          if (uniqueCategories.length > 0) {\n            setSelectedCategory(uniqueCategories[0]);\n          } else {\n            setSelectedCategory(null); // Set to null if no categories exist\n          }\n        } else {\n          console.error('Fetched categories is not an array:', fetchedCategories);\n          setCategories([]);\n          setSelectedCategory(null);\n        }\n      } else {\n        navigate('/login');\n      }\n    } catch (error) {\n      console.error('Error initializing dashboard:', error);\n      navigate('/login');\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    initializeDashboard();\n  }, [initializeDashboard]);\n\n  useEffect(() => {\n    const handleWebSocketMessage = (message) => {\n      console.log('Received WebSocket message:', message);\n    \n      const { type, taskId, ...updatedData } = message;\n    \n      setTasks(prevTasks => {\n        if (type === 'TASK_UPDATE') {\n          const taskIndex = prevTasks.findIndex(task => task.taskId === taskId);\n          if (taskIndex !== -1) {\n            const updatedTasks = [...prevTasks];\n            updatedTasks[taskIndex] = { ...prevTasks[taskIndex], ...updatedData };\n            return updatedTasks;\n          } else {\n            return [...prevTasks, { taskId, ...updatedData }];\n          }\n        }\n        return prevTasks;\n      });\n    };\n    \n    if (userId) {\n      console.log('Connecting WebSocket for user ID:', userId);\n  \n      const fetchIds = async () => {\n        try {\n          const fetchedTasks = await fetchTasks();\n          const fetchedCategories = await fetchCategories(userId);\n          const taskIds = fetchedTasks.map(task => task.taskId);\n          const categoryIds = Array.isArray(fetchedCategories) ? fetchedCategories.map(category => category.categoryId) : [];\n          connectWebSocket(userId, taskIds, categoryIds, handleWebSocketMessage);\n        } catch (error) {\n          console.error('Error fetching IDs for WebSocket:', error);\n        }\n      };\n  \n      fetchIds();\n  \n      return () => {\n        console.log('Disconnecting WebSocket for user ID:', userId);\n        disconnectWebSocket();\n      };\n    }\n  }, [userId]);\n\n  const handleAddNewTask = async (newTask) => {\n    if (!selectedCategory) return;\n  \n    try {\n      const formattedTask = {\n        ...newTask,\n        categoryId: selectedCategory.categoryId,\n        userId: userId\n      };\n      console.log(\"Formatted Task before sending to backend:\", formattedTask);\n  \n      const addedTask = await addTask(formattedTask, userId);\n      setShowAddTaskPopUp(false);\n  \n      // Update categories state with the new category if it's newly created\n      setCategories(prevCategories => {\n        const categoryExists = prevCategories.some(cat => cat.categoryId === addedTask.categoryId);\n        if (!categoryExists) {\n          fetchCategories(userId).then(fetchedCategories => {\n            const updatedCategories = fetchedCategories.map(category => ({\n              ...category,\n              icon: iconMap[category.name] || customCategoryIcon\n            }));\n            setCategories(updatedCategories);\n          });\n        }\n        return prevCategories;\n      });\n  \n      // Update tasks state\n      setTasks(prevTasks => {\n        const uniqueTasks = [...prevTasks, addedTask].filter((task, index, self) =>\n          index === self.findIndex((t) => t.taskId === task.taskId)\n        );\n        return uniqueTasks;\n      });\n  \n      sendUpdateTaskMessage(addedTask);\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  const handleSaveTask = async (updatedTask) => {\n    if (!selectedCategory) return;\n\n    try {\n      const taskToUpdate = {\n        ...updatedTask,\n        userId: userId,\n        taskId: currentTask.taskId,\n        categoryId: selectedCategory?.categoryId || currentTask.categoryId,\n      };\n      console.log(\"Task to Update before sending to backend:\", taskToUpdate);\n      setShowEditTaskPopUp(false);\n      setTasks(prevTasks => {\n        const updatedTasks = prevTasks.map(task => (task.taskId === taskToUpdate.taskId ? taskToUpdate : task));\n        return updatedTasks.filter((task, index, self) =>\n          index === self.findIndex((t) => t.taskId === task.taskId)\n        );\n      });\n      sendUpdateTaskMessage(taskToUpdate);\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n\n  const handleDeleteTask = async (id) => {\n    try {\n      await deleteTask(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.taskId !== id));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const handleAddCategory = async (newCategory) => {\n    try {\n      const categoryExists = categories.some(cat => cat.name === newCategory.name);\n      if (categoryExists) {\n        console.warn('Category already exists:', newCategory);\n        return;\n      }\n      const data = await addCategory(newCategory);\n      const newCategoryObject = {\n        categoryId: data.categoryId, // Ensure 'categoryId' is used instead of 'id'\n        name: data.name,\n        icon: customCategoryIcon,\n      };\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n      setSelectedCategory(newCategoryObject); // Select the new category after adding it\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n\n  const handleDeleteCategory = async (id) => {\n    try {\n      await deleteCategory(id);\n      setCategories(prevCategories => prevCategories.filter(category => category.categoryId !== id));\n    } catch (error) {\n      console.error('Error deleting category:', error);\n    }\n  };\n\n  const toggleDeleteMode = () => {\n    setIsDeleteMode(prevMode => !prevMode);\n  };\n\n  const handleEditTask = (task) => {\n    setCurrentTask(task);\n    setShowEditTaskPopUp(true);\n  };\n\n  // Integrate categorization logic directly into the component\n  const categorizeTasks = (tasks, categories) => {\n    const categorizedTasks = {};\n\n    const standardCategoryIds = new Set(STANDARD_CATEGORIES.map(category => category.id));\n\n    // Initialize categorizedTasks for each standard category ID\n    standardCategoryIds.forEach(id => {\n      categorizedTasks[id] = [];\n    });\n\n    // Filter tasks based on category rules\n    tasks.forEach(task => {\n      const categoryId = task.categoryId;\n\n      if (standardCategoryIds.has(categoryId)) {\n        switch (categoryId) {\n          case 1:\n            // All Tasks: Exclude Logbook (id 7)\n            categorizedTasks[1] = tasks.filter(t => t.categoryId !== 7);\n            break;\n          case 2:\n            // Today: Tasks with category id 2\n            categorizedTasks[2] = tasks.filter(t => t.categoryId === 2);\n            break;\n          case 3:\n            // Planned: Tasks with a planDate\n            categorizedTasks[3] = tasks.filter(t => t.planDate);\n            break;\n          case 4:\n            // Any Time: Tasks with category id 4\n            categorizedTasks[4] = tasks.filter(t => t.categoryId === 4);\n            break;\n          case 5:\n            // Work: Tasks with category id 5\n            categorizedTasks[5] = tasks.filter(t => t.categoryId === 5);\n            break;\n          case 6:\n            // Personal: Tasks with category id 6\n            categorizedTasks[6] = tasks.filter(t => t.categoryId === 6);\n            break;\n          case 7:\n            // Logbook: Tasks with category id 7\n            categorizedTasks[7] = tasks.filter(t => t.categoryId === 7);\n            break;\n          default:\n            // Handle custom categories\n            if (!categorizedTasks[categoryId]) {\n              categorizedTasks[categoryId] = [];\n            }\n            categorizedTasks[categoryId].push(task);\n            break;\n        }\n      }\n    });\n\n    return categorizedTasks;\n  };\n\n  const filteredTasks = useMemo(() => {\n    if (selectedCategory) {\n      const categorizedTasks = categorizeTasks(tasks, categories);\n      return categorizedTasks[selectedCategory.categoryId] || [];\n    }\n    return tasks;\n  }, [tasks, categories, selectedCategory]);\n\n  return (\n    <div>\n      <Navbar />\n      <Categories\n        categories={categories}\n        onAddCategory={() => setShowAddCategoryPopUp(true)}\n        onDeleteCategory={handleDeleteCategory}\n        onSelectCategory={setSelectedCategory}\n        isDeleteMode={isDeleteMode}\n        toggleDeleteMode={toggleDeleteMode}\n      />\n      <ToDoActions\n        onAddTask={() => setShowAddTaskPopUp(true)}\n        onDeleteTask={handleDeleteTask}\n        isDeleteMode={isDeleteMode}\n      />\n      <ToDoList\n        tasks={filteredTasks}\n        onEditTask={handleEditTask}\n        isDeleteMode={isDeleteMode}\n      />\n      {showAddTaskPopUp && <AddTaskPopUp onSave={handleAddNewTask} onCancel={() => setShowAddTaskPopUp(false)} />}\n      {showEditTaskPopUp && <EditTaskPopUp task={currentTask} onSave={handleSaveTask} onCancel={() => setShowEditTaskPopUp(false)} />}\n      {showAddCategoryPopUp && <AddCategoryPopUp onSave={handleAddCategory} onCancel={() => setShowAddCategoryPopUp(false)} />}\n    </div>\n  );\n}\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}