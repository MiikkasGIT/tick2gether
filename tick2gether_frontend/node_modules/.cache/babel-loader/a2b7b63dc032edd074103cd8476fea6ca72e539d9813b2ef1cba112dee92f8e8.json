{"ast":null,"code":"// websocket.js\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    const stompClient = Stomp.over(socket);\n    const token = localStorage.getItem('jwtToken');\n    stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket');\n      // Send token as part of an initial message or in a header\n      stompClient.send('/app/authorize', {}, JSON.stringify({\n        token: token\n      }));\n      console.log('Connected to WebSocket');\n\n      // Subscribe to general task updates\n      this.stompClient.subscribe('/topic/tasks', message => {\n        if (message.body) {\n          onMessageReceived(JSON.parse(message.body));\n        }\n      });\n\n      // Subscribe to personal user queue\n      this.stompClient.subscribe('/user/queue/tasks', message => {\n        if (message.body) {\n          onMessageReceived(JSON.parse(message.body));\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => this.connect(onMessageReceived), 5000);\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      this.stompClient.send(destination, headers, JSON.stringify(message));\n    }\n  }\n  sendUpdateTaskMessage(taskId, taskDTO) {\n    if (this.stompClient && this.stompClient.connected) {\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      this.stompClient.send(`/app/updateTask/${taskId}`, headers, JSON.stringify(taskDTO));\n    } else {\n      console.error('WebSocket connection is not established');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => {\n  webSocketService.connect(onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendUpdateTaskMessage = (taskId, taskDTO) => {\n  webSocketService.sendUpdateTaskMessage(taskId, taskDTO);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","socket","over","token","localStorage","getItem","frame","console","log","send","JSON","stringify","subscribe","message","body","parse","error","setTimeout","disconnect","sendMessage","destination","connected","headers","Authorization","sendUpdateTaskMessage","taskId","taskDTO","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["// websocket.js\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    connect(onMessageReceived) {\n    \n        const socket = new SockJS(SOCKET_URL);\n        const stompClient = Stomp.over(socket);\n        \n        const token = localStorage.getItem('jwtToken');\n        stompClient.connect({}, (frame) => {\n            console.log('Connected to WebSocket');\n            // Send token as part of an initial message or in a header\n            stompClient.send('/app/authorize', {}, JSON.stringify({ token: token }));\n        \n            console.log('Connected to WebSocket');\n\n            // Subscribe to general task updates\n            this.stompClient.subscribe('/topic/tasks', (message) => {\n                if (message.body) {\n                    onMessageReceived(JSON.parse(message.body));\n                }\n            });\n\n            // Subscribe to personal user queue\n            this.stompClient.subscribe('/user/queue/tasks', (message) => {\n                if (message.body) {\n                    onMessageReceived(JSON.parse(message.body));\n                }\n            });\n        }, (error) => {\n            console.error('Error connecting to WebSocket:', error);\n            setTimeout(() => this.connect(onMessageReceived), 5000);\n        });\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n            });\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            const token = localStorage.getItem('jwtToken');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n            this.stompClient.send(destination, headers, JSON.stringify(message));\n        }\n    }\n\n    sendUpdateTaskMessage(taskId, taskDTO) {\n        if (this.stompClient && this.stompClient.connected) {\n            const token = localStorage.getItem('jwtToken');\n            const headers = token ? { Authorization: `Bearer ${token}` } : {};\n            this.stompClient.send(`/app/updateTask/${taskId}`, headers, JSON.stringify(taskDTO));\n        } else {\n            console.error('WebSocket connection is not established');\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => {\n    webSocketService.connect(onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n    webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n    webSocketService.sendMessage(destination, message);\n};\n\nexport const sendUpdateTaskMessage = (taskId, taskDTO) => {\n    webSocketService.sendUpdateTaskMessage(taskId, taskDTO);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}