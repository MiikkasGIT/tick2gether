{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Lists to hold tasks based on conditions\n  const allTasks = [];\n  const logbookTasks = [];\n  const todayTasks = [];\n  const plannedTasks = [];\n  const anyTimeTasks = [];\n  const workTasks = [];\n  const personalTasks = [];\n\n  // Categorize tasks into different lists\n  tasks.forEach(task => {\n    const {\n      categoryId,\n      completed,\n      planDate\n    } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Add tasks to standard categories based on conditions\n    allTasks.push(task); // All Tasks (excluding Logbook)\n\n    if (completed) {\n      logbookTasks.push(task); // Logbook\n    } else {\n      if (categoryId === 2) {\n        todayTasks.push(task); // Today\n      }\n      if (planDate) {\n        plannedTasks.push(task); // Planned\n      }\n      if (categoryId === 4) {\n        anyTimeTasks.push(task); // Any Time\n      }\n      if (categoryId === 5) {\n        workTasks.push(task); // Work\n      }\n      if (categoryId === 6) {\n        personalTasks.push(task); // Personal\n      }\n    }\n  });\n\n  // Add lists to categorizedTasks object\n  categorizedTasks[1] = allTasks;\n  categorizedTasks[7] = logbookTasks;\n  categorizedTasks[2] = todayTasks;\n  categorizedTasks[3] = plannedTasks;\n  categorizedTasks[4] = anyTimeTasks;\n  categorizedTasks[5] = workTasks;\n  categorizedTasks[6] = personalTasks;\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","allTasks","logbookTasks","todayTasks","plannedTasks","anyTimeTasks","workTasks","personalTasks","task","completed","planDate","console","log","taskId","push"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Lists to hold tasks based on conditions\n  const allTasks = [];\n  const logbookTasks = [];\n  const todayTasks = [];\n  const plannedTasks = [];\n  const anyTimeTasks = [];\n  const workTasks = [];\n  const personalTasks = [];\n\n  // Categorize tasks into different lists\n  tasks.forEach(task => {\n    const { categoryId, completed, planDate } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Add tasks to standard categories based on conditions\n    allTasks.push(task); // All Tasks (excluding Logbook)\n\n    if (completed) {\n      logbookTasks.push(task); // Logbook\n    } else {\n      if (categoryId === 2) {\n        todayTasks.push(task); // Today\n      }\n      if (planDate) {\n        plannedTasks.push(task); // Planned\n      }\n      if (categoryId === 4) {\n        anyTimeTasks.push(task); // Any Time\n      }\n      if (categoryId === 5) {\n        workTasks.push(task); // Work\n      }\n      if (categoryId === 6) {\n        personalTasks.push(task); // Personal\n      }\n    }\n  });\n\n  // Add lists to categorizedTasks object\n  categorizedTasks[1] = allTasks;\n  categorizedTasks[7] = logbookTasks;\n  categorizedTasks[2] = todayTasks;\n  categorizedTasks[3] = plannedTasks;\n  categorizedTasks[4] = anyTimeTasks;\n  categorizedTasks[5] = workTasks;\n  categorizedTasks[6] = personalTasks;\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;;EAEF;EACA,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,aAAa,GAAG,EAAE;;EAExB;EACAZ,KAAK,CAACG,OAAO,CAACU,IAAI,IAAI;IACpB,MAAM;MAAER,UAAU;MAAES,SAAS;MAAEC;IAAS,CAAC,GAAGF,IAAI;;IAEhD;IACAG,OAAO,CAACC,GAAG,CAAC,4BAA4BJ,IAAI,CAACK,MAAM,iBAAiBb,UAAU,EAAE,CAAC;;IAEjF;IACA,IAAI,CAACH,gBAAgB,CAACG,UAAU,CAAC,EAAE;MACjCH,gBAAgB,CAACG,UAAU,CAAC,GAAG,EAAE;IACnC;IACAH,gBAAgB,CAACG,UAAU,CAAC,CAACc,IAAI,CAACN,IAAI,CAAC;;IAEvC;IACAP,QAAQ,CAACa,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;;IAErB,IAAIC,SAAS,EAAE;MACbP,YAAY,CAACY,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,MAAM;MACL,IAAIR,UAAU,KAAK,CAAC,EAAE;QACpBG,UAAU,CAACW,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MACzB;MACA,IAAIE,QAAQ,EAAE;QACZN,YAAY,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAC3B;MACA,IAAIR,UAAU,KAAK,CAAC,EAAE;QACpBK,YAAY,CAACS,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAC3B;MACA,IAAIR,UAAU,KAAK,CAAC,EAAE;QACpBM,SAAS,CAACQ,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MACxB;MACA,IAAIR,UAAU,KAAK,CAAC,EAAE;QACpBO,aAAa,CAACO,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAC5B;IACF;EACF,CAAC,CAAC;;EAEF;EACAX,gBAAgB,CAAC,CAAC,CAAC,GAAGI,QAAQ;EAC9BJ,gBAAgB,CAAC,CAAC,CAAC,GAAGK,YAAY;EAClCL,gBAAgB,CAAC,CAAC,CAAC,GAAGM,UAAU;EAChCN,gBAAgB,CAAC,CAAC,CAAC,GAAGO,YAAY;EAClCP,gBAAgB,CAAC,CAAC,CAAC,GAAGQ,YAAY;EAClCR,gBAAgB,CAAC,CAAC,CAAC,GAAGS,SAAS;EAC/BT,gBAAgB,CAAC,CAAC,CAAC,GAAGU,aAAa;;EAEnC;EACAI,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEf,gBAAgB,CAAC;EAEnD,OAAOA,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}