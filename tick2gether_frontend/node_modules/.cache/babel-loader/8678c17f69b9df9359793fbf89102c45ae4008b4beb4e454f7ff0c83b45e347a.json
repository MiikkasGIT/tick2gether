{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.reconnectInterval = 5000; // Zeitspanne zum Wiederverbinden in Millisekunden\n    this.onMessageReceived = null; // Callback zur Nachrichtenverarbeitung\n  }\n  connect(onMessageReceived) {\n    if (this.stompClient && this.stompClient.connected) {\n      console.warn('WebSocket is already connected');\n      return;\n    }\n    this.onMessageReceived = onMessageReceived;\n    const token = localStorage.getItem('jwtToken');\n    if (!token) {\n      console.error('No JWT token found in localStorage');\n      return;\n    }\n    console.log('JWT Token:', token);\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({\n      Authorization: `Bearer ${token}`\n    }, () => {\n      console.log('Connected to WebSocket');\n      this.subscribe('/topic/category', 'category');\n      this.subscribe('/topic/task', 'task');\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.reconnect();\n    });\n  }\n  subscribe(destination, type) {\n    if (!this.stompClient) {\n      console.error('STOMP client is not initialized');\n      return;\n    }\n    this.stompClient.subscribe(destination, message => {\n      console.log(`Received ${type} message:`, message);\n      if (message.body) {\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          if (this.onMessageReceived) {\n            this.onMessageReceived(type, parsedMessage);\n          } else {\n            console.warn('No onMessageReceived callback set');\n          }\n        } catch (error) {\n          console.error(`Failed to parse ${type} message:`, error);\n        }\n      }\n    });\n  }\n  reconnect() {\n    console.log(`Attempting to reconnect in ${this.reconnectInterval / 1000} seconds...`);\n    setTimeout(() => this.connect(this.onMessageReceived), this.reconnectInterval);\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.stompClient = null;\n      });\n    } else {\n      console.warn('WebSocket client is not connected');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      console.log('Sending message to:', destination, message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('STOMP client is not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => webSocketService.sendMessage(destination, message);","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","reconnectInterval","onMessageReceived","connect","connected","console","warn","token","localStorage","getItem","error","log","socket","over","Authorization","subscribe","reconnect","destination","type","message","body","parsedMessage","JSON","parse","setTimeout","disconnect","sendMessage","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n        this.reconnectInterval = 5000; // Zeitspanne zum Wiederverbinden in Millisekunden\n        this.onMessageReceived = null; // Callback zur Nachrichtenverarbeitung\n    }\n\n    connect(onMessageReceived) {\n        if (this.stompClient && this.stompClient.connected) {\n            console.warn('WebSocket is already connected');\n            return;\n        }\n\n        this.onMessageReceived = onMessageReceived;\n\n        const token = localStorage.getItem('jwtToken');\n        if (!token) {\n            console.error('No JWT token found in localStorage');\n            return;\n        }\n        console.log('JWT Token:', token);\n\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n\n        this.stompClient.connect(\n            { Authorization: `Bearer ${token}` },\n            () => {\n                console.log('Connected to WebSocket');\n                this.subscribe('/topic/category', 'category');\n                this.subscribe('/topic/task', 'task');\n            },\n            (error) => {\n                console.error('Error connecting to WebSocket:', error);\n                this.reconnect();\n            }\n        );\n    }\n\n    subscribe(destination, type) {\n        if (!this.stompClient) {\n            console.error('STOMP client is not initialized');\n            return;\n        }\n\n        this.stompClient.subscribe(destination, (message) => {\n            console.log(`Received ${type} message:`, message);\n            if (message.body) {\n                try {\n                    const parsedMessage = JSON.parse(message.body);\n                    if (this.onMessageReceived) {\n                        this.onMessageReceived(type, parsedMessage);\n                    } else {\n                        console.warn('No onMessageReceived callback set');\n                    }\n                } catch (error) {\n                    console.error(`Failed to parse ${type} message:`, error);\n                }\n            }\n        });\n    }\n\n    reconnect() {\n        console.log(`Attempting to reconnect in ${this.reconnectInterval / 1000} seconds...`);\n        setTimeout(() => this.connect(this.onMessageReceived), this.reconnectInterval);\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n                this.stompClient = null;\n            });\n        } else {\n            console.warn('WebSocket client is not connected');\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            console.log('Sending message to:', destination, message);\n            this.stompClient.send(destination, {}, JSON.stringify(message));\n        } else {\n            console.error('STOMP client is not connected');\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => webSocketService.sendMessage(destination, message);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}