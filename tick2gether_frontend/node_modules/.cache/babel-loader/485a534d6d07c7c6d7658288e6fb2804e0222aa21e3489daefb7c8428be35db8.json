{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage } from './webSocketService';\nimport ToDo from './ToDo'; // Stellen Sie sicher, dass der Pfad korrekt ist\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToDoList = ({\n  userId\n}) => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const fetchTodos = useCallback(() => {\n    fetch(`/api/v1/task/getTasks?userId=${userId}`).then(response => response.json()).then(data => setTodos(data)).catch(error => console.error('Error fetching tasks:', error));\n  }, [userId]);\n  useEffect(() => {\n    connectWebSocket(userId, handleMessageReceived);\n    fetchTodos();\n    return () => {\n      disconnectWebSocket();\n    };\n  }, [userId, fetchTodos]);\n  const handleMessageReceived = useCallback(message => {\n    console.log(\"WebSocket message received:\", message);\n    if (message.type === 'TASK_UPDATE') {\n      updateTaskInState(message.task);\n    }\n  }, []);\n  const updateTaskInState = useCallback(updatedTask => {\n    setTodos(prevTodos => {\n      const todos = prevTodos.map(task => task.taskId === updatedTask.taskId ? updatedTask : task);\n      return todos;\n    });\n  }, []);\n  const handleCheckboxChange = useCallback(taskId => {\n    const task = todos.find(task => task.taskId === taskId);\n    if (task) {\n      const updatedTask = {\n        ...task,\n        completed: !task.completed\n      };\n      fetch(`/api/v1/task/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      }).then(response => response.json()).then(data => {\n        updateTaskInState(data);\n        sendWebSocketMessage('/app/updateTask', {\n          task: data\n        });\n      }).catch(error => console.error('Error updating task:', error));\n    }\n  }, [todos, updateTaskInState]);\n  const handleDeleteClick = useCallback(taskId => {\n    // API-Aufruf zum Löschen der Aufgabe\n    fetch(`/api/v1/task/delete/${taskId}`, {\n      method: 'DELETE'\n    }).then(() => {\n      setTodos(prevTodos => prevTodos.filter(task => task.taskId !== taskId));\n      sendWebSocketMessage('/app/deleteTask', {\n        taskId\n      });\n    }).catch(error => console.error('Error deleting task:', error));\n  }, []);\n  const handleDateChange = useCallback((taskId, newDate) => {\n    const task = todos.find(task => task.taskId === taskId);\n    if (task) {\n      const updatedTask = {\n        ...task,\n        planDate: newDate\n      };\n      fetch(`/api/v1/task/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      }).then(response => response.json()).then(data => {\n        updateTaskInState(data);\n        sendWebSocketMessage('/app/updateTask', {\n          task: data\n        });\n      }).catch(error => console.error('Error updating task date:', error));\n    }\n  }, [todos, updateTaskInState]);\n  const onEditTodo = useCallback(todo => {\n    // Funktion zum Bearbeiten der Aufgabe\n    console.log('Edit todo:', todo);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(ToDo, {\n        todo: todo,\n        handleCheckboxChange: () => handleCheckboxChange(todo.taskId),\n        handleTodoClick: () => setSelectedTodoId(todo.taskId === selectedTodoId ? null : todo.taskId),\n        handleDelete: () => handleDeleteClick(todo.taskId),\n        handleEditClick: () => onEditTodo(todo),\n        isSelected: todo.taskId === selectedTodoId,\n        onDateChange: handleDateChange,\n        isDeleteMode: isDeleteMode,\n        userId: userId\n      }, todo.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(ToDoList, \"+mRYczUQARHoRKP6QqUO39+Ksyw=\");\n_c = ToDoList;\nexport default ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","connectWebSocket","disconnectWebSocket","sendWebSocketMessage","ToDo","jsxDEV","_jsxDEV","ToDoList","userId","_s","todos","setTodos","selectedTodoId","setSelectedTodoId","isDeleteMode","setIsDeleteMode","fetchTodos","fetch","then","response","json","data","catch","error","console","handleMessageReceived","message","log","type","updateTaskInState","task","updatedTask","prevTodos","map","taskId","handleCheckboxChange","find","completed","method","headers","body","JSON","stringify","handleDeleteClick","filter","handleDateChange","newDate","planDate","onEditTodo","todo","children","fileName","_jsxFileName","lineNumber","columnNumber","handleTodoClick","handleDelete","handleEditClick","isSelected","onDateChange","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage } from './webSocketService';\nimport ToDo from './ToDo'; // Stellen Sie sicher, dass der Pfad korrekt ist\n\nconst ToDoList = ({ userId }) => {\n  const [todos, setTodos] = useState([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n\n  const fetchTodos = useCallback(() => {\n    fetch(`/api/v1/task/getTasks?userId=${userId}`)\n      .then(response => response.json())\n      .then(data => setTodos(data))\n      .catch(error => console.error('Error fetching tasks:', error));\n  }, [userId]);\n\n  useEffect(() => {\n    connectWebSocket(userId, handleMessageReceived);\n    fetchTodos();\n\n    return () => {\n      disconnectWebSocket();\n    };\n  }, [userId, fetchTodos]);\n\n  const handleMessageReceived = useCallback((message) => {\n    console.log(\"WebSocket message received:\", message);\n    if (message.type === 'TASK_UPDATE') {\n      updateTaskInState(message.task);\n    }\n  }, []);\n\n  const updateTaskInState = useCallback((updatedTask) => {\n    setTodos(prevTodos => {\n      const todos = prevTodos.map(task =>\n        task.taskId === updatedTask.taskId ? updatedTask : task\n      );\n      return todos;\n    });\n  }, []);\n\n  const handleCheckboxChange = useCallback((taskId) => {\n    const task = todos.find(task => task.taskId === taskId);\n    if (task) {\n      const updatedTask = { ...task, completed: !task.completed };\n\n      fetch(`/api/v1/task/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedTask),\n      })\n        .then(response => response.json())\n        .then(data => {\n          updateTaskInState(data);\n          sendWebSocketMessage('/app/updateTask', { task: data });\n        })\n        .catch(error => console.error('Error updating task:', error));\n    }\n  }, [todos, updateTaskInState]);\n\n  const handleDeleteClick = useCallback((taskId) => {\n    // API-Aufruf zum Löschen der Aufgabe\n    fetch(`/api/v1/task/delete/${taskId}`, {\n      method: 'DELETE',\n    })\n      .then(() => {\n        setTodos(prevTodos => prevTodos.filter(task => task.taskId !== taskId));\n        sendWebSocketMessage('/app/deleteTask', { taskId });\n      })\n      .catch(error => console.error('Error deleting task:', error));\n  }, []);\n\n  const handleDateChange = useCallback((taskId, newDate) => {\n    const task = todos.find(task => task.taskId === taskId);\n    if (task) {\n      const updatedTask = { ...task, planDate: newDate };\n\n      fetch(`/api/v1/task/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedTask),\n      })\n        .then(response => response.json())\n        .then(data => {\n          updateTaskInState(data);\n          sendWebSocketMessage('/app/updateTask', { task: data });\n        })\n        .catch(error => console.error('Error updating task date:', error));\n    }\n  }, [todos, updateTaskInState]);\n\n  const onEditTodo = useCallback((todo) => {\n    // Funktion zum Bearbeiten der Aufgabe\n    console.log('Edit todo:', todo);\n  }, []);\n\n  return (\n    <div>\n      <h1>To-Do List</h1>\n      <ul>\n        {todos.map(todo => (\n          <ToDo\n            key={todo.taskId}\n            todo={todo}\n            handleCheckboxChange={() => handleCheckboxChange(todo.taskId)}\n            handleTodoClick={() => setSelectedTodoId(todo.taskId === selectedTodoId ? null : todo.taskId)}\n            handleDelete={() => handleDeleteClick(todo.taskId)}\n            handleEditClick={() => onEditTodo(todo)}\n            isSelected={todo.taskId === selectedTodoId}\n            onDateChange={handleDateChange}\n            isDeleteMode={isDeleteMode}\n            userId={userId}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ToDoList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,oBAAoB,QAAQ,oBAAoB;AAChG,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMiB,UAAU,GAAGhB,WAAW,CAAC,MAAM;IACnCiB,KAAK,CAAC,gCAAgCT,MAAM,EAAE,CAAC,CAC5CU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIV,QAAQ,CAACU,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EAClE,CAAC,EAAE,CAACf,MAAM,CAAC,CAAC;EAEZV,SAAS,CAAC,MAAM;IACdG,gBAAgB,CAACO,MAAM,EAAEiB,qBAAqB,CAAC;IAC/CT,UAAU,CAAC,CAAC;IAEZ,OAAO,MAAM;MACXd,mBAAmB,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACM,MAAM,EAAEQ,UAAU,CAAC,CAAC;EAExB,MAAMS,qBAAqB,GAAGzB,WAAW,CAAE0B,OAAO,IAAK;IACrDF,OAAO,CAACG,GAAG,CAAC,6BAA6B,EAAED,OAAO,CAAC;IACnD,IAAIA,OAAO,CAACE,IAAI,KAAK,aAAa,EAAE;MAClCC,iBAAiB,CAACH,OAAO,CAACI,IAAI,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,iBAAiB,GAAG7B,WAAW,CAAE+B,WAAW,IAAK;IACrDpB,QAAQ,CAACqB,SAAS,IAAI;MACpB,MAAMtB,KAAK,GAAGsB,SAAS,CAACC,GAAG,CAACH,IAAI,IAC9BA,IAAI,CAACI,MAAM,KAAKH,WAAW,CAACG,MAAM,GAAGH,WAAW,GAAGD,IACrD,CAAC;MACD,OAAOpB,KAAK;IACd,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMyB,oBAAoB,GAAGnC,WAAW,CAAEkC,MAAM,IAAK;IACnD,MAAMJ,IAAI,GAAGpB,KAAK,CAAC0B,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACI,MAAM,KAAKA,MAAM,CAAC;IACvD,IAAIJ,IAAI,EAAE;MACR,MAAMC,WAAW,GAAG;QAAE,GAAGD,IAAI;QAAEO,SAAS,EAAE,CAACP,IAAI,CAACO;MAAU,CAAC;MAE3DpB,KAAK,CAAC,qBAAqB,EAAE;QAC3BqB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,WAAW;MAClC,CAAC,CAAC,CACCb,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACZQ,iBAAiB,CAACR,IAAI,CAAC;QACvBlB,oBAAoB,CAAC,iBAAiB,EAAE;UAAE2B,IAAI,EAAET;QAAK,CAAC,CAAC;MACzD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;IACjE;EACF,CAAC,EAAE,CAACb,KAAK,EAAEmB,iBAAiB,CAAC,CAAC;EAE9B,MAAMc,iBAAiB,GAAG3C,WAAW,CAAEkC,MAAM,IAAK;IAChD;IACAjB,KAAK,CAAC,uBAAuBiB,MAAM,EAAE,EAAE;MACrCI,MAAM,EAAE;IACV,CAAC,CAAC,CACCpB,IAAI,CAAC,MAAM;MACVP,QAAQ,CAACqB,SAAS,IAAIA,SAAS,CAACY,MAAM,CAACd,IAAI,IAAIA,IAAI,CAACI,MAAM,KAAKA,MAAM,CAAC,CAAC;MACvE/B,oBAAoB,CAAC,iBAAiB,EAAE;QAAE+B;MAAO,CAAC,CAAC;IACrD,CAAC,CAAC,CACDZ,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsB,gBAAgB,GAAG7C,WAAW,CAAC,CAACkC,MAAM,EAAEY,OAAO,KAAK;IACxD,MAAMhB,IAAI,GAAGpB,KAAK,CAAC0B,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACI,MAAM,KAAKA,MAAM,CAAC;IACvD,IAAIJ,IAAI,EAAE;MACR,MAAMC,WAAW,GAAG;QAAE,GAAGD,IAAI;QAAEiB,QAAQ,EAAED;MAAQ,CAAC;MAElD7B,KAAK,CAAC,qBAAqB,EAAE;QAC3BqB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,WAAW;MAClC,CAAC,CAAC,CACCb,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACZQ,iBAAiB,CAACR,IAAI,CAAC;QACvBlB,oBAAoB,CAAC,iBAAiB,EAAE;UAAE2B,IAAI,EAAET;QAAK,CAAC,CAAC;MACzD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;IACtE;EACF,CAAC,EAAE,CAACb,KAAK,EAAEmB,iBAAiB,CAAC,CAAC;EAE9B,MAAMmB,UAAU,GAAGhD,WAAW,CAAEiD,IAAI,IAAK;IACvC;IACAzB,OAAO,CAACG,GAAG,CAAC,YAAY,EAAEsB,IAAI,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3C,OAAA;IAAA4C,QAAA,gBACE5C,OAAA;MAAA4C,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBhD,OAAA;MAAA4C,QAAA,EACGxC,KAAK,CAACuB,GAAG,CAACgB,IAAI,iBACb3C,OAAA,CAACF,IAAI;QAEH6C,IAAI,EAAEA,IAAK;QACXd,oBAAoB,EAAEA,CAAA,KAAMA,oBAAoB,CAACc,IAAI,CAACf,MAAM,CAAE;QAC9DqB,eAAe,EAAEA,CAAA,KAAM1C,iBAAiB,CAACoC,IAAI,CAACf,MAAM,KAAKtB,cAAc,GAAG,IAAI,GAAGqC,IAAI,CAACf,MAAM,CAAE;QAC9FsB,YAAY,EAAEA,CAAA,KAAMb,iBAAiB,CAACM,IAAI,CAACf,MAAM,CAAE;QACnDuB,eAAe,EAAEA,CAAA,KAAMT,UAAU,CAACC,IAAI,CAAE;QACxCS,UAAU,EAAET,IAAI,CAACf,MAAM,KAAKtB,cAAe;QAC3C+C,YAAY,EAAEd,gBAAiB;QAC/B/B,YAAY,EAAEA,YAAa;QAC3BN,MAAM,EAAEA;MAAO,GATVyC,IAAI,CAACf,MAAM;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUjB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC7C,EAAA,CArHIF,QAAQ;AAAAqD,EAAA,GAARrD,QAAQ;AAuHd,eAAeA,QAAQ;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}