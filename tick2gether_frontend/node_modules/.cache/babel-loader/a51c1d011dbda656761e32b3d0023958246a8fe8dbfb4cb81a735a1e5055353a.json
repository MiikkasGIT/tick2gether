{"ast":null,"code":"// Standard categories included within the same structure\nexport const STANDARD_CATEGORIES = [{\n  id: 'std-1',\n  name: 'All Tasks'\n}, {\n  id: 'std-2',\n  name: 'Today'\n}, {\n  id: 'std-3',\n  name: 'Planned'\n}, {\n  id: 'std-4',\n  name: 'Any Time'\n}, {\n  id: 'std-5',\n  name: 'Work'\n}, {\n  id: 'std-6',\n  name: 'Personal'\n}, {\n  id: 'std-7',\n  name: 'Logbook'\n}];\nexport const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  const allCategories = [...categories, ...STANDARD_CATEGORIES];\n  allCategories.forEach(category => {\n    categorizedTasks[category.id] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const {\n      categoryId,\n      completed,\n      planDate\n    } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (true) {\n      case categoryId !== 'std-7':\n        categorizedTasks['std-1'].push(task); // All Tasks (excluding Logbook)\n        break;\n      case completed:\n        categorizedTasks['std-7'].push(task); // Logbook\n        break;\n      case categoryId === 'std-2':\n        categorizedTasks['std-2'].push(task); // Today\n        break;\n      case planDate:\n        categorizedTasks['std-3'].push(task); // Planned\n        break;\n      case categoryId === 'std-4':\n        categorizedTasks['std-4'].push(task); // Any Time\n        break;\n      case categoryId === 'std-5':\n        categorizedTasks['std-5'].push(task); // Work\n        break;\n      case categoryId === 'std-6':\n        categorizedTasks['std-6'].push(task); // Personal\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n  return categorizedTasks;\n};","map":{"version":3,"names":["STANDARD_CATEGORIES","id","name","categorizeTasks","tasks","categories","categorizedTasks","allCategories","forEach","category","task","categoryId","completed","planDate","console","log","taskId","push"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["// Standard categories included within the same structure\nexport const STANDARD_CATEGORIES = [\n  { id: 'std-1', name: 'All Tasks' },\n  { id: 'std-2', name: 'Today' },\n  { id: 'std-3', name: 'Planned' },\n  { id: 'std-4', name: 'Any Time' },\n  { id: 'std-5', name: 'Work' },\n  { id: 'std-6', name: 'Personal' },\n  { id: 'std-7', name: 'Logbook' },\n];\n\nexport const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  const allCategories = [...categories, ...STANDARD_CATEGORIES];\n  allCategories.forEach(category => {\n    categorizedTasks[category.id] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const { categoryId, completed, planDate } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (true) {\n      case categoryId !== 'std-7':\n        categorizedTasks['std-1'].push(task); // All Tasks (excluding Logbook)\n        break;\n      case completed:\n        categorizedTasks['std-7'].push(task); // Logbook\n        break;\n      case categoryId === 'std-2':\n        categorizedTasks['std-2'].push(task); // Today\n        break;\n      case planDate:\n        categorizedTasks['std-3'].push(task); // Planned\n        break;\n      case categoryId === 'std-4':\n        categorizedTasks['std-4'].push(task); // Any Time\n        break;\n      case categoryId === 'std-5':\n        categorizedTasks['std-5'].push(task); // Work\n        break;\n      case categoryId === 'std-6':\n        categorizedTasks['std-6'].push(task); // Personal\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,mBAAmB,GAAG,CACjC;EAAEC,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAY,CAAC,EAClC;EAAED,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAQ,CAAC,EAC9B;EAAED,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAU,CAAC,EAChC;EAAED,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAW,CAAC,EACjC;EAAED,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAO,CAAC,EAC7B;EAAED,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAW,CAAC,EACjC;EAAED,EAAE,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAU,CAAC,CACjC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACA,MAAMC,aAAa,GAAG,CAAC,GAAGF,UAAU,EAAE,GAAGL,mBAAmB,CAAC;EAC7DO,aAAa,CAACC,OAAO,CAACC,QAAQ,IAAI;IAChCH,gBAAgB,CAACG,QAAQ,CAACR,EAAE,CAAC,GAAG,EAAE;EACpC,CAAC,CAAC;;EAEF;EACAG,KAAK,CAACI,OAAO,CAACE,IAAI,IAAI;IACpB,MAAM;MAAEC,UAAU;MAAEC,SAAS;MAAEC;IAAS,CAAC,GAAGH,IAAI;;IAEhD;IACAI,OAAO,CAACC,GAAG,CAAC,4BAA4BL,IAAI,CAACM,MAAM,iBAAiBL,UAAU,EAAE,CAAC;;IAEjF;IACA,IAAI,CAACL,gBAAgB,CAACK,UAAU,CAAC,EAAE;MACjCL,gBAAgB,CAACK,UAAU,CAAC,GAAG,EAAE;IACnC;IACAL,gBAAgB,CAACK,UAAU,CAAC,CAACM,IAAI,CAACP,IAAI,CAAC;;IAEvC;IACA,QAAQ,IAAI;MACV,KAAKC,UAAU,KAAK,OAAO;QACzBL,gBAAgB,CAAC,OAAO,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtC;MACF,KAAKE,SAAS;QACZN,gBAAgB,CAAC,OAAO,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtC;MACF,KAAKC,UAAU,KAAK,OAAO;QACzBL,gBAAgB,CAAC,OAAO,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtC;MACF,KAAKG,QAAQ;QACXP,gBAAgB,CAAC,OAAO,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtC;MACF,KAAKC,UAAU,KAAK,OAAO;QACzBL,gBAAgB,CAAC,OAAO,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtC;MACF,KAAKC,UAAU,KAAK,OAAO;QACzBL,gBAAgB,CAAC,OAAO,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtC;MACF,KAAKC,UAAU,KAAK,OAAO;QACzBL,gBAAgB,CAAC,OAAO,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QACtC;MACF;QACE;IACJ;EACF,CAAC,CAAC;;EAEF;EACAI,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAET,gBAAgB,CAAC;EAEnD,OAAOA,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}