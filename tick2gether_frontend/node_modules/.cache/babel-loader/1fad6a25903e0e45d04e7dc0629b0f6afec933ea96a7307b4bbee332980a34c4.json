{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/WebSocketTestComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = 'http://localhost:8080/ws';\nconst WebSocketTestComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [task, setTask] = useState({\n    taskId: 1,\n    text: 'Test Task',\n    userId: 1,\n    categoryId: 1\n  });\n  const stompClient = useRef(null);\n  const connectWebSocket = useCallback(() => {\n    const socket = new SockJS(SOCKET_URL);\n    stompClient.current = Stomp.over(socket);\n    const token = localStorage.getItem('jwtToken');\n    const headers = token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n    stompClient.current.connect(headers, () => {\n      console.log('Connected to WebSocket');\n\n      // Subscribe to user-specific queue for tasks\n      stompClient.current.subscribe('/user/1/queue/tasks', message => {\n        handleWebSocketMessage(message);\n      });\n      console.log(`Subscribed to /user/1/queue/tasks`);\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => connectWebSocket(), 5000); // Retry connection\n    });\n  }, []);\n  const handleWebSocketMessage = message => {\n    console.log('Received raw message: ', message);\n    if (message.body) {\n      try {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Parsed message: ', parsedMessage);\n        setMessages(prevMessages => [...prevMessages, parsedMessage]);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    } else {\n      console.error('Message body is missing or undefined');\n    }\n  };\n  const disconnectWebSocket = useCallback(() => {\n    if (stompClient.current) {\n      stompClient.current.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }, []);\n  useEffect(() => {\n    connectWebSocket();\n    return () => {\n      disconnectWebSocket();\n    };\n  }, [connectWebSocket, disconnectWebSocket]);\n  const sendTestMessage = () => {\n    const message = {\n      taskId: 1,\n      text: 'Test Task',\n      userId: 1,\n      categoryId: 1\n    };\n    sendWebSocketMessage(`/app/sendTestMessage/1`, message); // Sending to user ID 1\n  };\n  const sendWebSocketMessage = (destination, message) => {\n    if (stompClient.current && stompClient.current.connected) {\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? {\n        Authorization: `Bearer ${token}`\n      } : {};\n      console.log('Sending message to', destination);\n      try {\n        stompClient.current.send(destination, headers, JSON.stringify(message));\n      } catch (error) {\n        console.error('Failed to send WebSocket message:', error);\n      }\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"WebSocket Test Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendTestMessage,\n      children: \"Send Test Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: JSON.stringify(message)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketTestComponent, \"1/wxNoiCkYpP88devrOz/Ld4GRs=\");\n_c = WebSocketTestComponent;\nexport default WebSocketTestComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketTestComponent\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","Stomp","SockJS","jsxDEV","_jsxDEV","SOCKET_URL","WebSocketTestComponent","_s","messages","setMessages","task","setTask","taskId","text","userId","categoryId","stompClient","connectWebSocket","socket","current","over","token","localStorage","getItem","headers","Authorization","connect","console","log","subscribe","message","handleWebSocketMessage","error","setTimeout","body","parsedMessage","JSON","parse","prevMessages","disconnectWebSocket","disconnect","sendTestMessage","sendWebSocketMessage","destination","connected","send","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/WebSocketTestComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nconst WebSocketTestComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [task, setTask] = useState({ taskId: 1, text: 'Test Task', userId: 1, categoryId: 1 });\n  const stompClient = useRef(null);\n\n  const connectWebSocket = useCallback(() => {\n    const socket = new SockJS(SOCKET_URL);\n    stompClient.current = Stomp.over(socket);\n\n    const token = localStorage.getItem('jwtToken');\n    const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n    stompClient.current.connect(headers, () => {\n      console.log('Connected to WebSocket');\n\n      // Subscribe to user-specific queue for tasks\n      stompClient.current.subscribe('/user/1/queue/tasks', (message) => {\n        handleWebSocketMessage(message);\n      });\n      console.log(`Subscribed to /user/1/queue/tasks`);\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => connectWebSocket(), 5000); // Retry connection\n    });\n  }, []);\n\n  const handleWebSocketMessage = (message) => {\n    console.log('Received raw message: ', message);\n    if (message.body) {\n      try {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Parsed message: ', parsedMessage);\n        setMessages((prevMessages) => [...prevMessages, parsedMessage]);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    } else {\n      console.error('Message body is missing or undefined');\n    }\n  };\n\n  const disconnectWebSocket = useCallback(() => {\n    if (stompClient.current) {\n      stompClient.current.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    connectWebSocket();\n\n    return () => {\n      disconnectWebSocket();\n    };\n  }, [connectWebSocket, disconnectWebSocket]);\n\n  const sendTestMessage = () => {\n    const message = { taskId: 1, text: 'Test Task', userId: 1, categoryId: 1 };\n    sendWebSocketMessage(`/app/sendTestMessage/1`, message); // Sending to user ID 1\n  };\n\n  const sendWebSocketMessage = (destination, message) => {\n    if (stompClient.current && stompClient.current.connected) {\n      const token = localStorage.getItem('jwtToken');\n      const headers = token ? { Authorization: `Bearer ${token}` } : {};\n      console.log('Sending message to', destination);\n      try {\n        stompClient.current.send(destination, headers, JSON.stringify(message));\n      } catch (error) {\n        console.error('Failed to send WebSocket message:', error);\n      }\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  };\n\n  return (\n    <div>\n      <h2>WebSocket Test Component</h2>\n      <button onClick={sendTestMessage}>Send Test Message</button>\n      <ul>\n        {messages.map((message, index) => (\n          <li key={index}>{JSON.stringify(message)}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default WebSocketTestComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACvE,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,MAAM,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,UAAU,GAAG,0BAA0B;AAE7C,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC;IAAEc,MAAM,EAAE,CAAC;IAAEC,IAAI,EAAE,WAAW;IAAEC,MAAM,EAAE,CAAC;IAAEC,UAAU,EAAE;EAAE,CAAC,CAAC;EAC5F,MAAMC,WAAW,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAEhC,MAAMiB,gBAAgB,GAAGlB,WAAW,CAAC,MAAM;IACzC,MAAMmB,MAAM,GAAG,IAAIhB,MAAM,CAACG,UAAU,CAAC;IACrCW,WAAW,CAACG,OAAO,GAAGlB,KAAK,CAACmB,IAAI,CAACF,MAAM,CAAC;IAExC,MAAMG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,MAAMC,OAAO,GAAGH,KAAK,GAAG;MAAEI,aAAa,EAAE,UAAUJ,KAAK;IAAG,CAAC,GAAG,CAAC,CAAC;IAEjEL,WAAW,CAACG,OAAO,CAACO,OAAO,CAACF,OAAO,EAAE,MAAM;MACzCG,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;MAErC;MACAZ,WAAW,CAACG,OAAO,CAACU,SAAS,CAAC,qBAAqB,EAAGC,OAAO,IAAK;QAChEC,sBAAsB,CAACD,OAAO,CAAC;MACjC,CAAC,CAAC;MACFH,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC,EAAGI,KAAK,IAAK;MACZL,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDC,UAAU,CAAC,MAAMhB,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,sBAAsB,GAAID,OAAO,IAAK;IAC1CH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,OAAO,CAAC;IAC9C,IAAIA,OAAO,CAACI,IAAI,EAAE;MAChB,IAAI;QACF,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACP,OAAO,CAACI,IAAI,CAAC;QAC9CP,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEO,aAAa,CAAC;QAC9C1B,WAAW,CAAE6B,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,aAAa,CAAC,CAAC;MACjE,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF,CAAC,MAAM;MACLL,OAAO,CAACK,KAAK,CAAC,sCAAsC,CAAC;IACvD;EACF,CAAC;EAED,MAAMO,mBAAmB,GAAGxC,WAAW,CAAC,MAAM;IAC5C,IAAIiB,WAAW,CAACG,OAAO,EAAE;MACvBH,WAAW,CAACG,OAAO,CAACqB,UAAU,CAAC,MAAM;QACnCb,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC5C,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN/B,SAAS,CAAC,MAAM;IACdoB,gBAAgB,CAAC,CAAC;IAElB,OAAO,MAAM;MACXsB,mBAAmB,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACtB,gBAAgB,EAAEsB,mBAAmB,CAAC,CAAC;EAE3C,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMX,OAAO,GAAG;MAAElB,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,WAAW;MAAEC,MAAM,EAAE,CAAC;MAAEC,UAAU,EAAE;IAAE,CAAC;IAC1E2B,oBAAoB,CAAC,wBAAwB,EAAEZ,OAAO,CAAC,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMY,oBAAoB,GAAGA,CAACC,WAAW,EAAEb,OAAO,KAAK;IACrD,IAAId,WAAW,CAACG,OAAO,IAAIH,WAAW,CAACG,OAAO,CAACyB,SAAS,EAAE;MACxD,MAAMvB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9C,MAAMC,OAAO,GAAGH,KAAK,GAAG;QAAEI,aAAa,EAAE,UAAUJ,KAAK;MAAG,CAAC,GAAG,CAAC,CAAC;MACjEM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEe,WAAW,CAAC;MAC9C,IAAI;QACF3B,WAAW,CAACG,OAAO,CAAC0B,IAAI,CAACF,WAAW,EAAEnB,OAAO,EAAEY,IAAI,CAACU,SAAS,CAAChB,OAAO,CAAC,CAAC;MACzE,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC,MAAM;MACLL,OAAO,CAACK,KAAK,CAAC,4BAA4B,CAAC;IAC7C;EACF,CAAC;EAED,oBACE5B,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAA2C,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjC/C,OAAA;MAAQgD,OAAO,EAAEX,eAAgB;MAAAM,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5D/C,OAAA;MAAA2C,QAAA,EACGvC,QAAQ,CAAC6C,GAAG,CAAC,CAACvB,OAAO,EAAEwB,KAAK,kBAC3BlD,OAAA;QAAA2C,QAAA,EAAiBX,IAAI,CAACU,SAAS,CAAChB,OAAO;MAAC,GAA/BwB,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA+B,CAC9C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAxFID,sBAAsB;AAAAiD,EAAA,GAAtBjD,sBAAsB;AA0F5B,eAAeA,sBAAsB;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}