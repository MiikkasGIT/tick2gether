{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nlet stompClient = null;\nconst connectWebSocket = (userId, taskIds, categoryIds, onMessageReceived) => {\n  const socket = new SockJS(SOCKET_URL);\n  stompClient = Stomp.over(socket);\n  const token = localStorage.getItem('jwtToken');\n  const headers = token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n  stompClient.connect(headers, () => {\n    console.log('Connected to WebSocket');\n\n    // Verwenden Sie Backticks (`) anstelle von einfachen Anf端hrungszeichen (') f端r Template-Strings\n    stompClient.subscribe('/topic/tasks', message => handleMessage(message, onMessageReceived));\n    stompClient.subscribe(`/user/${userId}/queue/tasks`, message => handleMessage(message, onMessageReceived));\n  }, error => {\n    console.error('Error connecting to WebSocket:', error);\n    setTimeout(() => connectWebSocket(userId, taskIds, categoryIds, onMessageReceived), 5000); // Retry connection\n  });\n};\nconst handleMessage = (message, onMessageReceived) => {\n  if (message.body) {\n    try {\n      const parsedMessage = JSON.parse(message.body);\n      onMessageReceived(parsedMessage);\n    } catch (error) {\n      console.error('Failed to parse WebSocket message:', error);\n    }\n  }\n};\nconst disconnectWebSocket = () => {\n  if (stompClient) {\n    stompClient.disconnect(() => {\n      console.log('Disconnected from WebSocket');\n    });\n  }\n};\nconst sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    const token = localStorage.getItem('jwtToken');\n    const headers = token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n    console.log('Sending message to', destination);\n    try {\n      stompClient.send(destination, headers, JSON.stringify(message));\n    } catch (error) {\n      console.error('Failed to send WebSocket message:', error);\n    }\n  }\n};\nexport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage };\nexport const sendUpdateTaskMessage = taskDTO => {\n  var _taskDTO$completed;\n  taskDTO.completed = (_taskDTO$completed = taskDTO.completed) !== null && _taskDTO$completed !== void 0 ? _taskDTO$completed : false;\n  console.log('Sending update task message:', taskDTO);\n  sendWebSocketMessage(`/app/updateTask/${taskDTO.taskId}`, {\n    ...taskDTO,\n    type: 'TASK_UPDATE'\n  });\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","stompClient","connectWebSocket","userId","taskIds","categoryIds","onMessageReceived","socket","over","token","localStorage","getItem","headers","Authorization","connect","console","log","subscribe","message","handleMessage","error","setTimeout","body","parsedMessage","JSON","parse","disconnectWebSocket","disconnect","sendWebSocketMessage","destination","connected","send","stringify","sendUpdateTaskMessage","taskDTO","_taskDTO$completed","completed","taskId","type"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nlet stompClient = null;\n\nconst connectWebSocket = (userId, taskIds, categoryIds, onMessageReceived) => {\n  const socket = new SockJS(SOCKET_URL);\n  stompClient = Stomp.over(socket);\n\n  const token = localStorage.getItem('jwtToken');\n  const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n  stompClient.connect(headers, () => {\n    console.log('Connected to WebSocket');\n\n    // Verwenden Sie Backticks (`) anstelle von einfachen Anf端hrungszeichen (') f端r Template-Strings\n    stompClient.subscribe('/topic/tasks', (message) => handleMessage(message, onMessageReceived));\n    stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => handleMessage(message, onMessageReceived));\n\n  }, (error) => {\n    console.error('Error connecting to WebSocket:', error);\n    setTimeout(() => connectWebSocket(userId, taskIds, categoryIds, onMessageReceived), 5000); // Retry connection\n  });\n};\n\nconst handleMessage = (message, onMessageReceived) => {\n  if (message.body) {\n    try {\n      const parsedMessage = JSON.parse(message.body);\n      onMessageReceived(parsedMessage);\n    } catch (error) {\n      console.error('Failed to parse WebSocket message:', error);\n    }\n  }\n};\n\nconst disconnectWebSocket = () => {\n  if (stompClient) {\n    stompClient.disconnect(() => {\n      console.log('Disconnected from WebSocket');\n    });\n  }\n};\n\nconst sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    const token = localStorage.getItem('jwtToken');\n    const headers = token ? { Authorization: `Bearer ${token}` } : {};\n    console.log('Sending message to', destination);\n    try {\n      stompClient.send(destination, headers, JSON.stringify(message));\n    } catch (error) {\n      console.error('Failed to send WebSocket message:', error);\n    }\n  }\n};\n\nexport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage };\n\nexport const sendUpdateTaskMessage = (taskDTO) => {\n  taskDTO.completed = taskDTO.completed ?? false;\n  console.log('Sending update task message:', taskDTO);\n  sendWebSocketMessage(`/app/updateTask/${taskDTO.taskId}`, { ...taskDTO, type: 'TASK_UPDATE' });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}