{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.reconnectInterval = 5000;\n    this.onMessageReceived = null;\n    this.connectPromise = null;\n  }\n  async connect(onMessageReceived) {\n    if (this.stompClient && this.stompClient.connected) {\n      console.warn('WebSocket is already connected');\n      return;\n    }\n    this.onMessageReceived = onMessageReceived;\n    this.connectPromise = new Promise((resolve, reject) => {\n      const token = localStorage.getItem('jwtToken');\n      console.log('JWT Token:', token);\n      try {\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n        this.stompClient.connect({\n          Authorization: `Bearer ${token}`\n        }, () => {\n          console.log('Connected to WebSocket');\n          this.connectPromise = null;\n          this.subscribe('/topic/category', 'category');\n          this.subscribe('/topic/task', 'task');\n          resolve();\n        }, error => {\n          console.error('Error connecting to WebSocket:', error);\n          this.connectPromise = null;\n          this.reconnect();\n          reject(error);\n        });\n      } catch (error) {\n        console.error('Unexpected error during WebSocket connection:', error);\n        this.connectPromise = null;\n        reject(error);\n      }\n    });\n    return this.connectPromise;\n  }\n  subscribe(destination, type) {\n    if (!this.stompClient) {\n      console.error('STOMP client is not initialized');\n      return;\n    }\n    this.stompClient.subscribe(destination, message => {\n      console.log(`Received ${type} message:`, message);\n      if (message.body) {\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          if (this.onMessageReceived) {\n            this.onMessageReceived(type, parsedMessage);\n          } else {\n            console.warn('No onMessageReceived callback set');\n          }\n        } catch (error) {\n          console.error(`Failed to parse ${type} message:`, error);\n        }\n      }\n    });\n  }\n  reconnect() {\n    console.log(`Attempting to reconnect in ${this.reconnectInterval / 1000} seconds...`);\n    setTimeout(() => this.connect(this.onMessageReceived), this.reconnectInterval);\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.stompClient = null;\n      });\n    } else {\n      console.warn('WebSocket client is not connected');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      console.log('Sending message to:', destination);\n      console.log('Message content:', JSON.stringify(message));\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('STOMP client is not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => webSocketService.sendMessage(destination, message);","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","reconnectInterval","onMessageReceived","connectPromise","connect","connected","console","warn","Promise","resolve","reject","token","localStorage","getItem","log","socket","over","Authorization","subscribe","error","reconnect","destination","type","message","body","parsedMessage","JSON","parse","setTimeout","disconnect","sendMessage","stringify","send","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n        this.reconnectInterval = 5000;\n        this.onMessageReceived = null;\n        this.connectPromise = null;\n    }\n\n    async connect(onMessageReceived) {\n        if (this.stompClient && this.stompClient.connected) {\n            console.warn('WebSocket is already connected');\n            return;\n        }\n\n        this.onMessageReceived = onMessageReceived;\n\n        this.connectPromise = new Promise((resolve, reject) => {\n            const token = localStorage.getItem('jwtToken');\n            console.log('JWT Token:', token);\n\n            try {\n                const socket = new SockJS(SOCKET_URL);\n                this.stompClient = Stomp.over(socket);\n\n                this.stompClient.connect(\n                    { Authorization: `Bearer ${token}` },\n                    () => {\n                        console.log('Connected to WebSocket');\n                        this.connectPromise = null;\n                        this.subscribe('/topic/category', 'category');\n                        this.subscribe('/topic/task', 'task');\n                        resolve();\n                    },\n                    (error) => {\n                        console.error('Error connecting to WebSocket:', error);\n                        this.connectPromise = null;\n                        this.reconnect();\n                        reject(error);\n                    }\n                );\n            } catch (error) {\n                console.error('Unexpected error during WebSocket connection:', error);\n                this.connectPromise = null;\n                reject(error);\n            }\n        });\n\n        return this.connectPromise;\n    }\n\n    subscribe(destination, type) {\n        if (!this.stompClient) {\n            console.error('STOMP client is not initialized');\n            return;\n        }\n\n        this.stompClient.subscribe(destination, (message) => {\n            console.log(`Received ${type} message:`, message);\n            if (message.body) {\n                try {\n                    const parsedMessage = JSON.parse(message.body);\n                    if (this.onMessageReceived) {\n                        this.onMessageReceived(type, parsedMessage);\n                    } else {\n                        console.warn('No onMessageReceived callback set');\n                    }\n                } catch (error) {\n                    console.error(`Failed to parse ${type} message:`, error);\n                }\n            }\n        });\n    }\n\n    reconnect() {\n        console.log(`Attempting to reconnect in ${this.reconnectInterval / 1000} seconds...`);\n        setTimeout(() => this.connect(this.onMessageReceived), this.reconnectInterval);\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n                this.stompClient = null;\n            });\n        } else {\n            console.warn('WebSocket client is not connected');\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            console.log('Sending message to:', destination);\n            console.log('Message content:', JSON.stringify(message));\n            this.stompClient.send(destination, {}, JSON.stringify(message));\n        } else {\n            console.error('STOMP client is not connected');\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => webSocketService.sendMessage(destination, message);\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,UAAU,GAAG,0BAA0B;AAE7C,MAAMC,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,cAAc,GAAG,IAAI;EAC9B;EAEA,MAAMC,OAAOA,CAACF,iBAAiB,EAAE;IAC7B,IAAI,IAAI,CAACF,WAAW,IAAI,IAAI,CAACA,WAAW,CAACK,SAAS,EAAE;MAChDC,OAAO,CAACC,IAAI,CAAC,gCAAgC,CAAC;MAC9C;IACJ;IAEA,IAAI,CAACL,iBAAiB,GAAGA,iBAAiB;IAE1C,IAAI,CAACC,cAAc,GAAG,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACnD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC9CP,OAAO,CAACQ,GAAG,CAAC,YAAY,EAAEH,KAAK,CAAC;MAEhC,IAAI;QACA,MAAMI,MAAM,GAAG,IAAInB,MAAM,CAACC,UAAU,CAAC;QACrC,IAAI,CAACG,WAAW,GAAGL,KAAK,CAACqB,IAAI,CAACD,MAAM,CAAC;QAErC,IAAI,CAACf,WAAW,CAACI,OAAO,CACpB;UAAEa,aAAa,EAAE,UAAUN,KAAK;QAAG,CAAC,EACpC,MAAM;UACFL,OAAO,CAACQ,GAAG,CAAC,wBAAwB,CAAC;UACrC,IAAI,CAACX,cAAc,GAAG,IAAI;UAC1B,IAAI,CAACe,SAAS,CAAC,iBAAiB,EAAE,UAAU,CAAC;UAC7C,IAAI,CAACA,SAAS,CAAC,aAAa,EAAE,MAAM,CAAC;UACrCT,OAAO,CAAC,CAAC;QACb,CAAC,EACAU,KAAK,IAAK;UACPb,OAAO,CAACa,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;UACtD,IAAI,CAAChB,cAAc,GAAG,IAAI;UAC1B,IAAI,CAACiB,SAAS,CAAC,CAAC;UAChBV,MAAM,CAACS,KAAK,CAAC;QACjB,CACJ,CAAC;MACL,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZb,OAAO,CAACa,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;QACrE,IAAI,CAAChB,cAAc,GAAG,IAAI;QAC1BO,MAAM,CAACS,KAAK,CAAC;MACjB;IACJ,CAAC,CAAC;IAEF,OAAO,IAAI,CAAChB,cAAc;EAC9B;EAEAe,SAASA,CAACG,WAAW,EAAEC,IAAI,EAAE;IACzB,IAAI,CAAC,IAAI,CAACtB,WAAW,EAAE;MACnBM,OAAO,CAACa,KAAK,CAAC,iCAAiC,CAAC;MAChD;IACJ;IAEA,IAAI,CAACnB,WAAW,CAACkB,SAAS,CAACG,WAAW,EAAGE,OAAO,IAAK;MACjDjB,OAAO,CAACQ,GAAG,CAAC,YAAYQ,IAAI,WAAW,EAAEC,OAAO,CAAC;MACjD,IAAIA,OAAO,CAACC,IAAI,EAAE;QACd,IAAI;UACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,IAAI,CAAC;UAC9C,IAAI,IAAI,CAACtB,iBAAiB,EAAE;YACxB,IAAI,CAACA,iBAAiB,CAACoB,IAAI,EAAEG,aAAa,CAAC;UAC/C,CAAC,MAAM;YACHnB,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC;UACrD;QACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;UACZb,OAAO,CAACa,KAAK,CAAC,mBAAmBG,IAAI,WAAW,EAAEH,KAAK,CAAC;QAC5D;MACJ;IACJ,CAAC,CAAC;EACN;EAEAC,SAASA,CAAA,EAAG;IACRd,OAAO,CAACQ,GAAG,CAAC,8BAA8B,IAAI,CAACb,iBAAiB,GAAG,IAAI,aAAa,CAAC;IACrF2B,UAAU,CAAC,MAAM,IAAI,CAACxB,OAAO,CAAC,IAAI,CAACF,iBAAiB,CAAC,EAAE,IAAI,CAACD,iBAAiB,CAAC;EAClF;EAEA4B,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC7B,WAAW,EAAE;MAClB,IAAI,CAACA,WAAW,CAAC6B,UAAU,CAAC,MAAM;QAC9BvB,OAAO,CAACQ,GAAG,CAAC,6BAA6B,CAAC;QAC1C,IAAI,CAACd,WAAW,GAAG,IAAI;MAC3B,CAAC,CAAC;IACN,CAAC,MAAM;MACHM,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC;IACrD;EACJ;EAEAuB,WAAWA,CAACT,WAAW,EAAEE,OAAO,EAAE;IAC9B,IAAI,IAAI,CAACvB,WAAW,IAAI,IAAI,CAACA,WAAW,CAACK,SAAS,EAAE;MAChDC,OAAO,CAACQ,GAAG,CAAC,qBAAqB,EAAEO,WAAW,CAAC;MAC/Cf,OAAO,CAACQ,GAAG,CAAC,kBAAkB,EAAEY,IAAI,CAACK,SAAS,CAACR,OAAO,CAAC,CAAC;MACxD,IAAI,CAACvB,WAAW,CAACgC,IAAI,CAACX,WAAW,EAAE,CAAC,CAAC,EAAEK,IAAI,CAACK,SAAS,CAACR,OAAO,CAAC,CAAC;IACnE,CAAC,MAAM;MACHjB,OAAO,CAACa,KAAK,CAAC,+BAA+B,CAAC;IAClD;EACJ;AACJ;AAEA,MAAMc,gBAAgB,GAAG,IAAInC,gBAAgB,CAAC,CAAC;AAE/C,OAAO,MAAMoC,gBAAgB,GAAIhC,iBAAiB,IAAK+B,gBAAgB,CAAC7B,OAAO,CAACF,iBAAiB,CAAC;AAClG,OAAO,MAAMiC,mBAAmB,GAAGA,CAAA,KAAMF,gBAAgB,CAACJ,UAAU,CAAC,CAAC;AACtE,OAAO,MAAMO,oBAAoB,GAAGA,CAACf,WAAW,EAAEE,OAAO,KAAKU,gBAAgB,CAACH,WAAW,CAACT,WAAW,EAAEE,OAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}