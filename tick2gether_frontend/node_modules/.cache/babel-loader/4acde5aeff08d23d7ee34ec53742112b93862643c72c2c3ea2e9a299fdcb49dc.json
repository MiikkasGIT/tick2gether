{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n    onConnect: frame => {\n      console.log('WebSocket connected');\n      try {\n        // Ensure the STOMP connection is ready before subscribing\n        if (stompClient.connected) {\n          console.log(userId);\n          stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n            const parsedMessage = JSON.parse(message.body);\n            console.log('Task message received for user:', userId, parsedMessage);\n            onTaskMessageReceived(parsedMessage);\n          });\n          console.log(`SUBSCRIBED to task topic: /user/${userId}/queue/tasks`);\n          stompClient.subscribe(`/user/${userId}/queue/categories`, message => {\n            const parsedMessage = JSON.parse(message.body);\n            console.log('Category message received for user:', userId, parsedMessage);\n            onCategoryMessageReceived(parsedMessage);\n          });\n          console.log(`SUBSCRIBED to category topic: /user/${userId}/queue/categories`);\n        } else {\n          console.error('STOMP connection not established');\n        }\n      } catch (error) {\n        console.error('Subscription error:', error);\n      }\n    },\n    onStompError: frame => {\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    },\n    onWebSocketClose: event => {\n      console.warn('WebSocket closed:', event);\n    },\n    onWebSocketError: error => {\n      console.error('WebSocket error:', error);\n    }\n  });\n  stompClient.activate();\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message)\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};","map":{"version":3,"names":["Client","SockJS","stompClient","connectWebSocket","userId","onTaskMessageReceived","onCategoryMessageReceived","socket","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","console","log","connected","subscribe","message","parsedMessage","JSON","parse","body","error","onStompError","headers","onWebSocketClose","event","warn","onWebSocketError","activate","disconnectWebSocket","deactivate","sendWebSocketMessage","destination","publish","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nlet stompClient = null;\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  \n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n    onConnect: (frame) => {\n      console.log('WebSocket connected');\n      try {\n        // Ensure the STOMP connection is ready before subscribing\n        if (stompClient.connected) {\n          console.log(userId);\n          stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n            const parsedMessage = JSON.parse(message.body);\n            console.log('Task message received for user:', userId, parsedMessage);\n            onTaskMessageReceived(parsedMessage);\n          });\n          console.log(`SUBSCRIBED to task topic: /user/${userId}/queue/tasks`);\n\n          stompClient.subscribe(`/user/${userId}/queue/categories`, (message) => {\n            const parsedMessage = JSON.parse(message.body);\n            console.log('Category message received for user:', userId, parsedMessage);\n            onCategoryMessageReceived(parsedMessage);\n          });\n          console.log(`SUBSCRIBED to category topic: /user/${userId}/queue/categories`);\n        } else {\n          console.error('STOMP connection not established');\n        }\n      } catch (error) {\n        console.error('Subscription error:', error);\n      }\n    },\n    onStompError: (frame) => {\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    },\n    onWebSocketClose: (event) => {\n      console.warn('WebSocket closed:', event);\n    },\n    onWebSocketError: (error) => {\n      console.error('WebSocket error:', error);\n    }\n  });\n\n  stompClient.activate();\n};\n\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message),\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}