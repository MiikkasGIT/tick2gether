{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000;\n    this.subscriptions = {};\n  }\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Bereits mit WebSocket verbunden');\n      return;\n    }\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Mit WebSocket verbunden:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, error => {\n      console.error('Fehler beim Verbinden mit WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe(`/user/${userId}/topic/tasks`, onTaskMessageReceived, `tasks-${userId}`);\n    this.subscribe(`/user/${userId}/topic/categories`, onCategoryMessageReceived, `categories-${userId}`);\n  }\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, message => {\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Fehler beim Parsen der ${subscriptionKey} Nachricht:`, error);\n        }\n      });\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        this.connected = false;\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/topic/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","subscriptions","connect","userId","onTaskMessageReceived","onCategoryMessageReceived","console","log","socket","over","frame","subscribeToTopics","error","setTimeout","subscribe","destination","callback","subscriptionKey","message","parsedMessage","JSON","parse","body","disconnect","sendMessage","send","stringify","sendWebSocketMessageToUser","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000;\n    this.subscriptions = {};\n  }\n\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.connected) {\n      console.log('Bereits mit WebSocket verbunden');\n      return;\n    }\n\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Mit WebSocket verbunden:', frame);\n      this.connected = true;\n      this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n    }, (error) => {\n      console.error('Fehler beim Verbinden mit WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(userId, onTaskMessageReceived, onCategoryMessageReceived), this.reconnectDelay);\n    });\n  }\n\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    this.subscribe(`/user/${userId}/topic/tasks`, onTaskMessageReceived, `tasks-${userId}`);\n    this.subscribe(`/user/${userId}/topic/categories`, onCategoryMessageReceived, `categories-${userId}`);\n  }\n\n  subscribe(destination, callback, subscriptionKey) {\n    if (!this.subscriptions[subscriptionKey]) {\n      this.subscriptions[subscriptionKey] = this.stompClient.subscribe(destination, (message) => {\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          callback(parsedMessage);\n        } catch (error) {\n          console.error(`Fehler beim Parsen der ${subscriptionKey} Nachricht:`, error);\n        }\n      });\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        this.connected = false;\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('WebSocket-Verbindung ist nicht hergestellt.');\n    }\n  }\n\n  sendWebSocketMessageToUser(userId, message) {\n    const destination = `/user/${userId}/topic/tasks`;\n    this.sendMessage(destination, message);\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n\nexport const sendWebSocketMessageToUser = (userId, message) => {\n  webSocketService.sendWebSocketMessageToUser(userId, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}