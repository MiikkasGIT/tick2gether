{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.stompClient.subscribe('/topic/tasks', message => {\n        onTaskMessageReceived(JSON.parse(message.body));\n      });\n      this.stompClient.subscribe('/topic/categories', message => {\n        onCategoryMessageReceived(JSON.parse(message.body));\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error); // Log connection errors\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\nexport default webSocketService;","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onTaskMessageReceived","onCategoryMessageReceived","socket","over","console","log","subscribe","message","JSON","parse","body","error","disconnect","sendMessage","destination","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n  \n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.stompClient.subscribe('/topic/tasks', (message) => {\n        onTaskMessageReceived(JSON.parse(message.body));\n      });\n      this.stompClient.subscribe('/topic/categories', (message) => {\n        onCategoryMessageReceived(JSON.parse(message.body));\n      });\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error); // Log connection errors\n    });\n  }\n  \n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n\nexport default webSocketService;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,UAAU,GAAG,0BAA0B;AAE7C,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEAC,OAAOA,CAACC,qBAAqB,EAAEC,yBAAyB,EAAE;IACxD,MAAMC,MAAM,GAAG,IAAIR,MAAM,CAACC,UAAU,CAAC;IACrC,IAAI,CAACG,WAAW,GAAGL,KAAK,CAACU,IAAI,CAACD,MAAM,CAAC;IAErC,IAAI,CAACJ,WAAW,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MACjCK,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAACP,WAAW,CAACQ,SAAS,CAAC,cAAc,EAAGC,OAAO,IAAK;QACtDP,qBAAqB,CAACQ,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;MACjD,CAAC,CAAC;MACF,IAAI,CAACZ,WAAW,CAACQ,SAAS,CAAC,mBAAmB,EAAGC,OAAO,IAAK;QAC3DN,yBAAyB,CAACO,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;MACrD,CAAC,CAAC;IACJ,CAAC,EAAGC,KAAK,IAAK;MACZP,OAAO,CAACO,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC;EACJ;EAGAC,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACd,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACc,UAAU,CAAC,CAAC;IAC/B;EACF;EAEAC,WAAWA,CAACC,WAAW,EAAEP,OAAO,EAAE;IAChC,IAAI,IAAI,CAACT,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACiB,IAAI,CAACD,WAAW,EAAE,CAAC,CAAC,EAAEN,IAAI,CAACQ,SAAS,CAACT,OAAO,CAAC,CAAC;IACjE;EACF;AACF;AAEA,MAAMU,gBAAgB,GAAG,IAAIrB,gBAAgB,CAAC,CAAC;AAE/C,OAAO,MAAMsB,gBAAgB,GAAGA,CAAClB,qBAAqB,EAAEC,yBAAyB,KAAK;EACpFgB,gBAAgB,CAAClB,OAAO,CAACC,qBAAqB,EAAEC,yBAAyB,CAAC;AAC5E,CAAC;AAED,OAAO,MAAMkB,mBAAmB,GAAGA,CAAA,KAAM;EACvCF,gBAAgB,CAACL,UAAU,CAAC,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMQ,oBAAoB,GAAGA,CAACN,WAAW,EAAEP,OAAO,KAAK;EAC5DU,gBAAgB,CAACJ,WAAW,CAACC,WAAW,EAAEP,OAAO,CAAC;AACpD,CAAC;AAED,eAAeU,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}