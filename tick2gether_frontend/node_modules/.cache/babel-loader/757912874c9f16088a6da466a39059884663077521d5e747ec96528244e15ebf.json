{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false; // Track connection state\n    this.taskSubscription = null; // Track subscriptions\n    this.categorySubscription = null;\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.connected = true; // Update connection state\n\n      // Ensure subscriptions are created only once\n      if (!this.taskSubscription) {\n        this.taskSubscription = this.stompClient.subscribe('/topic/tasks', message => {\n          onTaskMessageReceived(JSON.parse(message.body));\n        });\n      }\n      if (!this.categorySubscription) {\n        this.categorySubscription = this.stompClient.subscribe('/topic/categories', message => {\n          onCategoryMessageReceived(JSON.parse(message.body));\n        });\n      }\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false; // Update connection state on error\n      // Optionally handle reconnection logic here\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      if (this.taskSubscription) {\n        this.taskSubscription.unsubscribe();\n        this.taskSubscription = null;\n      }\n      if (this.categorySubscription) {\n        this.categorySubscription.unsubscribe();\n        this.categorySubscription = null;\n      }\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false; // Update connection state on disconnect\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}","map":{"version":3,"names":["WebSocketService","constructor","stompClient","connected","taskSubscription","categorySubscription","connect","onTaskMessageReceived","onCategoryMessageReceived","socket","SockJS","SOCKET_URL","Stomp","over","console","log","subscribe","message","JSON","parse","body","error","disconnect","unsubscribe","sendMessage","destination","send","stringify"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["class WebSocketService {\n    constructor() {\n      this.stompClient = null;\n      this.connected = false; // Track connection state\n      this.taskSubscription = null; // Track subscriptions\n      this.categorySubscription = null;\n    }\n  \n    connect(onTaskMessageReceived, onCategoryMessageReceived) {\n      const socket = new SockJS(SOCKET_URL);\n      this.stompClient = Stomp.over(socket);\n  \n      this.stompClient.connect({}, () => {\n        console.log('Connected to WebSocket');\n        this.connected = true; // Update connection state\n  \n        // Ensure subscriptions are created only once\n        if (!this.taskSubscription) {\n          this.taskSubscription = this.stompClient.subscribe('/topic/tasks', (message) => {\n            onTaskMessageReceived(JSON.parse(message.body));\n          });\n        }\n        if (!this.categorySubscription) {\n          this.categorySubscription = this.stompClient.subscribe('/topic/categories', (message) => {\n            onCategoryMessageReceived(JSON.parse(message.body));\n          });\n        }\n      }, (error) => {\n        console.error('Error connecting to WebSocket:', error);\n        this.connected = false; // Update connection state on error\n        // Optionally handle reconnection logic here\n      });\n    }\n  \n    disconnect() {\n      if (this.stompClient) {\n        if (this.taskSubscription) {\n          this.taskSubscription.unsubscribe();\n          this.taskSubscription = null;\n        }\n        if (this.categorySubscription) {\n          this.categorySubscription.unsubscribe();\n          this.categorySubscription = null;\n        }\n  \n        this.stompClient.disconnect(() => {\n          console.log('Disconnected from WebSocket');\n          this.connected = false; // Update connection state on disconnect\n        });\n      }\n    }\n  \n    sendMessage(destination, message) {\n      if (this.stompClient && this.connected) {\n        this.stompClient.send(destination, {}, JSON.stringify(message));\n      } else {\n        console.error('Cannot send message: WebSocket not connected');\n      }\n    }\n  }\n  "],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC,CAAC;IACxB,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAAC,CAAC;IAC9B,IAAI,CAACC,oBAAoB,GAAG,IAAI;EAClC;EAEAC,OAAOA,CAACC,qBAAqB,EAAEC,yBAAyB,EAAE;IACxD,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAU,CAAC;IACrC,IAAI,CAACT,WAAW,GAAGU,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC;IAErC,IAAI,CAACP,WAAW,CAACI,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MACjCQ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAACZ,SAAS,GAAG,IAAI,CAAC,CAAC;;MAEvB;MACA,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;QAC1B,IAAI,CAACA,gBAAgB,GAAG,IAAI,CAACF,WAAW,CAACc,SAAS,CAAC,cAAc,EAAGC,OAAO,IAAK;UAC9EV,qBAAqB,CAACW,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC;MACJ;MACA,IAAI,CAAC,IAAI,CAACf,oBAAoB,EAAE;QAC9B,IAAI,CAACA,oBAAoB,GAAG,IAAI,CAACH,WAAW,CAACc,SAAS,CAAC,mBAAmB,EAAGC,OAAO,IAAK;UACvFT,yBAAyB,CAACU,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC;MACJ;IACF,CAAC,EAAGC,KAAK,IAAK;MACZP,OAAO,CAACO,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,IAAI,CAAClB,SAAS,GAAG,KAAK,CAAC,CAAC;MACxB;IACF,CAAC,CAAC;EACJ;EAEAmB,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACpB,WAAW,EAAE;MACpB,IAAI,IAAI,CAACE,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAACmB,WAAW,CAAC,CAAC;QACnC,IAAI,CAACnB,gBAAgB,GAAG,IAAI;MAC9B;MACA,IAAI,IAAI,CAACC,oBAAoB,EAAE;QAC7B,IAAI,CAACA,oBAAoB,CAACkB,WAAW,CAAC,CAAC;QACvC,IAAI,CAAClB,oBAAoB,GAAG,IAAI;MAClC;MAEA,IAAI,CAACH,WAAW,CAACoB,UAAU,CAAC,MAAM;QAChCR,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C,IAAI,CAACZ,SAAS,GAAG,KAAK,CAAC,CAAC;MAC1B,CAAC,CAAC;IACJ;EACF;EAEAqB,WAAWA,CAACC,WAAW,EAAER,OAAO,EAAE;IAChC,IAAI,IAAI,CAACf,WAAW,IAAI,IAAI,CAACC,SAAS,EAAE;MACtC,IAAI,CAACD,WAAW,CAACwB,IAAI,CAACD,WAAW,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACS,SAAS,CAACV,OAAO,CAAC,CAAC;IACjE,CAAC,MAAM;MACLH,OAAO,CAACO,KAAK,CAAC,8CAA8C,CAAC;IAC/D;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}