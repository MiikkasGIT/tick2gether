{"ast":null,"code":"var _s = $RefreshSig$();\nimport { AddIcon, PersonalIcon, WorkIcon } from '../icons'; // Beispielhafte Symbole\n\nexport function useCategories(userId) {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const initializeCategories = useCallback(async () => {\n    try {\n      const fetchedCategories = await fetchCategories(userId);\n      const mappedCategories = fetchedCategories.map(category => ({\n        ...category,\n        id: category.categoryId,\n        icon: iconMap[category.name] || PersonalIcon // Beispielhafte Icons\n      }));\n      setCategories(mappedCategories);\n      if (mappedCategories.length > 0) {\n        setSelectedCategory(mappedCategories[0]);\n      }\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n    }\n  }, [userId]);\n  useEffect(() => {\n    if (userId) {\n      initializeCategories();\n    }\n  }, [initializeCategories, userId]);\n  const handleAddCategory = async newCategory => {\n    try {\n      const categoryExists = categories.some(cat => cat.name === newCategory.name);\n      if (categoryExists) {\n        console.warn('Category already exists:', newCategory);\n        return;\n      }\n      const data = await addCategory(newCategory);\n      const newCategoryObject = {\n        id: data.categoryId,\n        name: data.name,\n        icon: PersonalIcon // Beispielhaftes Symbol\n      };\n      sendWebSocketMessage(`/app/updateCategory/${newCategoryObject.id}`, {\n        type: 'CATEGORY_UPDATE',\n        category: newCategoryObject\n      });\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n  return {\n    categories,\n    selectedCategory,\n    setSelectedCategory,\n    handleAddCategory\n  };\n}\n_s(useCategories, \"20+HAYToqsy6zeZBvEAoNtNcH6w=\");","map":{"version":3,"names":["AddIcon","PersonalIcon","WorkIcon","useCategories","userId","_s","categories","setCategories","useState","selectedCategory","setSelectedCategory","initializeCategories","useCallback","fetchedCategories","fetchCategories","mappedCategories","map","category","id","categoryId","icon","iconMap","name","length","error","console","useEffect","handleAddCategory","newCategory","categoryExists","some","cat","warn","data","addCategory","newCategoryObject","sendWebSocketMessage","type","prevCategories"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/hooks/useCategories.js"],"sourcesContent":["import { AddIcon, PersonalIcon, WorkIcon } from '../icons'; // Beispielhafte Symbole\n\nexport function useCategories(userId) {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n\n  const initializeCategories = useCallback(async () => {\n    try {\n      const fetchedCategories = await fetchCategories(userId);\n      const mappedCategories = fetchedCategories.map(category => ({\n        ...category,\n        id: category.categoryId,\n        icon: iconMap[category.name] || PersonalIcon, // Beispielhafte Icons\n      }));\n      setCategories(mappedCategories);\n      if (mappedCategories.length > 0) {\n        setSelectedCategory(mappedCategories[0]);\n      }\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    if (userId) {\n      initializeCategories();\n    }\n  }, [initializeCategories, userId]);\n\n  const handleAddCategory = async (newCategory) => {\n    try {\n      const categoryExists = categories.some(cat => cat.name === newCategory.name);\n      if (categoryExists) {\n        console.warn('Category already exists:', newCategory);\n        return;\n      }\n      const data = await addCategory(newCategory);\n      const newCategoryObject = {\n        id: data.categoryId,\n        name: data.name,\n        icon: PersonalIcon, // Beispielhaftes Symbol\n      };\n      sendWebSocketMessage(`/app/updateCategory/${newCategoryObject.id}`, { type: 'CATEGORY_UPDATE', category: newCategoryObject });\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n\n  return {\n    categories,\n    selectedCategory,\n    setSelectedCategory,\n    handleAddCategory,\n  };\n}\n"],"mappings":";AAAA,SAASA,OAAO,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,UAAU,CAAC,CAAC;;AAE5D,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAE;EAAAC,EAAA;EACpC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAMG,oBAAoB,GAAGC,WAAW,CAAC,YAAY;IACnD,IAAI;MACF,MAAMC,iBAAiB,GAAG,MAAMC,eAAe,CAACV,MAAM,CAAC;MACvD,MAAMW,gBAAgB,GAAGF,iBAAiB,CAACG,GAAG,CAACC,QAAQ,KAAK;QAC1D,GAAGA,QAAQ;QACXC,EAAE,EAAED,QAAQ,CAACE,UAAU;QACvBC,IAAI,EAAEC,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAAC,IAAIrB,YAAY,CAAE;MAChD,CAAC,CAAC,CAAC;MACHM,aAAa,CAACQ,gBAAgB,CAAC;MAC/B,IAAIA,gBAAgB,CAACQ,MAAM,GAAG,CAAC,EAAE;QAC/Bb,mBAAmB,CAACK,gBAAgB,CAAC,CAAC,CAAC,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC,EAAE,CAACpB,MAAM,CAAC,CAAC;EAEZsB,SAAS,CAAC,MAAM;IACd,IAAItB,MAAM,EAAE;MACVO,oBAAoB,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAACA,oBAAoB,EAAEP,MAAM,CAAC,CAAC;EAElC,MAAMuB,iBAAiB,GAAG,MAAOC,WAAW,IAAK;IAC/C,IAAI;MACF,MAAMC,cAAc,GAAGvB,UAAU,CAACwB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACT,IAAI,KAAKM,WAAW,CAACN,IAAI,CAAC;MAC5E,IAAIO,cAAc,EAAE;QAClBJ,OAAO,CAACO,IAAI,CAAC,0BAA0B,EAAEJ,WAAW,CAAC;QACrD;MACF;MACA,MAAMK,IAAI,GAAG,MAAMC,WAAW,CAACN,WAAW,CAAC;MAC3C,MAAMO,iBAAiB,GAAG;QACxBjB,EAAE,EAAEe,IAAI,CAACd,UAAU;QACnBG,IAAI,EAAEW,IAAI,CAACX,IAAI;QACfF,IAAI,EAAEnB,YAAY,CAAE;MACtB,CAAC;MACDmC,oBAAoB,CAAC,uBAAuBD,iBAAiB,CAACjB,EAAE,EAAE,EAAE;QAAEmB,IAAI,EAAE,iBAAiB;QAAEpB,QAAQ,EAAEkB;MAAkB,CAAC,CAAC;MAC7H5B,aAAa,CAAC+B,cAAc,IAAI,CAAC,GAAGA,cAAc,EAAEH,iBAAiB,CAAC,CAAC;IACzE,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,OAAO;IACLlB,UAAU;IACVG,gBAAgB;IAChBC,mBAAmB;IACnBiB;EACF,CAAC;AACH;AAACtB,EAAA,CArDeF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}