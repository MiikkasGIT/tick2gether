{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.subscriptions = {}; // Store subscriptions to avoid duplicate listeners\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    if (this.stompClient) {\n      console.log('Already connected to WebSocket');\n      return; // Avoid connecting if already connected\n    }\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.connected = true;\n\n      // Ensure no duplicate subscriptions\n      if (!this.subscriptions[`tasks-${userId}`]) {\n        this.subscriptions[`tasks-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n          console.log('Task message received:', message.body);\n          try {\n            const taskMessage = JSON.parse(message.body);\n            console.log('Parsed task message:', taskMessage);\n            onTaskMessageReceived(taskMessage);\n          } catch (error) {\n            console.error('Error parsing task message:', error);\n          }\n        });\n      }\n      if (!this.subscriptions[`categories-${userId}`]) {\n        this.subscriptions[`categories-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n          console.log('Category message received:', message.body);\n          try {\n            const categoryMessage = JSON.parse(message.body);\n            console.log('Parsed category message:', categoryMessage);\n            onCategoryMessageReceived(categoryMessage);\n          } catch (error) {\n            console.error('Error parsing category message:', error);\n          }\n        });\n      }\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      Object.values(this.subscriptions).forEach(subscription => subscription.unsubscribe());\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n        this.stompClient = null; // Reset stompClient\n        this.subscriptions = {}; // Clear subscriptions\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","subscriptions","connect","onTaskMessageReceived","onCategoryMessageReceived","userId","console","log","socket","over","subscribe","message","body","taskMessage","JSON","parse","error","categoryMessage","setTimeout","disconnect","Object","values","forEach","subscription","unsubscribe","sendMessage","destination","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.subscriptions = {}; // Store subscriptions to avoid duplicate listeners\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    if (this.stompClient) {\n      console.log('Already connected to WebSocket');\n      return; // Avoid connecting if already connected\n    }\n\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.connected = true;\n\n      // Ensure no duplicate subscriptions\n      if (!this.subscriptions[`tasks-${userId}`]) {\n        this.subscriptions[`tasks-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n          console.log('Task message received:', message.body);\n          try {\n            const taskMessage = JSON.parse(message.body);\n            console.log('Parsed task message:', taskMessage);\n            onTaskMessageReceived(taskMessage);\n          } catch (error) {\n            console.error('Error parsing task message:', error);\n          }\n        });\n      }\n\n      if (!this.subscriptions[`categories-${userId}`]) {\n        this.subscriptions[`categories-${userId}`] = this.stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n          console.log('Category message received:', message.body);\n          try {\n            const categoryMessage = JSON.parse(message.body);\n            console.log('Parsed category message:', categoryMessage);\n            onCategoryMessageReceived(categoryMessage);\n          } catch (error) {\n            console.error('Error parsing category message:', error);\n          }\n        });\n      }\n\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      Object.values(this.subscriptions).forEach(subscription => subscription.unsubscribe());\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n        this.stompClient = null; // Reset stompClient\n        this.subscriptions = {}; // Clear subscriptions\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}