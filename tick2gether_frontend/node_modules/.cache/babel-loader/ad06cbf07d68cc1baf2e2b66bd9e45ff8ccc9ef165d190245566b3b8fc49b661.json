{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Categories from '../components/Categories';\nimport ToDoList from '../components/ToDoList';\nimport ToDoActions from '../components/ToDoActions';\nimport Navbar from '../components/Navbar';\nimport EditTaskPopUp from '../components/EditTaskPopUp';\nimport AddTaskPopUp from '../components/AddTaskPopUp';\nimport AddCategoryPopUp from '../components/AddCategoryPopUp';\nimport { fetchTasks, addTask, deleteTask, fetchUserId, fetchEmail, addCategory, fetchCategories } from '../api';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage, sendWebSocketMessage } from '../websocket';\nimport { categorizeTasks, STANDARD_CATEGORIES } from '../utils/categorizeTasks';\nimport { iconMap, customCategoryIcon } from '../icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [categories, setCategories] = useState(STANDARD_CATEGORIES);\n  const [selectedCategory, setSelectedCategory] = useState(STANDARD_CATEGORIES[0]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const navigate = useNavigate();\n  const initializeDashboard = useCallback(async () => {\n    try {\n      const email = await fetchEmail();\n      console.log('Fetched Email:', email); // Debugging\n\n      const fetchedUserId = await fetchUserId(email);\n      console.log('Fetched UserId:', fetchedUserId); // Debugging\n\n      if (fetchedUserId) {\n        setUserId(fetchedUserId);\n        const fetchedTasks = await fetchTasks();\n        console.log('Fetched Tasks:', fetchedTasks); // Debugging\n        setTasks(fetchedTasks);\n        const fetchedCategories = await fetchCategories(fetchedUserId);\n        console.log('Fetched Categories:', fetchedCategories); // Debugging\n        if (Array.isArray(fetchedCategories)) {\n          const customCategories = fetchedCategories.map(category => ({\n            ...category,\n            id: category.categoryId,\n            icon: iconMap[category.name] || customCategoryIcon\n          }));\n          setCategories([...STANDARD_CATEGORIES, ...customCategories]);\n          if (customCategories.length > 0) {\n            setSelectedCategory(customCategories[0]);\n          }\n        } else {\n          console.error('Fetched categories is not an array:', fetchedCategories);\n          setCategories(STANDARD_CATEGORIES); // Fallback to standard categories\n        }\n      } else {\n        navigate('/login');\n      }\n    } catch (error) {\n      console.error('Error initializing dashboard:', error);\n      navigate('/login');\n    }\n  }, [navigate]);\n  useEffect(() => {\n    initializeDashboard();\n  }, [initializeDashboard]);\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n      const {\n        type,\n        taskId,\n        categoryId,\n        sharedUserIds,\n        ...updatedTaskData\n      } = message;\n      if (type === 'TASK_UPDATE') {\n        console.log('Handling TASK_UPDATE:', {\n          taskId,\n          categoryId,\n          updatedTaskData\n        });\n        setTasks(prevTasks => {\n          const taskIndex = prevTasks.findIndex(task => task.taskId === taskId);\n          const taskExists = taskIndex !== -1;\n          const isTaskSharedWithUser = sharedUserIds === null || sharedUserIds === void 0 ? void 0 : sharedUserIds.includes(userId);\n          if (taskExists || isTaskSharedWithUser) {\n            const updatedTasks = [...prevTasks];\n            if (taskExists) {\n              updatedTasks[taskIndex] = {\n                ...prevTasks[taskIndex],\n                ...updatedTaskData\n              };\n            } else {\n              updatedTasks.push({\n                taskId,\n                ...updatedTaskData\n              });\n            }\n            console.log('Updated Tasks:', updatedTasks); // Debugging\n            return updatedTasks;\n          } else {\n            return prevTasks;\n          }\n        });\n      } else if (type === 'CATEGORY_UPDATE' || type === 'CATEGORY_SHARE') {\n        console.log('Handling CATEGORY_UPDATE or CATEGORY_SHARE:', {\n          categoryId,\n          updatedTaskData\n        });\n        setCategories(prevCategories => {\n          const categoryIndex = prevCategories.findIndex(category => category.categoryId === categoryId);\n          const updatedCategories = [...prevCategories];\n          if (categoryIndex !== -1) {\n            updatedCategories[categoryIndex] = {\n              ...prevCategories[categoryIndex],\n              ...updatedTaskData\n            };\n          } else {\n            updatedCategories.push({\n              categoryId,\n              ...updatedTaskData\n            });\n          }\n          console.log('Updated Categories:', updatedCategories); // Debugging\n          return updatedCategories;\n        });\n      }\n    };\n    if (userId) {\n      console.log('Connecting WebSocket for user ID:', userId);\n\n      // Fetch all task and category IDs to subscribe to specific topics\n      const fetchIds = async () => {\n        const fetchedTasks = await fetchTasks();\n        const fetchedCategories = await fetchCategories(userId);\n        const taskIds = fetchedTasks.map(task => task.taskId);\n        const categoryIds = Array.isArray(fetchedCategories) ? fetchedCategories.map(category => category.categoryId) : [];\n        console.log('Fetched Task IDs:', taskIds); // Debugging\n        console.log('Fetched Category IDs:', categoryIds); // Debugging\n        connectWebSocket(userId, taskIds, categoryIds, handleWebSocketMessage);\n      };\n      fetchIds();\n      return () => {\n        console.log('Disconnecting WebSocket for user ID:', userId);\n        disconnectWebSocket();\n      };\n    }\n  }, [userId]);\n  const handleAddNewTask = async newTask => {\n    if (!selectedCategory) {\n      console.warn('No category selected for the new task');\n      return;\n    }\n    try {\n      const formattedTask = {\n        ...newTask,\n        categoryId: selectedCategory.id,\n        // Verwenden der ausgewÃ¤hlten Kategorie-ID\n        userId: userId\n      };\n      console.log(\"Formatted Task before sending to backend:\", formattedTask);\n      const addedTask = await addTask(formattedTask, userId);\n      console.log(\"Added Task from backend:\", addedTask);\n      setShowAddTaskPopUp(false);\n\n      // Aufgaben aktualisieren\n      setTasks(prevTasks => {\n        const uniqueTasks = [...prevTasks, addedTask].filter((task, index, self) => index === self.findIndex(t => t.taskId === task.taskId));\n        console.log('Updated Task List:', uniqueTasks); // Debugging\n        return uniqueTasks;\n      });\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n  const handleSaveTask = async updatedTask => {\n    if (!selectedCategory) {\n      console.warn('No category selected for the task update');\n      return;\n    }\n    try {\n      const taskToUpdate = {\n        ...updatedTask,\n        userId: userId,\n        taskId: currentTask.taskId,\n        categoryId: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.id) || currentTask.categoryId\n      };\n      console.log(\"Task to Update before sending to backend:\", taskToUpdate);\n      setShowEditTaskPopUp(false);\n      setTasks(prevTasks => {\n        const updatedTasks = prevTasks.map(task => task.taskId === taskToUpdate.taskId ? taskToUpdate : task);\n        console.log('Updated Tasks List:', updatedTasks); // Debugging\n        return updatedTasks.filter((task, index, self) => index === self.findIndex(t => t.taskId === task.taskId));\n      });\n      sendUpdateTaskMessage(taskToUpdate);\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n  const handleDeleteTask = async id => {\n    try {\n      await deleteTask(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.taskId !== id));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const handleAddCategory = async newCategory => {\n    try {\n      const categoryExists = categories.some(cat => cat.name === newCategory.name);\n      if (categoryExists) {\n        console.warn('Category already exists:', newCategory);\n        return;\n      }\n      const data = await addCategory(newCategory);\n      const newCategoryObject = {\n        id: data.categoryId,\n        name: data.name,\n        icon: customCategoryIcon\n      };\n      console.log('New Category to be added:', newCategoryObject); // Debugging\n      sendWebSocketMessage(`/app/updateCategory/${newCategoryObject.id}`, {\n        type: 'CATEGORY_UPDATE',\n        category: newCategoryObject\n      });\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n  const toggleDeleteMode = () => {\n    setIsDeleteMode(prevMode => !prevMode);\n  };\n  const handleEditTask = task => {\n    setCurrentTask(task);\n    setShowEditTaskPopUp(true);\n  };\n  const categorizedTasks = categorizeTasks(tasks);\n  const filteredTasks = selectedCategory ? categorizedTasks[selectedCategory.id] || [] : tasks;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-6 w-full\",\n      children: /*#__PURE__*/_jsxDEV(Categories, {\n        categories: categories,\n        selectedCategory: selectedCategory,\n        onCategorySelect: setSelectedCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-6\",\n      children: /*#__PURE__*/_jsxDEV(ToDoActions, {\n        onAddTask: () => setShowAddTaskPopUp(true),\n        onToggleDeleteMode: toggleDeleteMode,\n        isDeleteMode: isDeleteMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n      tasks: filteredTasks,\n      isDeleteMode: isDeleteMode,\n      onTaskClick: handleEditTask,\n      onTaskDelete: handleDeleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), showEditTaskPopUp && /*#__PURE__*/_jsxDEV(EditTaskPopUp, {\n      task: currentTask,\n      onSave: handleSaveTask,\n      onClose: () => setShowEditTaskPopUp(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this), showAddTaskPopUp && /*#__PURE__*/_jsxDEV(AddTaskPopUp, {\n      onAddTask: handleAddNewTask,\n      categories: categories,\n      onClose: () => setShowAddTaskPopUp(false),\n      currentCategoryId: selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), showAddCategoryPopUp && /*#__PURE__*/_jsxDEV(AddCategoryPopUp, {\n      onAddCategory: handleAddCategory,\n      onClose: () => setShowAddCategoryPopUp(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"v5rA4F+zoJ0pbE+WvoiYZPyR2OI=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","Categories","ToDoList","ToDoActions","Navbar","EditTaskPopUp","AddTaskPopUp","AddCategoryPopUp","fetchTasks","addTask","deleteTask","fetchUserId","fetchEmail","addCategory","fetchCategories","connectWebSocket","disconnectWebSocket","sendUpdateTaskMessage","sendWebSocketMessage","categorizeTasks","STANDARD_CATEGORIES","iconMap","customCategoryIcon","jsxDEV","_jsxDEV","Dashboard","_s","showEditTaskPopUp","setShowEditTaskPopUp","showAddCategoryPopUp","setShowAddCategoryPopUp","isDeleteMode","setIsDeleteMode","tasks","setTasks","categories","setCategories","selectedCategory","setSelectedCategory","currentTask","setCurrentTask","showAddTaskPopUp","setShowAddTaskPopUp","userId","setUserId","navigate","initializeDashboard","email","console","log","fetchedUserId","fetchedTasks","fetchedCategories","Array","isArray","customCategories","map","category","id","categoryId","icon","name","length","error","handleWebSocketMessage","message","type","taskId","sharedUserIds","updatedTaskData","prevTasks","taskIndex","findIndex","task","taskExists","isTaskSharedWithUser","includes","updatedTasks","push","prevCategories","categoryIndex","updatedCategories","fetchIds","taskIds","categoryIds","handleAddNewTask","newTask","warn","formattedTask","addedTask","uniqueTasks","filter","index","self","t","handleSaveTask","updatedTask","taskToUpdate","handleDeleteTask","handleAddCategory","newCategory","categoryExists","some","cat","data","newCategoryObject","toggleDeleteMode","prevMode","handleEditTask","categorizedTasks","filteredTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCategorySelect","onAddTask","onToggleDeleteMode","onTaskClick","onTaskDelete","onSave","onClose","currentCategoryId","onAddCategory","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/pages/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Categories from '../components/Categories';\nimport ToDoList from '../components/ToDoList';\nimport ToDoActions from '../components/ToDoActions';\nimport Navbar from '../components/Navbar';\nimport EditTaskPopUp from '../components/EditTaskPopUp';\nimport AddTaskPopUp from '../components/AddTaskPopUp';\nimport AddCategoryPopUp from '../components/AddCategoryPopUp';\nimport { fetchTasks, addTask, deleteTask, fetchUserId, fetchEmail, addCategory, fetchCategories } from '../api';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage, sendWebSocketMessage } from '../websocket';\nimport { categorizeTasks, STANDARD_CATEGORIES } from '../utils/categorizeTasks';\nimport { iconMap, customCategoryIcon } from '../icons';\n\nfunction Dashboard() {\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [categories, setCategories] = useState(STANDARD_CATEGORIES);\n  const [selectedCategory, setSelectedCategory] = useState(STANDARD_CATEGORIES[0]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const navigate = useNavigate();\n\n  const initializeDashboard = useCallback(async () => {\n    try {\n      const email = await fetchEmail();\n      console.log('Fetched Email:', email); // Debugging\n\n      const fetchedUserId = await fetchUserId(email);\n      console.log('Fetched UserId:', fetchedUserId); // Debugging\n\n      if (fetchedUserId) {\n        setUserId(fetchedUserId);\n\n        const fetchedTasks = await fetchTasks();\n        console.log('Fetched Tasks:', fetchedTasks); // Debugging\n        setTasks(fetchedTasks);\n\n        const fetchedCategories = await fetchCategories(fetchedUserId);\n        console.log('Fetched Categories:', fetchedCategories); // Debugging\n        if (Array.isArray(fetchedCategories)) {\n          const customCategories = fetchedCategories.map(category => ({\n            ...category,\n            id: category.categoryId,\n            icon: iconMap[category.name] || customCategoryIcon,\n          }));\n          setCategories([...STANDARD_CATEGORIES, ...customCategories]);\n\n          if (customCategories.length > 0) {\n            setSelectedCategory(customCategories[0]);\n          }\n        } else {\n          console.error('Fetched categories is not an array:', fetchedCategories);\n          setCategories(STANDARD_CATEGORIES); // Fallback to standard categories\n        }\n      } else {\n        navigate('/login');\n      }\n    } catch (error) {\n      console.error('Error initializing dashboard:', error);\n      navigate('/login');\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    initializeDashboard();\n  }, [initializeDashboard]);\n\n  useEffect(() => {\n    const handleWebSocketMessage = (message) => {\n      console.log('Received WebSocket message:', message);\n\n      const { type, taskId, categoryId, sharedUserIds, ...updatedTaskData } = message;\n\n      if (type === 'TASK_UPDATE') {\n        console.log('Handling TASK_UPDATE:', { taskId, categoryId, updatedTaskData });\n\n        setTasks(prevTasks => {\n          const taskIndex = prevTasks.findIndex(task => task.taskId === taskId);\n          const taskExists = taskIndex !== -1;\n          const isTaskSharedWithUser = sharedUserIds?.includes(userId);\n\n          if (taskExists || isTaskSharedWithUser) {\n            const updatedTasks = [...prevTasks];\n            if (taskExists) {\n              updatedTasks[taskIndex] = { ...prevTasks[taskIndex], ...updatedTaskData };\n            } else {\n              updatedTasks.push({ taskId, ...updatedTaskData });\n            }\n            console.log('Updated Tasks:', updatedTasks); // Debugging\n            return updatedTasks;\n          } else {\n            return prevTasks;\n          }\n        });\n      } else if (type === 'CATEGORY_UPDATE' || type === 'CATEGORY_SHARE') {\n        console.log('Handling CATEGORY_UPDATE or CATEGORY_SHARE:', { categoryId, updatedTaskData });\n\n        setCategories(prevCategories => {\n          const categoryIndex = prevCategories.findIndex(category => category.categoryId === categoryId);\n          const updatedCategories = [...prevCategories];\n\n          if (categoryIndex !== -1) {\n            updatedCategories[categoryIndex] = { ...prevCategories[categoryIndex], ...updatedTaskData };\n          } else {\n            updatedCategories.push({ categoryId, ...updatedTaskData });\n          }\n\n          console.log('Updated Categories:', updatedCategories); // Debugging\n          return updatedCategories;\n        });\n      }\n    };\n\n    if (userId) {\n      console.log('Connecting WebSocket for user ID:', userId);\n\n      // Fetch all task and category IDs to subscribe to specific topics\n      const fetchIds = async () => {\n        const fetchedTasks = await fetchTasks();\n        const fetchedCategories = await fetchCategories(userId);\n        const taskIds = fetchedTasks.map(task => task.taskId);\n        const categoryIds = Array.isArray(fetchedCategories) ? fetchedCategories.map(category => category.categoryId) : [];\n        console.log('Fetched Task IDs:', taskIds); // Debugging\n        console.log('Fetched Category IDs:', categoryIds); // Debugging\n        connectWebSocket(userId, taskIds, categoryIds, handleWebSocketMessage);\n      };\n\n      fetchIds();\n\n      return () => {\n        console.log('Disconnecting WebSocket for user ID:', userId);\n        disconnectWebSocket();\n      };\n    }\n  }, [userId]);\n\n  const handleAddNewTask = async (newTask) => {\n    if (!selectedCategory) {\n      console.warn('No category selected for the new task');\n      return;\n    }\n\n    try {\n      const formattedTask = {\n        ...newTask,\n        categoryId: selectedCategory.id, // Verwenden der ausgewÃ¤hlten Kategorie-ID\n        userId: userId\n      };\n      console.log(\"Formatted Task before sending to backend:\", formattedTask);\n\n      const addedTask = await addTask(formattedTask, userId);\n      console.log(\"Added Task from backend:\", addedTask);\n\n      setShowAddTaskPopUp(false);\n\n      // Aufgaben aktualisieren\n      setTasks(prevTasks => {\n        const uniqueTasks = [...prevTasks, addedTask].filter((task, index, self) =>\n          index === self.findIndex((t) => t.taskId === task.taskId)\n        );\n        console.log('Updated Task List:', uniqueTasks); // Debugging\n        return uniqueTasks;\n      });\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  const handleSaveTask = async (updatedTask) => {\n    if (!selectedCategory) {\n      console.warn('No category selected for the task update');\n      return;\n    }\n\n    try {\n      const taskToUpdate = {\n        ...updatedTask,\n        userId: userId,\n        taskId: currentTask.taskId,\n        categoryId: selectedCategory?.id || currentTask.categoryId,\n      };\n      console.log(\"Task to Update before sending to backend:\", taskToUpdate);\n      setShowEditTaskPopUp(false);\n      setTasks(prevTasks => {\n        const updatedTasks = prevTasks.map(task => (task.taskId === taskToUpdate.taskId ? taskToUpdate : task));\n        console.log('Updated Tasks List:', updatedTasks); // Debugging\n        return updatedTasks.filter((task, index, self) =>\n          index === self.findIndex((t) => t.taskId === task.taskId)\n        );\n      });\n      sendUpdateTaskMessage(taskToUpdate);\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n\n  const handleDeleteTask = async (id) => {\n    try {\n      await deleteTask(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.taskId !== id));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const handleAddCategory = async (newCategory) => {\n    try {\n      const categoryExists = categories.some(cat => cat.name === newCategory.name);\n      if (categoryExists) {\n        console.warn('Category already exists:', newCategory);\n        return;\n      }\n      const data = await addCategory(newCategory);\n      const newCategoryObject = {\n        id: data.categoryId,\n        name: data.name,\n        icon: customCategoryIcon,\n      };\n      console.log('New Category to be added:', newCategoryObject); // Debugging\n      sendWebSocketMessage(`/app/updateCategory/${newCategoryObject.id}`, { type: 'CATEGORY_UPDATE', category: newCategoryObject });\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n\n  const toggleDeleteMode = () => {\n    setIsDeleteMode(prevMode => !prevMode);\n  };\n\n  const handleEditTask = (task) => {\n    setCurrentTask(task);\n    setShowEditTaskPopUp(true);\n  };\n\n  const categorizedTasks = categorizeTasks(tasks);\n\n  const filteredTasks = selectedCategory\n    ? categorizedTasks[selectedCategory.id] || []\n    : tasks;\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <Navbar />\n      <div className=\"my-6 w-full\">\n        <Categories\n          categories={categories}\n          selectedCategory={selectedCategory}\n          onCategorySelect={setSelectedCategory}\n        />\n      </div>\n      <div className=\"my-6\">\n        <ToDoActions\n          onAddTask={() => setShowAddTaskPopUp(true)}\n          onToggleDeleteMode={toggleDeleteMode}\n          isDeleteMode={isDeleteMode}\n        />\n      </div>\n      <ToDoList\n        tasks={filteredTasks}\n        isDeleteMode={isDeleteMode}\n        onTaskClick={handleEditTask}\n        onTaskDelete={handleDeleteTask}\n      />\n      {showEditTaskPopUp && (\n        <EditTaskPopUp\n          task={currentTask}\n          onSave={handleSaveTask}\n          onClose={() => setShowEditTaskPopUp(false)}\n        />\n      )}\n      {showAddTaskPopUp && (\n        <AddTaskPopUp\n          onAddTask={handleAddNewTask}\n          categories={categories}\n          onClose={() => setShowAddTaskPopUp(false)}\n          currentCategoryId={selectedCategory?.id}\n        />\n      )}\n      {showAddCategoryPopUp && (\n        <AddCategoryPopUp\n          onAddCategory={handleAddCategory}\n          onClose={() => setShowAddCategoryPopUp(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}