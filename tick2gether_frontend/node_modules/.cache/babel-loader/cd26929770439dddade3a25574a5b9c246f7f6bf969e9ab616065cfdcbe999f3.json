{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    // JWT-Token aus dem Local Storage holen\n    const token = localStorage.getItem('jwtToken');\n\n    // Verbinden mit WebSocket und Authentifizierungs-Header hinzuf端gen\n    this.stompClient.connect({\n      Authorization: `Bearer ${token}`\n    },\n    // JWT-Token im Header hinzuf端gen\n    () => {\n      console.log('Connected to WebSocket');\n      this.stompClient.subscribe('/topic/greetings', message => {\n        if (message.body) {\n          try {\n            const parsedMessage = JSON.parse(message.body);\n            onMessageReceived(parsedMessage);\n          } catch (error) {\n            console.error('Failed to parse message as JSON:', error);\n            onMessageReceived({\n              content: message.body\n            });\n          }\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => {\n  webSocketService.connect(onMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","socket","over","token","localStorage","getItem","Authorization","console","log","subscribe","message","body","parsedMessage","JSON","parse","error","content","setTimeout","disconnect","sendMessage","destination","connected","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    connect(onMessageReceived) {\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n\n        // JWT-Token aus dem Local Storage holen\n        const token = localStorage.getItem('jwtToken');\n\n        // Verbinden mit WebSocket und Authentifizierungs-Header hinzuf端gen\n        this.stompClient.connect(\n            { Authorization: `Bearer ${token}` }, // JWT-Token im Header hinzuf端gen\n            () => {\n                console.log('Connected to WebSocket');\n\n                this.stompClient.subscribe('/topic/greetings', (message) => {\n                    if (message.body) {\n                        try {\n                            const parsedMessage = JSON.parse(message.body);\n                            onMessageReceived(parsedMessage);\n                        } catch (error) {\n                            console.error('Failed to parse message as JSON:', error);\n                            onMessageReceived({ content: message.body });\n                        }\n                    }\n                });\n            },\n            (error) => {\n                console.error('Error connecting to WebSocket:', error);\n                setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n            }\n        );\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n            });\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            this.stompClient.send(destination, {}, JSON.stringify(message));\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived) => {\n    webSocketService.connect(onMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n    webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n    webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,UAAU,GAAG,0BAA0B;AAE7C,MAAMC,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,WAAW,GAAG,IAAI;EAC3B;EAEAC,OAAOA,CAACC,iBAAiB,EAAE;IACvB,MAAMC,MAAM,GAAG,IAAIP,MAAM,CAACC,UAAU,CAAC;IACrC,IAAI,CAACG,WAAW,GAAGL,KAAK,CAACS,IAAI,CAACD,MAAM,CAAC;;IAErC;IACA,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;IAE9C;IACA,IAAI,CAACP,WAAW,CAACC,OAAO,CACpB;MAAEO,aAAa,EAAE,UAAUH,KAAK;IAAG,CAAC;IAAE;IACtC,MAAM;MACFI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MAErC,IAAI,CAACV,WAAW,CAACW,SAAS,CAAC,kBAAkB,EAAGC,OAAO,IAAK;QACxD,IAAIA,OAAO,CAACC,IAAI,EAAE;UACd,IAAI;YACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,IAAI,CAAC;YAC9CX,iBAAiB,CAACY,aAAa,CAAC;UACpC,CAAC,CAAC,OAAOG,KAAK,EAAE;YACZR,OAAO,CAACQ,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;YACxDf,iBAAiB,CAAC;cAAEgB,OAAO,EAAEN,OAAO,CAACC;YAAK,CAAC,CAAC;UAChD;QACJ;MACJ,CAAC,CAAC;IACN,CAAC,EACAI,KAAK,IAAK;MACPR,OAAO,CAACQ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDE,UAAU,CAAC,MAAM,IAAI,CAAClB,OAAO,CAACC,iBAAiB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7D,CACJ,CAAC;EACL;EAEAkB,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAACpB,WAAW,EAAE;MAClB,IAAI,CAACA,WAAW,CAACoB,UAAU,CAAC,MAAM;QAC9BX,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC9C,CAAC,CAAC;IACN;EACJ;EAEAW,WAAWA,CAACC,WAAW,EAAEV,OAAO,EAAE;IAC9B,IAAI,IAAI,CAACZ,WAAW,IAAI,IAAI,CAACA,WAAW,CAACuB,SAAS,EAAE;MAChD,IAAI,CAACvB,WAAW,CAACwB,IAAI,CAACF,WAAW,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACU,SAAS,CAACb,OAAO,CAAC,CAAC;IACnE;EACJ;AACJ;AAEA,MAAMc,gBAAgB,GAAG,IAAI5B,gBAAgB,CAAC,CAAC;AAE/C,OAAO,MAAM6B,gBAAgB,GAAIzB,iBAAiB,IAAK;EACnDwB,gBAAgB,CAACzB,OAAO,CAACC,iBAAiB,CAAC;AAC/C,CAAC;AAED,OAAO,MAAM0B,mBAAmB,GAAGA,CAAA,KAAM;EACrCF,gBAAgB,CAACN,UAAU,CAAC,CAAC;AACjC,CAAC;AAED,OAAO,MAAMS,oBAAoB,GAAGA,CAACP,WAAW,EAAEV,OAAO,KAAK;EAC1Dc,gBAAgB,CAACL,WAAW,CAACC,WAAW,EAAEV,OAAO,CAAC;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}