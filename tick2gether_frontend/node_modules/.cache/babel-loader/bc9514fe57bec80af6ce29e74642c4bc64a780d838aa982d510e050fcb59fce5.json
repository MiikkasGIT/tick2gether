{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.reconnectInterval = 5000; // Zeitspanne zum Wiederverbinden in Millisekunden\n    this.onMessageReceived = null; // Callback zur Nachrichtenverarbeitung\n    this.connectPromise = null; // Promise für den Verbindungsstatus\n    this.subscribedTopics = new Set(); // Set zum Verfolgen abonnierter Topics\n  }\n  async connect(onMessageReceived, userId) {\n    if (!userId) {\n      console.error('userId is undefined. Cannot connect to WebSocket.');\n      return;\n    }\n    if (this.stompClient && this.stompClient.connected) {\n      console.warn('WebSocket is already connected');\n      return;\n    }\n    this.onMessageReceived = onMessageReceived;\n    this.connectPromise = new Promise((resolve, reject) => {\n      const token = localStorage.getItem('jwtToken');\n      console.log('JWT Token:', token);\n      try {\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(() => socket); // Änderung hier\n\n        this.stompClient.connect({\n          Authorization: `Bearer ${token}`\n        }, () => {\n          console.log('Connected to WebSocket');\n          this.connectPromise = null; // Verbindungsversuch abgeschlossen\n          console.log('Subscribing to:', `/topic/user/${userId}/tasks`);\n          this.subscribe(`/topic/user/${userId}/tasks`);\n          resolve();\n        }, error => {\n          console.error('Error connecting to WebSocket:', error);\n          this.connectPromise = null; // Verbindungsversuch abgeschlossen\n          this.reconnect(userId);\n          reject(error);\n        });\n      } catch (error) {\n        console.error('Unexpected error during WebSocket connection:', error);\n        this.connectPromise = null; // Verbindungsversuch abgeschlossen\n        reject(error);\n      }\n    });\n    return this.connectPromise;\n  }\n  subscribe(destination) {\n    if (!this.stompClient || !this.stompClient.connected) {\n      console.error('STOMP client is not connected');\n      return;\n    }\n    if (this.subscribedTopics.has(destination)) {\n      console.warn(`Already subscribed to ${destination}`);\n      return;\n    }\n    this.stompClient.subscribe(destination, message => {\n      console.log(`Received message:`, message);\n      if (message.body) {\n        try {\n          const parsedMessage = JSON.parse(message.body);\n          if (this.onMessageReceived) {\n            this.onMessageReceived('task', parsedMessage);\n          } else {\n            console.warn('No onMessageReceived callback set');\n          }\n        } catch (error) {\n          console.error(`Failed to parse message:`, error);\n        }\n      }\n    });\n    this.subscribedTopics.add(destination);\n  }\n  reconnect(userId) {\n    console.log(`Attempting to reconnect in ${this.reconnectInterval / 1000} seconds...`);\n    setTimeout(() => this.connect(this.onMessageReceived, userId), this.reconnectInterval);\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.stompClient = null;\n        this.subscribedTopics.clear(); // Lösche abonnierte Topics beim Trennen\n      });\n    } else {\n      console.warn('WebSocket client is not connected');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      console.log('Sending message to:', destination);\n      console.log('Message content:', JSON.stringify(message));\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('STOMP client is not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onMessageReceived, userId) => {\n  console.log('Connecting WebSocket with userId:', userId);\n  webSocketService.connect(onMessageReceived, userId);\n};\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => webSocketService.sendMessage(destination, message);","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","reconnectInterval","onMessageReceived","connectPromise","subscribedTopics","Set","connect","userId","console","error","connected","warn","Promise","resolve","reject","token","localStorage","getItem","log","socket","over","Authorization","subscribe","reconnect","destination","has","message","body","parsedMessage","JSON","parse","add","setTimeout","disconnect","clear","sendMessage","stringify","send","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n        this.reconnectInterval = 5000; // Zeitspanne zum Wiederverbinden in Millisekunden\n        this.onMessageReceived = null; // Callback zur Nachrichtenverarbeitung\n        this.connectPromise = null; // Promise für den Verbindungsstatus\n        this.subscribedTopics = new Set(); // Set zum Verfolgen abonnierter Topics\n    }\n\n    async connect(onMessageReceived, userId) {\n        if (!userId) {\n            console.error('userId is undefined. Cannot connect to WebSocket.');\n            return;\n        }\n\n        if (this.stompClient && this.stompClient.connected) {\n            console.warn('WebSocket is already connected');\n            return;\n        }\n\n        this.onMessageReceived = onMessageReceived;\n\n        this.connectPromise = new Promise((resolve, reject) => {\n            const token = localStorage.getItem('jwtToken');\n            console.log('JWT Token:', token);\n\n            try {\n                const socket = new SockJS(SOCKET_URL);\n                this.stompClient = Stomp.over(() => socket);  // Änderung hier\n\n                this.stompClient.connect(\n                    { Authorization: `Bearer ${token}` },\n                    () => {\n                        console.log('Connected to WebSocket');\n                        this.connectPromise = null; // Verbindungsversuch abgeschlossen\n                        console.log('Subscribing to:', `/topic/user/${userId}/tasks`);\n                        this.subscribe(`/topic/user/${userId}/tasks`);\n                        resolve();\n                    },\n                    (error) => {\n                        console.error('Error connecting to WebSocket:', error);\n                        this.connectPromise = null; // Verbindungsversuch abgeschlossen\n                        this.reconnect(userId);\n                        reject(error);\n                    }\n                );\n            } catch (error) {\n                console.error('Unexpected error during WebSocket connection:', error);\n                this.connectPromise = null; // Verbindungsversuch abgeschlossen\n                reject(error);\n            }\n        });\n\n        return this.connectPromise;\n    }\n\n    subscribe(destination) {\n        if (!this.stompClient || !this.stompClient.connected) {\n            console.error('STOMP client is not connected');\n            return;\n        }\n\n        if (this.subscribedTopics.has(destination)) {\n            console.warn(`Already subscribed to ${destination}`);\n            return;\n        }\n\n        this.stompClient.subscribe(destination, (message) => {\n            console.log(`Received message:`, message);\n            if (message.body) {\n                try {\n                    const parsedMessage = JSON.parse(message.body);\n                    if (this.onMessageReceived) {\n                        this.onMessageReceived('task', parsedMessage);\n                    } else {\n                        console.warn('No onMessageReceived callback set');\n                    }\n                } catch (error) {\n                    console.error(`Failed to parse message:`, error);\n                }\n            }\n        });\n\n        this.subscribedTopics.add(destination);\n    }\n\n    reconnect(userId) {\n        console.log(`Attempting to reconnect in ${this.reconnectInterval / 1000} seconds...`);\n        setTimeout(() => this.connect(this.onMessageReceived, userId), this.reconnectInterval);\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n                this.stompClient = null;\n                this.subscribedTopics.clear(); // Lösche abonnierte Topics beim Trennen\n            });\n        } else {\n            console.warn('WebSocket client is not connected');\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            console.log('Sending message to:', destination);\n            console.log('Message content:', JSON.stringify(message));\n            this.stompClient.send(destination, {}, JSON.stringify(message));\n        } else {\n            console.error('STOMP client is not connected');\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onMessageReceived, userId) => {\n    console.log('Connecting WebSocket with userId:', userId);\n    webSocketService.connect(onMessageReceived, userId);\n};\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => webSocketService.sendMessage(destination, message);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}