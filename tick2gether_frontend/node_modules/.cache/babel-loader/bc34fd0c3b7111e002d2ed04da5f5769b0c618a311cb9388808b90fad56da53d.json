{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.pendingMessages = []; // Queue to store messages before the connection is established\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId);\n\n      // Send any pending messages\n      this.pendingMessages.forEach(({\n        destination,\n        message\n      }) => {\n        this.sendMessage(destination, message);\n      });\n      this.pendingMessages = []; // Clear the pending messages\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n  subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    this.stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n      console.log('Task message received:', message.body);\n      try {\n        const taskMessage = JSON.parse(message.body);\n        console.log('Parsed task message:', taskMessage);\n        onTaskMessageReceived(taskMessage);\n      } catch (error) {\n        console.error('Error parsing task message:', error);\n      }\n    });\n    this.stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n      console.log('Category message received:', message.body);\n      try {\n        const categoryMessage = JSON.parse(message.body);\n        console.log('Parsed category message:', categoryMessage);\n        onCategoryMessageReceived(categoryMessage);\n      } catch (error) {\n        console.error('Error parsing category message:', error);\n      }\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message to:', destination, 'with payload:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.warn('WebSocket not connected, storing message to send later');\n      this.pendingMessages.push({\n        destination,\n        message\n      });\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\nexport default webSocketService;","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","pendingMessages","connect","onTaskMessageReceived","onCategoryMessageReceived","userId","console","log","socket","over","frame","subscribeToTopics","forEach","destination","message","sendMessage","error","setTimeout","subscribe","body","taskMessage","JSON","parse","categoryMessage","disconnect","send","stringify","warn","push","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n    this.pendingMessages = []; // Queue to store messages before the connection is established\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId);\n\n      // Send any pending messages\n      this.pendingMessages.forEach(({ destination, message }) => {\n        this.sendMessage(destination, message);\n      });\n      this.pendingMessages = []; // Clear the pending messages\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    this.stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n      console.log('Task message received:', message.body);\n      try {\n        const taskMessage = JSON.parse(message.body);\n        console.log('Parsed task message:', taskMessage);\n        onTaskMessageReceived(taskMessage);\n      } catch (error) {\n        console.error('Error parsing task message:', error);\n      }\n    });\n\n    this.stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n      console.log('Category message received:', message.body);\n      try {\n        const categoryMessage = JSON.parse(message.body);\n        console.log('Parsed category message:', categoryMessage);\n        onCategoryMessageReceived(categoryMessage);\n      } catch (error) {\n        console.error('Error parsing category message:', error);\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message to:', destination, 'with payload:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.warn('WebSocket not connected, storing message to send later');\n      this.pendingMessages.push({ destination, message });\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n\nexport default webSocketService;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,UAAU,GAAG,0BAA0B;AAE7C,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,cAAc,GAAG,IAAI,CAAC,CAAC;IAC5B,IAAI,CAACC,eAAe,GAAG,EAAE,CAAC,CAAC;EAC7B;EAEAC,OAAOA,CAACC,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,EAAE;IAChEC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpD,MAAMC,MAAM,GAAG,IAAId,MAAM,CAACC,UAAU,CAAC;IACrC,IAAI,CAACG,WAAW,GAAGL,KAAK,CAACgB,IAAI,CAACD,MAAM,CAAC;IAErC,IAAI,CAACV,WAAW,CAACI,OAAO,CAAC,CAAC,CAAC,EAAGQ,KAAK,IAAK;MACtCJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,KAAK,CAAC;MAC7C,IAAI,CAACX,SAAS,GAAG,IAAI;MACrB,IAAI,CAACY,iBAAiB,CAACR,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,CAAC;;MAEhF;MACA,IAAI,CAACJ,eAAe,CAACW,OAAO,CAAC,CAAC;QAAEC,WAAW;QAAEC;MAAQ,CAAC,KAAK;QACzD,IAAI,CAACC,WAAW,CAACF,WAAW,EAAEC,OAAO,CAAC;MACxC,CAAC,CAAC;MACF,IAAI,CAACb,eAAe,GAAG,EAAE,CAAC,CAAC;IAC7B,CAAC,EAAGe,KAAK,IAAK;MACZV,OAAO,CAACU,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,IAAI,CAACjB,SAAS,GAAG,KAAK;MACtBkB,UAAU,CAAC,MAAM,IAAI,CAACf,OAAO,CAACC,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,CAAC,EAAE,IAAI,CAACL,cAAc,CAAC;IAC/G,CAAC,CAAC;EACJ;EAEAW,iBAAiBA,CAACR,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,EAAE;IAC1E,IAAI,CAACP,WAAW,CAACoB,SAAS,CAAC,SAASb,MAAM,cAAc,EAAGS,OAAO,IAAK;MACrER,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEO,OAAO,CAACK,IAAI,CAAC;MACnD,IAAI;QACF,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACR,OAAO,CAACK,IAAI,CAAC;QAC5Cb,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEa,WAAW,CAAC;QAChDjB,qBAAqB,CAACiB,WAAW,CAAC;MACpC,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC,CAAC;IAEF,IAAI,CAAClB,WAAW,CAACoB,SAAS,CAAC,SAASb,MAAM,mBAAmB,EAAGS,OAAO,IAAK;MAC1ER,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEO,OAAO,CAACK,IAAI,CAAC;MACvD,IAAI;QACF,MAAMI,eAAe,GAAGF,IAAI,CAACC,KAAK,CAACR,OAAO,CAACK,IAAI,CAAC;QAChDb,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEgB,eAAe,CAAC;QACxDnB,yBAAyB,CAACmB,eAAe,CAAC;MAC5C,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC,CAAC;EACJ;EAEAQ,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC1B,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAAC0B,UAAU,CAAC,MAAM;QAChClB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C,IAAI,CAACR,SAAS,GAAG,KAAK;MACxB,CAAC,CAAC;IACJ;EACF;EAEAgB,WAAWA,CAACF,WAAW,EAAEC,OAAO,EAAE;IAChC,IAAI,IAAI,CAAChB,WAAW,IAAI,IAAI,CAACC,SAAS,EAAE;MACtCO,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEM,WAAW,EAAE,eAAe,EAAEC,OAAO,CAAC;MACzE,IAAI,CAAChB,WAAW,CAAC2B,IAAI,CAACZ,WAAW,EAAE,CAAC,CAAC,EAAEQ,IAAI,CAACK,SAAS,CAACZ,OAAO,CAAC,CAAC;IACjE,CAAC,MAAM;MACLR,OAAO,CAACqB,IAAI,CAAC,wDAAwD,CAAC;MACtE,IAAI,CAAC1B,eAAe,CAAC2B,IAAI,CAAC;QAAEf,WAAW;QAAEC;MAAQ,CAAC,CAAC;IACrD;EACF;AACF;AAEA,MAAMe,gBAAgB,GAAG,IAAIjC,gBAAgB,CAAC,CAAC;AAE/C,OAAO,MAAMkC,gBAAgB,GAAGA,CAAC3B,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,KAAK;EAC5FwB,gBAAgB,CAAC3B,OAAO,CAACC,qBAAqB,EAAEC,yBAAyB,EAAEC,MAAM,CAAC;AACpF,CAAC;AAED,OAAO,MAAM0B,mBAAmB,GAAGA,CAAA,KAAM;EACvCF,gBAAgB,CAACL,UAAU,CAAC,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMQ,oBAAoB,GAAGA,CAACnB,WAAW,EAAEC,OAAO,KAAK;EAC5De,gBAAgB,CAACd,WAAW,CAACF,WAAW,EAAEC,OAAO,CAAC;AACpD,CAAC;AAED,eAAee,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}