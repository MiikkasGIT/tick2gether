{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Zunächst initialisieren wir alle Kategorien\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n  tasks.forEach(task => {\n    if (task.completed) {\n      // Alle abgeschlossenen Aufgaben gehen immer in die Kategorie 7 (Logbuch)\n      categorizedTasks[7].push(task);\n    } else {\n      // Für alle anderen Kategorien\n      switch (task.categoryId) {\n        case 1:\n          // Alle Aufgaben\n          categorizedTasks[1].push(task);\n          break;\n        case 2:\n          categorizedTasks[2].push(task);\n          break;\n        case 3:\n          // Geplant (Aufgaben, die ein Plan-Datum haben)\n          if (task.planDate) {\n            categorizedTasks[3].push(task);\n          }\n          break;\n        case 4:\n          // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n          if (!task.dueDate) {\n            categorizedTasks[4].push(task);\n          }\n          break;\n        case 5:\n          // Arbeit (Aufgaben mit Kategorie-ID 5)\n          categorizedTasks[5].push(task);\n          break;\n        case 6:\n          // Persönlich (Aufgaben mit Kategorie-ID 6)\n          categorizedTasks[6].push(task);\n          break;\n        default:\n          // Benutzerdefinierte Kategorien\n          categorizedTasks[task.categoryId] = categorizedTasks[task.categoryId] || [];\n          categorizedTasks[task.categoryId].push(task);\n          break;\n      }\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","task","completed","push","planDate","dueDate"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Zunächst initialisieren wir alle Kategorien\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  tasks.forEach(task => {\n    if (task.completed) {\n      // Alle abgeschlossenen Aufgaben gehen immer in die Kategorie 7 (Logbuch)\n      categorizedTasks[7].push(task);\n    } else {\n      // Für alle anderen Kategorien\n      switch (task.categoryId) {\n        case 1:\n          // Alle Aufgaben\n          categorizedTasks[1].push(task);\n          break;\n        case 2:\n          categorizedTasks[2].push(task);\n          break;\n        case 3:\n          // Geplant (Aufgaben, die ein Plan-Datum haben)\n          if (task.planDate) {\n            categorizedTasks[3].push(task);\n          }\n          break;\n        case 4:\n          // Jederzeit (Aufgaben, die keinen bestimmten Fälligkeitsdatum haben)\n          if (!task.dueDate) {\n            categorizedTasks[4].push(task);\n          }\n          break;\n        case 5:\n          // Arbeit (Aufgaben mit Kategorie-ID 5)\n          categorizedTasks[5].push(task);\n          break;\n        case 6:\n          // Persönlich (Aufgaben mit Kategorie-ID 6)\n          categorizedTasks[6].push(task);\n          break;\n        default:\n          // Benutzerdefinierte Kategorien\n          categorizedTasks[task.categoryId] = categorizedTasks[task.categoryId] || [];\n          categorizedTasks[task.categoryId].push(task);\n          break;\n      }\n    }\n  });\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;EAEFL,KAAK,CAACG,OAAO,CAACG,IAAI,IAAI;IACpB,IAAIA,IAAI,CAACC,SAAS,EAAE;MAClB;MACAL,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;IAChC,CAAC,MAAM;MACL;MACA,QAAQA,IAAI,CAACD,UAAU;QACrB,KAAK,CAAC;UACJ;UACAH,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAC9B;QACF,KAAK,CAAC;UACJJ,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAC9B;QACF,KAAK,CAAC;UACJ;UACA,IAAIA,IAAI,CAACG,QAAQ,EAAE;YACjBP,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAChC;UACA;QACF,KAAK,CAAC;UACJ;UACA,IAAI,CAACA,IAAI,CAACI,OAAO,EAAE;YACjBR,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAChC;UACA;QACF,KAAK,CAAC;UACJ;UACAJ,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAC9B;QACF,KAAK,CAAC;UACJ;UACAJ,gBAAgB,CAAC,CAAC,CAAC,CAACM,IAAI,CAACF,IAAI,CAAC;UAC9B;QACF;UACE;UACAJ,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,GAAGH,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,IAAI,EAAE;UAC3EH,gBAAgB,CAACI,IAAI,CAACD,UAAU,CAAC,CAACG,IAAI,CAACF,IAAI,CAAC;UAC5C;MACJ;IACF;EACF,CAAC,CAAC;EAEF,OAAOJ,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}