{"ast":null,"code":"// Standard categories included within the same structure\nexport const STANDARD_CATEGORIES = [{\n  id: 1,\n  name: 'All Tasks'\n}, {\n  id: 2,\n  name: 'Today'\n}, {\n  id: 3,\n  name: 'Planned'\n}, {\n  id: 4,\n  name: 'Any Time'\n}, {\n  id: 5,\n  name: 'Work'\n}, {\n  id: 6,\n  name: 'Personal'\n}, {\n  id: 7,\n  name: 'Logbook'\n}];\nexport const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  const allCategories = [...categories, ...STANDARD_CATEGORIES];\n  allCategories.forEach(category => {\n    categorizedTasks[category.id] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const {\n      categoryId,\n      completed,\n      planDate\n    } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (true) {\n      case categoryId !== 7:\n        categorizedTasks[1].push(task); // All Tasks (excluding Logbook)\n        break;\n      case completed:\n        categorizedTasks[7].push(task); // Logbook\n        break;\n      case categoryId === 2:\n        categorizedTasks[2].push(task); // Today\n        break;\n      case !!planDate:\n        categorizedTasks[3].push(task); // Planned\n        break;\n      case categoryId === 4:\n        categorizedTasks[4].push(task); // Any Time\n        break;\n      case categoryId === 5:\n        categorizedTasks[5].push(task); // Work\n        break;\n      case categoryId === 6:\n        categorizedTasks[6].push(task); // Personal\n        break;\n      default:\n        break;\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["STANDARD_CATEGORIES","id","name","categorizeTasks","tasks","categories","categorizedTasks","allCategories","forEach","category","task","categoryId","completed","planDate","console","log","taskId","push"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["// Standard categories included within the same structure\nexport const STANDARD_CATEGORIES = [\n  { id: 1, name: 'All Tasks' },\n  { id: 2, name: 'Today' },\n  { id: 3, name: 'Planned' },\n  { id: 4, name: 'Any Time' },\n  { id: 5, name: 'Work' },\n  { id: 6, name: 'Personal' },\n  { id: 7, name: 'Logbook' },\n];\n\nexport const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  const allCategories = [...categories, ...STANDARD_CATEGORIES];\n  allCategories.forEach(category => {\n    categorizedTasks[category.id] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const { categoryId, completed, planDate } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (true) {\n      case categoryId !== 7:\n        categorizedTasks[1].push(task); // All Tasks (excluding Logbook)\n        break;\n      case completed:\n        categorizedTasks[7].push(task); // Logbook\n        break;\n      case categoryId === 2:\n        categorizedTasks[2].push(task); // Today\n        break;\n      case !!planDate:\n        categorizedTasks[3].push(task); // Planned\n        break;\n      case categoryId === 4:\n        categorizedTasks[4].push(task); // Any Time\n        break;\n      case categoryId === 5:\n        categorizedTasks[5].push(task); // Work\n        break;\n      case categoryId === 6:\n        categorizedTasks[6].push(task); // Personal\n        break;\n      default:\n        break;\n    }\n  });\n\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,mBAAmB,GAAG,CACjC;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAY,CAAC,EAC5B;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAQ,CAAC,EACxB;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAU,CAAC,EAC1B;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAW,CAAC,EAC3B;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAO,CAAC,EACvB;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAW,CAAC,EAC3B;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAU,CAAC,CAC3B;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACA,MAAMC,aAAa,GAAG,CAAC,GAAGF,UAAU,EAAE,GAAGL,mBAAmB,CAAC;EAC7DO,aAAa,CAACC,OAAO,CAACC,QAAQ,IAAI;IAChCH,gBAAgB,CAACG,QAAQ,CAACR,EAAE,CAAC,GAAG,EAAE;EACpC,CAAC,CAAC;;EAEF;EACAG,KAAK,CAACI,OAAO,CAACE,IAAI,IAAI;IACpB,MAAM;MAAEC,UAAU;MAAEC,SAAS;MAAEC;IAAS,CAAC,GAAGH,IAAI;;IAEhD;IACAI,OAAO,CAACC,GAAG,CAAC,4BAA4BL,IAAI,CAACM,MAAM,iBAAiBL,UAAU,EAAE,CAAC;;IAEjF;IACA,IAAI,CAACL,gBAAgB,CAACK,UAAU,CAAC,EAAE;MACjCL,gBAAgB,CAACK,UAAU,CAAC,GAAG,EAAE;IACnC;IACAL,gBAAgB,CAACK,UAAU,CAAC,CAACM,IAAI,CAACP,IAAI,CAAC;;IAEvC;IACA,QAAQ,IAAI;MACV,KAAKC,UAAU,KAAK,CAAC;QACnBL,gBAAgB,CAAC,CAAC,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKE,SAAS;QACZN,gBAAgB,CAAC,CAAC,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKC,UAAU,KAAK,CAAC;QACnBL,gBAAgB,CAAC,CAAC,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAK,CAAC,CAACG,QAAQ;QACbP,gBAAgB,CAAC,CAAC,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKC,UAAU,KAAK,CAAC;QACnBL,gBAAgB,CAAC,CAAC,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKC,UAAU,KAAK,CAAC;QACnBL,gBAAgB,CAAC,CAAC,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,KAAKC,UAAU,KAAK,CAAC;QACnBL,gBAAgB,CAAC,CAAC,CAAC,CAACW,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;QAChC;MACF;QACE;IACJ;EACF,CAAC,CAAC;EAGF,OAAOJ,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}