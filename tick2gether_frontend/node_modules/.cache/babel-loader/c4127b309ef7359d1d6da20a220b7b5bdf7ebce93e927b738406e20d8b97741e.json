{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isAfter } from 'date-fns'; // Import von date-fns-Funktionen für Datummanipulation\nimport { deleteTask, updateTask } from '../api'; // Importieren der API-Funktionen zum Löschen und Aktualisieren von Aufgaben\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ToDoList({\n  todos = [],\n  setTasks,\n  isDeleteMode,\n  onEditTodo,\n  selectedCategory,\n  fetchTasksData\n}) {\n  _s();\n  const [selectedTodoId, setSelectedTodoId] = useState(null); // State für die ausgewählte Aufgaben-ID\n\n  // Effekt, der bei jeder Änderung der todos-Liste ausgeführt wird\n  useEffect(() => {\n    console.log('Todos updated:', todos);\n  }, [todos]);\n\n  // Funktion zum Bearbeiten des Status der Checkbox einer Aufgabe\n  const handleCheckboxChange = async id => {\n    console.log('Checkbox changed for ID:', id);\n    const updatedTodos = todos.map(todo => {\n      if (todo.taskId === id) {\n        const updatedTodo = {\n          ...todo,\n          completed: !todo.completed\n        };\n        if (updatedTodo.completed) {\n          updatedTodo.categoryId = 7; // Kategorie-ID auf 7 setzen, wenn die Aufgabe abgeschlossen ist\n        }\n        return updatedTodo;\n      }\n      return todo;\n    });\n    setTasks(updatedTodos); // Aktualisieren der todos-Liste im State\n\n    const updatedTask = updatedTodos.find(todo => todo.taskId === id); // Aktualisierte Aufgabe finden\n    try {\n      await updateTask(updatedTask); // API-Aufruf zum Aktualisieren der Aufgabe\n      console.log('Fetching tasks after checkbox change...');\n      await fetchTasksData(); // Aktualisieren der Aufgabenliste nach der Aktualisierung\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  // Funktion zum Löschen einer Aufgabe\n  const handleDeleteClick = async id => {\n    console.log('Deleting task with ID:', id);\n    try {\n      await deleteTask(id); // API-Aufruf zum Löschen der Aufgabe\n      console.log('Fetching tasks after delete...');\n      await fetchTasksData(); // Aktualisieren der Aufgabenliste nach dem Löschen\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n    }\n  };\n\n  // Funktion, die aufgerufen wird, wenn auf eine Aufgabe geklickt wird\n  const handleTodoClick = id => {\n    console.log('Todo clicked with ID:', id);\n    setSelectedTodoId(id); // Ausgewählte Aufgaben-ID im State setzen\n  };\n\n  // Funktion zum Bearbeiten einer Aufgabe\n  const handleEditClick = todo => {\n    onEditTodo(todo); // Funktion zum Bearbeiten der Aufgabe aufrufen\n  };\n\n  // Funktion zum Ändern des Datums einer Aufgabe\n  const handleDateChange = async (id, date, purpose) => {\n    const formattedDate = date.toISOString().split('T')[0]; // Datum im Format \"yyyy-MM-dd\" formatieren\n    console.log(`Updating ${purpose} date to:`, formattedDate);\n    try {\n      const updatedTodos = todos.map(todo => todo.taskId === id ? {\n        ...todo,\n        [`${purpose}Date`]: formattedDate\n      } : todo);\n      setTasks(updatedTodos); // Todos-Liste im State aktualisieren\n\n      const updatedTask = updatedTodos.find(todo => todo.taskId === id); // Aktualisierte Aufgabe finden\n      await updateTask(updatedTask); // API-Aufruf zum Aktualisieren der Aufgabe\n      console.log('Fetching tasks after date change...');\n      await fetchTasksData(); // Aktualisieren der Aufgabenliste nach der Aktualisierung\n    } catch (error) {\n      console.error('Error updating date:', error);\n    }\n  };\n  const today = startOfToday(); // Heutiges Datum\n\n  // Filtern der Aufgaben basierend auf der ausgewählten Kategorie\n  const filteredTodos = todos.filter(todo => {\n    switch (selectedCategory.name) {\n      case 'Planned':\n        return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n      case 'Today':\n      case 'Personal':\n      case 'Work':\n      case 'Any Time':\n        return todo.categoryId === selectedCategory.id;\n      case 'All Tasks':\n        return !todo.planDate && todo.categoryId !== 7;\n      case 'Logbook':\n        return todo.categoryId === 7;\n      default:\n        return todo.categoryId === selectedCategory.id;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      className: \"sr-only\",\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-1\",\n      children: filteredTodos.map(todo => /*#__PURE__*/_jsxDEV(ToDo, {\n        // Verwendung der taskId als Schlüssel\n        todo: todo,\n        handleCheckboxChange: () => handleCheckboxChange(todo.taskId),\n        handleTodoClick: () => handleTodoClick(todo.taskId),\n        handleDelete: () => handleDeleteClick(todo.taskId),\n        handleEditClick: () => handleEditClick(todo),\n        isDeleteMode: isDeleteMode,\n        onDateChange: handleDateChange,\n        isSelected: todo.taskId === selectedTodoId // Übergeben des ausgewählten Zustands\n        ,\n        isTodayCategory: selectedCategory.name === 'Today'\n      }, todo.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoList, \"y7hXGgDEL6mLLQHq94VAZqd74Dw=\");\n_c = ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","useEffect","ToDo","startOfToday","isAfter","deleteTask","updateTask","jsxDEV","_jsxDEV","ToDoList","todos","setTasks","isDeleteMode","onEditTodo","selectedCategory","fetchTasksData","_s","selectedTodoId","setSelectedTodoId","console","log","handleCheckboxChange","id","updatedTodos","map","todo","taskId","updatedTodo","completed","categoryId","updatedTask","find","error","handleDeleteClick","response","data","message","handleTodoClick","handleEditClick","handleDateChange","date","purpose","formattedDate","toISOString","split","today","filteredTodos","filter","name","planDate","Date","children","className","fileName","_jsxFileName","lineNumber","columnNumber","handleDelete","onDateChange","isSelected","isTodayCategory","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isAfter } from 'date-fns'; // Import von date-fns-Funktionen für Datummanipulation\nimport { deleteTask, updateTask } from '../api'; // Importieren der API-Funktionen zum Löschen und Aktualisieren von Aufgaben\n\nexport default function ToDoList({ todos = [], setTasks, isDeleteMode, onEditTodo, selectedCategory, fetchTasksData }) {\n  const [selectedTodoId, setSelectedTodoId] = useState(null); // State für die ausgewählte Aufgaben-ID\n\n  // Effekt, der bei jeder Änderung der todos-Liste ausgeführt wird\n  useEffect(() => {\n    console.log('Todos updated:', todos);\n  }, [todos]);\n\n  // Funktion zum Bearbeiten des Status der Checkbox einer Aufgabe\n  const handleCheckboxChange = async (id) => {\n    console.log('Checkbox changed for ID:', id);\n    const updatedTodos = todos.map(todo => {\n      if (todo.taskId === id) {\n        const updatedTodo = { ...todo, completed: !todo.completed };\n        if (updatedTodo.completed) {\n          updatedTodo.categoryId = 7; // Kategorie-ID auf 7 setzen, wenn die Aufgabe abgeschlossen ist\n        }\n        return updatedTodo;\n      }\n      return todo;\n    });\n    setTasks(updatedTodos); // Aktualisieren der todos-Liste im State\n\n    const updatedTask = updatedTodos.find(todo => todo.taskId === id); // Aktualisierte Aufgabe finden\n    try {\n      await updateTask(updatedTask); // API-Aufruf zum Aktualisieren der Aufgabe\n      console.log('Fetching tasks after checkbox change...');\n      await fetchTasksData(); // Aktualisieren der Aufgabenliste nach der Aktualisierung\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  // Funktion zum Löschen einer Aufgabe\n  const handleDeleteClick = async (id) => {\n    console.log('Deleting task with ID:', id);\n    try {\n      await deleteTask(id); // API-Aufruf zum Löschen der Aufgabe\n      console.log('Fetching tasks after delete...');\n      await fetchTasksData(); // Aktualisieren der Aufgabenliste nach dem Löschen\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n    }\n  };\n\n  // Funktion, die aufgerufen wird, wenn auf eine Aufgabe geklickt wird\n  const handleTodoClick = (id) => {\n    console.log('Todo clicked with ID:', id);\n    setSelectedTodoId(id); // Ausgewählte Aufgaben-ID im State setzen\n  };\n\n  // Funktion zum Bearbeiten einer Aufgabe\n  const handleEditClick = (todo) => {\n    onEditTodo(todo); // Funktion zum Bearbeiten der Aufgabe aufrufen\n  };\n\n  // Funktion zum Ändern des Datums einer Aufgabe\n  const handleDateChange = async (id, date, purpose) => {\n    const formattedDate = date.toISOString().split('T')[0]; // Datum im Format \"yyyy-MM-dd\" formatieren\n    console.log(`Updating ${purpose} date to:`, formattedDate);\n    try {\n      const updatedTodos = todos.map(todo =>\n        todo.taskId === id ? { ...todo, [`${purpose}Date`]: formattedDate } : todo\n      );\n      setTasks(updatedTodos); // Todos-Liste im State aktualisieren\n\n      const updatedTask = updatedTodos.find(todo => todo.taskId === id); // Aktualisierte Aufgabe finden\n      await updateTask(updatedTask); // API-Aufruf zum Aktualisieren der Aufgabe\n      console.log('Fetching tasks after date change...');\n      await fetchTasksData(); // Aktualisieren der Aufgabenliste nach der Aktualisierung\n    } catch (error) {\n      console.error('Error updating date:', error);\n    }\n  };\n\n  const today = startOfToday(); // Heutiges Datum\n\n  // Filtern der Aufgaben basierend auf der ausgewählten Kategorie\n  const filteredTodos = todos.filter(todo => {\n    switch (selectedCategory.name) {\n      case 'Planned':\n        return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n      case 'Today':\n      case 'Personal':\n      case 'Work':\n      case 'Any Time':\n        return todo.categoryId === selectedCategory.id;\n      case 'All Tasks':\n        return !todo.planDate && todo.categoryId !== 7;\n      case 'Logbook':\n        return todo.categoryId === 7;\n      default:\n        return todo.categoryId === selectedCategory.id;\n    }\n  });\n\n  return (\n    <fieldset>\n      <legend className=\"sr-only\">Tasks</legend>\n      <div className=\"space-y-1\">\n        {filteredTodos.map(todo => (\n          <ToDo\n            key={todo.taskId} // Verwendung der taskId als Schlüssel\n            todo={todo}\n            handleCheckboxChange={() => handleCheckboxChange(todo.taskId)}\n            handleTodoClick={() => handleTodoClick(todo.taskId)}\n            handleDelete={() => handleDeleteClick(todo.taskId)}\n            handleEditClick={() => handleEditClick(todo)}\n            isDeleteMode={isDeleteMode}\n            onDateChange={handleDateChange}\n            isSelected={todo.taskId === selectedTodoId} // Übergeben des ausgewählten Zustands\n            isTodayCategory={selectedCategory.name === 'Today'}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}