{"ast":null,"code":"export const STANDARD_CATEGORIES = {\n  ALL_TASKS: 'All Tasks',\n  TODAY: 'Today',\n  PLANNED: 'Planned',\n  ANY_TIME: 'Any Time',\n  WORK: 'Work',\n  PERSONAL: 'Personal',\n  LOGBOOK: 'Logbook'\n};\nexport const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {\n    [STANDARD_CATEGORIES.ALL_TASKS]: [],\n    [STANDARD_CATEGORIES.TODAY]: [],\n    [STANDARD_CATEGORIES.PLANNED]: [],\n    [STANDARD_CATEGORIES.ANY_TIME]: [],\n    [STANDARD_CATEGORIES.WORK]: [],\n    [STANDARD_CATEGORIES.PERSONAL]: [],\n    [STANDARD_CATEGORIES.LOGBOOK]: [],\n    customCategories: {}\n  };\n  tasks.forEach(task => {\n    // Add to \"All Tasks\"\n    categorizedTasks[STANDARD_CATEGORIES.ALL_TASKS].push(task);\n    if (task.completed) {\n      categorizedTasks[STANDARD_CATEGORIES.LOGBOOK].push(task);\n    } else if (task.planDate) {\n      categorizedTasks[STANDARD_CATEGORIES.PLANNED].push(task);\n    } else {\n      const category = categories.find(category => category.categoryId === task.categoryId);\n      if (category) {\n        if (!categorizedTasks.customCategories[category.categoryId]) {\n          categorizedTasks.customCategories[category.categoryId] = [];\n        }\n        categorizedTasks.customCategories[category.categoryId].push(task);\n\n        // Check for standard categories based on name\n        if (category.name === STANDARD_CATEGORIES.TODAY) {\n          categorizedTasks[STANDARD_CATEGORIES.TODAY].push(task);\n        } else if (category.name === STANDARD_CATEGORIES.WORK) {\n          categorizedTasks[STANDARD_CATEGORIES.WORK].push(task);\n        } else if (category.name === STANDARD_CATEGORIES.PERSONAL) {\n          categorizedTasks[STANDARD_CATEGORIES.PERSONAL].push(task);\n        }\n      } else {\n        categorizedTasks[STANDARD_CATEGORIES.ANY_TIME].push(task);\n      }\n    }\n  });\n  return categorizedTasks;\n};","map":{"version":3,"names":["STANDARD_CATEGORIES","ALL_TASKS","TODAY","PLANNED","ANY_TIME","WORK","PERSONAL","LOGBOOK","categorizeTasks","tasks","categories","categorizedTasks","customCategories","forEach","task","push","completed","planDate","category","find","categoryId","name"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const STANDARD_CATEGORIES = {\n  ALL_TASKS: 'All Tasks',\n  TODAY: 'Today',\n  PLANNED: 'Planned',\n  ANY_TIME: 'Any Time',\n  WORK: 'Work',\n  PERSONAL: 'Personal',\n  LOGBOOK: 'Logbook'\n};\n\nexport const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {\n    [STANDARD_CATEGORIES.ALL_TASKS]: [],\n    [STANDARD_CATEGORIES.TODAY]: [],\n    [STANDARD_CATEGORIES.PLANNED]: [],\n    [STANDARD_CATEGORIES.ANY_TIME]: [],\n    [STANDARD_CATEGORIES.WORK]: [],\n    [STANDARD_CATEGORIES.PERSONAL]: [],\n    [STANDARD_CATEGORIES.LOGBOOK]: [],\n    customCategories: {}\n  };\n\n  tasks.forEach(task => {\n    // Add to \"All Tasks\"\n    categorizedTasks[STANDARD_CATEGORIES.ALL_TASKS].push(task);\n\n    if (task.completed) {\n      categorizedTasks[STANDARD_CATEGORIES.LOGBOOK].push(task);\n    } else if (task.planDate) {\n      categorizedTasks[STANDARD_CATEGORIES.PLANNED].push(task);\n    } else {\n      const category = categories.find(category => category.categoryId === task.categoryId);\n      if (category) {\n        if (!categorizedTasks.customCategories[category.categoryId]) {\n          categorizedTasks.customCategories[category.categoryId] = [];\n        }\n        categorizedTasks.customCategories[category.categoryId].push(task);\n\n        // Check for standard categories based on name\n        if (category.name === STANDARD_CATEGORIES.TODAY) {\n          categorizedTasks[STANDARD_CATEGORIES.TODAY].push(task);\n        } else if (category.name === STANDARD_CATEGORIES.WORK) {\n          categorizedTasks[STANDARD_CATEGORIES.WORK].push(task);\n        } else if (category.name === STANDARD_CATEGORIES.PERSONAL) {\n          categorizedTasks[STANDARD_CATEGORIES.PERSONAL].push(task);\n        }\n      } else {\n        categorizedTasks[STANDARD_CATEGORIES.ANY_TIME].push(task);\n      }\n    }\n  });\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG;EACjCC,SAAS,EAAE,WAAW;EACtBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,UAAU;EACpBC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG;IACvB,CAACX,mBAAmB,CAACC,SAAS,GAAG,EAAE;IACnC,CAACD,mBAAmB,CAACE,KAAK,GAAG,EAAE;IAC/B,CAACF,mBAAmB,CAACG,OAAO,GAAG,EAAE;IACjC,CAACH,mBAAmB,CAACI,QAAQ,GAAG,EAAE;IAClC,CAACJ,mBAAmB,CAACK,IAAI,GAAG,EAAE;IAC9B,CAACL,mBAAmB,CAACM,QAAQ,GAAG,EAAE;IAClC,CAACN,mBAAmB,CAACO,OAAO,GAAG,EAAE;IACjCK,gBAAgB,EAAE,CAAC;EACrB,CAAC;EAEDH,KAAK,CAACI,OAAO,CAACC,IAAI,IAAI;IACpB;IACAH,gBAAgB,CAACX,mBAAmB,CAACC,SAAS,CAAC,CAACc,IAAI,CAACD,IAAI,CAAC;IAE1D,IAAIA,IAAI,CAACE,SAAS,EAAE;MAClBL,gBAAgB,CAACX,mBAAmB,CAACO,OAAO,CAAC,CAACQ,IAAI,CAACD,IAAI,CAAC;IAC1D,CAAC,MAAM,IAAIA,IAAI,CAACG,QAAQ,EAAE;MACxBN,gBAAgB,CAACX,mBAAmB,CAACG,OAAO,CAAC,CAACY,IAAI,CAACD,IAAI,CAAC;IAC1D,CAAC,MAAM;MACL,MAAMI,QAAQ,GAAGR,UAAU,CAACS,IAAI,CAACD,QAAQ,IAAIA,QAAQ,CAACE,UAAU,KAAKN,IAAI,CAACM,UAAU,CAAC;MACrF,IAAIF,QAAQ,EAAE;QACZ,IAAI,CAACP,gBAAgB,CAACC,gBAAgB,CAACM,QAAQ,CAACE,UAAU,CAAC,EAAE;UAC3DT,gBAAgB,CAACC,gBAAgB,CAACM,QAAQ,CAACE,UAAU,CAAC,GAAG,EAAE;QAC7D;QACAT,gBAAgB,CAACC,gBAAgB,CAACM,QAAQ,CAACE,UAAU,CAAC,CAACL,IAAI,CAACD,IAAI,CAAC;;QAEjE;QACA,IAAII,QAAQ,CAACG,IAAI,KAAKrB,mBAAmB,CAACE,KAAK,EAAE;UAC/CS,gBAAgB,CAACX,mBAAmB,CAACE,KAAK,CAAC,CAACa,IAAI,CAACD,IAAI,CAAC;QACxD,CAAC,MAAM,IAAII,QAAQ,CAACG,IAAI,KAAKrB,mBAAmB,CAACK,IAAI,EAAE;UACrDM,gBAAgB,CAACX,mBAAmB,CAACK,IAAI,CAAC,CAACU,IAAI,CAACD,IAAI,CAAC;QACvD,CAAC,MAAM,IAAII,QAAQ,CAACG,IAAI,KAAKrB,mBAAmB,CAACM,QAAQ,EAAE;UACzDK,gBAAgB,CAACX,mBAAmB,CAACM,QAAQ,CAAC,CAACS,IAAI,CAACD,IAAI,CAAC;QAC3D;MACF,CAAC,MAAM;QACLH,gBAAgB,CAACX,mBAAmB,CAACI,QAAQ,CAAC,CAACW,IAAI,CAACD,IAAI,CAAC;MAC3D;IACF;EACF,CAAC,CAAC;EAEF,OAAOH,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}