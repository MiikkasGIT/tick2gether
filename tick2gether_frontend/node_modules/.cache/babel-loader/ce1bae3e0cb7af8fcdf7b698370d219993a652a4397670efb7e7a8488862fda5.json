{"ast":null,"code":"// src/websocket.js\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\n// WebSocketService Klasse\nclass WebSocketService {\n  constructor(url) {\n    this.url = url;\n    this.stompClient = null;\n    this.isConnected = false;\n  }\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.stompClient) {\n      console.warn('WebSocket already connected.');\n      return;\n    }\n    const socket = new SockJS(this.url);\n    this.stompClient = new Client({\n      webSocketFactory: () => socket,\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000,\n      onConnect: frame => {\n        console.log('WebSocket connected');\n        this.isConnected = true;\n        this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n      },\n      onStompError: frame => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n      onWebSocketClose: event => {\n        console.warn('WebSocket closed:', event);\n        this.isConnected = false;\n      },\n      onWebSocketError: error => {\n        console.error('WebSocket error:', error);\n        this.isConnected = false;\n      }\n    });\n    this.stompClient.activate();\n  }\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (!this.isConnected || !this.stompClient) {\n      console.error('STOMP client is not connected.');\n      return;\n    }\n    try {\n      this.stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Task message received for user:', userId, parsedMessage);\n        onTaskMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to task topic: /user/${userId}/queue/tasks`);\n      this.stompClient.subscribe(`/user/${userId}/queue/categories`, message => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Category message received for user:', userId, parsedMessage);\n        onCategoryMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to category topic: /user/${userId}/queue/categories`);\n    } catch (error) {\n      console.error('Subscription error:', error);\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n      this.stompClient = null;\n      this.isConnected = false;\n      console.log('WebSocket disconnected');\n    } else {\n      console.warn('No WebSocket connection to disconnect.');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.publish({\n        destination: destination,\n        body: JSON.stringify(message)\n      });\n      console.log('Sending WebSocket message:', message);\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n}\n\n// Instanziieren der WebSocketService-Klasse\nconst webSocketService = new WebSocketService('YOUR_WEBSOCKET_URL'); // Ersetze mit deiner tatsächlichen URL\n\n// Benannte Exporte\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Client","SockJS","WebSocketService","constructor","url","stompClient","isConnected","connect","userId","onTaskMessageReceived","onCategoryMessageReceived","console","warn","socket","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","log","subscribeToTopics","onStompError","error","headers","body","onWebSocketClose","event","onWebSocketError","activate","subscribe","message","parsedMessage","JSON","parse","disconnect","deactivate","sendMessage","destination","connected","publish","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["// src/websocket.js\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\n// WebSocketService Klasse\nclass WebSocketService {\n  constructor(url) {\n    this.url = url;\n    this.stompClient = null;\n    this.isConnected = false;\n  }\n\n  connect(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (this.stompClient) {\n      console.warn('WebSocket already connected.');\n      return;\n    }\n\n    const socket = new SockJS(this.url);\n    this.stompClient = new Client({\n      webSocketFactory: () => socket,\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000,\n      onConnect: (frame) => {\n        console.log('WebSocket connected');\n        this.isConnected = true;\n        this.subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived);\n      },\n      onStompError: (frame) => {\n        console.error('Broker reported error: ' + frame.headers['message']);\n        console.error('Additional details: ' + frame.body);\n      },\n      onWebSocketClose: (event) => {\n        console.warn('WebSocket closed:', event);\n        this.isConnected = false;\n      },\n      onWebSocketError: (error) => {\n        console.error('WebSocket error:', error);\n        this.isConnected = false;\n      }\n    });\n\n    this.stompClient.activate();\n  }\n\n  subscribeToTopics(userId, onTaskMessageReceived, onCategoryMessageReceived) {\n    if (!this.isConnected || !this.stompClient) {\n      console.error('STOMP client is not connected.');\n      return;\n    }\n\n    try {\n      this.stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Task message received for user:', userId, parsedMessage);\n        onTaskMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to task topic: /user/${userId}/queue/tasks`);\n\n      this.stompClient.subscribe(`/user/${userId}/queue/categories`, (message) => {\n        const parsedMessage = JSON.parse(message.body);\n        console.log('Category message received for user:', userId, parsedMessage);\n        onCategoryMessageReceived(parsedMessage);\n      });\n      console.log(`SUBSCRIBED to category topic: /user/${userId}/queue/categories`);\n    } catch (error) {\n      console.error('Subscription error:', error);\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n      this.stompClient = null;\n      this.isConnected = false;\n      console.log('WebSocket disconnected');\n    } else {\n      console.warn('No WebSocket connection to disconnect.');\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.publish({\n        destination: destination,\n        body: JSON.stringify(message),\n      });\n      console.log('Sending WebSocket message:', message);\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n}\n\n// Instanziieren der WebSocketService-Klasse\nconst webSocketService = new WebSocketService('YOUR_WEBSOCKET_URL'); // Ersetze mit deiner tatsächlichen URL\n\n// Benannte Exporte\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onTaskMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}