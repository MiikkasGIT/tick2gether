{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onMessageReceived, categoryId = null, taskId = null) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    const token = localStorage.getItem('jwtToken');\n    this.stompClient.connect({\n      Authorization: `Bearer ${token}`\n    }, () => {\n      console.log('Connected to WebSocket');\n\n      // Set up subscriptions\n      if (categoryId) {\n        this.stompClient.subscribe(`/topic/category/${categoryId}`, message => {\n          if (message.body) {\n            try {\n              const parsedMessage = JSON.parse(message.body);\n              onMessageReceived('category', parsedMessage);\n            } catch (error) {\n              console.error('Failed to parse category message:', error);\n            }\n          }\n        });\n      }\n      if (taskId) {\n        this.stompClient.subscribe(`/topic/task/${taskId}`, message => {\n          if (message.body) {\n            try {\n              const parsedMessage = JSON.parse(message.body);\n              onMessageReceived('task', parsedMessage);\n            } catch (error) {\n              console.error('Failed to parse task message:', error);\n            }\n          }\n        });\n      }\n      this.stompClient.subscribe('/topic/greetings', message => {\n        if (message.body) {\n          try {\n            const parsedMessage = JSON.parse(message.body);\n            onMessageReceived('greetings', parsedMessage);\n          } catch (error) {\n            console.error('Failed to parse greetings message:', error);\n          }\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('STOMP client is not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (type, id, message) => {\n  console.log('Type:', type); // Debugging-Ausgabe\n  console.log('ID:', id); // Debugging-Ausgabe\n  const destination = `/app/${type}/${id}`.replace(/\\/{2,}/g, '/'); // Entfernt doppelte Slashes\n  console.log('Formatted destination:', destination); // Debugging-Ausgabe\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","categoryId","taskId","socket","over","token","localStorage","getItem","Authorization","console","log","subscribe","message","body","parsedMessage","JSON","parse","error","setTimeout","disconnect","sendMessage","destination","connected","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage","type","id","replace"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    connect(onMessageReceived, categoryId = null, taskId = null) {\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n\n        const token = localStorage.getItem('jwtToken');\n\n        this.stompClient.connect(\n            { Authorization: `Bearer ${token}` },\n            () => {\n                console.log('Connected to WebSocket');\n\n                // Set up subscriptions\n                if (categoryId) {\n                    this.stompClient.subscribe(`/topic/category/${categoryId}`, (message) => {\n                        if (message.body) {\n                            try {\n                                const parsedMessage = JSON.parse(message.body);\n                                onMessageReceived('category', parsedMessage);\n                            } catch (error) {\n                                console.error('Failed to parse category message:', error);\n                            }\n                        }\n                    });\n                }\n\n                if (taskId) {\n                    this.stompClient.subscribe(`/topic/task/${taskId}`, (message) => {\n                        if (message.body) {\n                            try {\n                                const parsedMessage = JSON.parse(message.body);\n                                onMessageReceived('task', parsedMessage);\n                            } catch (error) {\n                                console.error('Failed to parse task message:', error);\n                            }\n                        }\n                    });\n                }\n\n                this.stompClient.subscribe('/topic/greetings', (message) => {\n                    if (message.body) {\n                        try {\n                            const parsedMessage = JSON.parse(message.body);\n                            onMessageReceived('greetings', parsedMessage);\n                        } catch (error) {\n                            console.error('Failed to parse greetings message:', error);\n                        }\n                    }\n                });\n            },\n            (error) => {\n                console.error('Error connecting to WebSocket:', error);\n                setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n            }\n        );\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n            });\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            this.stompClient.send(destination, {}, JSON.stringify(message));\n        } else {\n            console.error('STOMP client is not connected');\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onMessageReceived) => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (type, id, message) => {\n    console.log('Type:', type); // Debugging-Ausgabe\n    console.log('ID:', id); // Debugging-Ausgabe\n    const destination = `/app/${type}/${id}`.replace(/\\/{2,}/g, '/'); // Entfernt doppelte Slashes\n    console.log('Formatted destination:', destination); // Debugging-Ausgabe\n    webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}