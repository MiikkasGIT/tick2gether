{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000\n  });\n  stompClient.onConnect = frame => {\n    console.log('WebSocket connected');\n    const taskSubscription = stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received for user:', userId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    console.log('SUBSCRIBED to task topic:', `/user/${userId}/queue/tasks`, taskSubscription);\n    const categorySubscription = stompClient.subscribe(`/user/${userId}/queue/categories`, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received for user:', userId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n    console.log('SUBSCRIBED to category topic:', `/user/${userId}/queue/categories`, categorySubscription);\n  };\n  stompClient.onStompError = frame => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n  stompClient.activate();\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message)\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\nexport const subscribeToSharedTask = (sharedTaskId, onTaskMessageReceived) => {\n  if (stompClient && stompClient.connected) {\n    const taskTopic = `/task/${sharedTaskId}/queue`;\n    const taskSubscription = stompClient.subscribe(taskTopic, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received for shared task:', sharedTaskId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    console.log(`SUBSCRIBED to shared task topic ${taskTopic}`, taskSubscription);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\nexport const subscribeToSharedCategory = (sharedCategoryId, onCategoryMessageReceived) => {\n  if (stompClient && stompClient.connected) {\n    const categoryTopic = `/category/${sharedCategoryId}/queue`;\n    const categorySubscription = stompClient.subscribe(categoryTopic, message => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received for shared category:', sharedCategoryId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n    console.log(`SUBSCRIBED to shared category topic ${categoryTopic}`, categorySubscription);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};","map":{"version":3,"names":["Client","SockJS","stompClient","connectWebSocket","userId","onTaskMessageReceived","onCategoryMessageReceived","socket","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","console","log","taskSubscription","subscribe","message","parsedMessage","JSON","parse","body","categorySubscription","onStompError","error","headers","activate","disconnectWebSocket","deactivate","sendWebSocketMessage","destination","connected","publish","stringify","subscribeToSharedTask","sharedTaskId","taskTopic","subscribeToSharedCategory","sharedCategoryId","categoryTopic"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nlet stompClient = null;\n\nexport const connectWebSocket = (userId, onTaskMessageReceived, onCategoryMessageReceived) => {\n  const socket = new SockJS('http://localhost:8080/ws');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n  });\n\n  stompClient.onConnect = (frame) => {\n    console.log('WebSocket connected');\n    \n    const taskSubscription = stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received for user:', userId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    console.log('SUBSCRIBED to task topic:', `/user/${userId}/queue/tasks`, taskSubscription);\n\n    const categorySubscription = stompClient.subscribe(`/user/${userId}/queue/categories`, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received for user:', userId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n    console.log('SUBSCRIBED to category topic:', `/user/${userId}/queue/categories`, categorySubscription);\n  };\n\n  stompClient.onStompError = (frame) => {\n    console.error('Broker reported error: ' + frame.headers['message']);\n    console.error('Additional details: ' + frame.body);\n  };\n\n  stompClient.activate();\n};\n\nexport const disconnectWebSocket = () => {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n    console.log('WebSocket disconnected');\n  }\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.publish({\n      destination: destination,\n      body: JSON.stringify(message),\n    });\n    console.log('Sending WebSocket message:', message);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n\nexport const subscribeToSharedTask = (sharedTaskId, onTaskMessageReceived) => {\n  if (stompClient && stompClient.connected) {\n    const taskTopic = `/task/${sharedTaskId}/queue`;\n    const taskSubscription = stompClient.subscribe(taskTopic, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Task message received for shared task:', sharedTaskId, parsedMessage);\n      onTaskMessageReceived(parsedMessage);\n    });\n    console.log(`SUBSCRIBED to shared task topic ${taskTopic}`, taskSubscription);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n\nexport const subscribeToSharedCategory = (sharedCategoryId, onCategoryMessageReceived) => {\n  if (stompClient && stompClient.connected) {\n    const categoryTopic = `/category/${sharedCategoryId}/queue`;\n    const categorySubscription = stompClient.subscribe(categoryTopic, (message) => {\n      const parsedMessage = JSON.parse(message.body);\n      console.log('Category message received for shared category:', sharedCategoryId, parsedMessage);\n      onCategoryMessageReceived(parsedMessage);\n    });\n    console.log(`SUBSCRIBED to shared category topic ${categoryTopic}`, categorySubscription);\n  } else {\n    console.error('WebSocket is not connected');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}