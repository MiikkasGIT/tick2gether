{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const {\n      categoryId,\n      completed,\n      planDate\n    } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    if (categoryId !== 7) {\n      if (!categorizedTasks[1]) {\n        categorizedTasks[1] = [];\n      }\n      categorizedTasks[1].push(task); // All Tasks (excluding Logbook)\n    }\n    if (completed) {\n      if (!categorizedTasks[7]) {\n        categorizedTasks[7] = [];\n      }\n      categorizedTasks[7].push(task); // Logbook\n    } else {\n      if (categoryId === 2) {\n        if (!categorizedTasks[2]) {\n          categorizedTasks[2] = [];\n        }\n        categorizedTasks[2].push(task); // Today\n      }\n      if (planDate) {\n        if (!categorizedTasks[3]) {\n          categorizedTasks[3] = [];\n        }\n        categorizedTasks[3].push(task); // Planned\n      }\n      if (categoryId === 4) {\n        if (!categorizedTasks[4]) {\n          categorizedTasks[4] = [];\n        }\n        categorizedTasks[4].push(task); // Any Time\n      }\n      if (categoryId === 5) {\n        if (!categorizedTasks[5]) {\n          categorizedTasks[5] = [];\n        }\n        categorizedTasks[5].push(task); // Work\n      }\n      if (categoryId === 6) {\n        if (!categorizedTasks[6]) {\n          categorizedTasks[6] = [];\n        }\n        categorizedTasks[6].push(task); // Personal\n      }\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","task","completed","planDate","console","log","taskId","push"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const { categoryId, completed, planDate } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    if (categoryId !== 7) {\n      if (!categorizedTasks[1]) {\n        categorizedTasks[1] = [];\n      }\n      categorizedTasks[1].push(task); // All Tasks (excluding Logbook)\n    }\n    if (completed) {\n      if (!categorizedTasks[7]) {\n        categorizedTasks[7] = [];\n      }\n      categorizedTasks[7].push(task); // Logbook\n    } else {\n      if (categoryId === 2) {\n        if (!categorizedTasks[2]) {\n          categorizedTasks[2] = [];\n        }\n        categorizedTasks[2].push(task); // Today\n      }\n      if (planDate) {\n        if (!categorizedTasks[3]) {\n          categorizedTasks[3] = [];\n        }\n        categorizedTasks[3].push(task); // Planned\n      }\n      if (categoryId === 4) {\n        if (!categorizedTasks[4]) {\n          categorizedTasks[4] = [];\n        }\n        categorizedTasks[4].push(task); // Any Time\n      }\n      if (categoryId === 5) {\n        if (!categorizedTasks[5]) {\n          categorizedTasks[5] = [];\n        }\n        categorizedTasks[5].push(task); // Work\n      }\n      if (categoryId === 6) {\n        if (!categorizedTasks[6]) {\n          categorizedTasks[6] = [];\n        }\n        categorizedTasks[6].push(task); // Personal\n      }\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;;EAEF;EACAL,KAAK,CAACG,OAAO,CAACG,IAAI,IAAI;IACpB,MAAM;MAAED,UAAU;MAAEE,SAAS;MAAEC;IAAS,CAAC,GAAGF,IAAI;;IAEhD;IACAG,OAAO,CAACC,GAAG,CAAC,4BAA4BJ,IAAI,CAACK,MAAM,iBAAiBN,UAAU,EAAE,CAAC;;IAEjF;IACA,IAAI,CAACH,gBAAgB,CAACG,UAAU,CAAC,EAAE;MACjCH,gBAAgB,CAACG,UAAU,CAAC,GAAG,EAAE;IACnC;IACAH,gBAAgB,CAACG,UAAU,CAAC,CAACO,IAAI,CAACN,IAAI,CAAC;;IAEvC;IACA,IAAID,UAAU,KAAK,CAAC,EAAE;MACpB,IAAI,CAACH,gBAAgB,CAAC,CAAC,CAAC,EAAE;QACxBA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;MAC1B;MACAA,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;IAClC;IACA,IAAIC,SAAS,EAAE;MACb,IAAI,CAACL,gBAAgB,CAAC,CAAC,CAAC,EAAE;QACxBA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;MAC1B;MACAA,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;IAClC,CAAC,MAAM;MACL,IAAID,UAAU,KAAK,CAAC,EAAE;QACpB,IAAI,CAACH,gBAAgB,CAAC,CAAC,CAAC,EAAE;UACxBA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAC1B;QACAA,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAClC;MACA,IAAIE,QAAQ,EAAE;QACZ,IAAI,CAACN,gBAAgB,CAAC,CAAC,CAAC,EAAE;UACxBA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAC1B;QACAA,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAClC;MACA,IAAID,UAAU,KAAK,CAAC,EAAE;QACpB,IAAI,CAACH,gBAAgB,CAAC,CAAC,CAAC,EAAE;UACxBA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAC1B;QACAA,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAClC;MACA,IAAID,UAAU,KAAK,CAAC,EAAE;QACpB,IAAI,CAACH,gBAAgB,CAAC,CAAC,CAAC,EAAE;UACxBA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAC1B;QACAA,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAClC;MACA,IAAID,UAAU,KAAK,CAAC,EAAE;QACpB,IAAI,CAACH,gBAAgB,CAAC,CAAC,CAAC,EAAE;UACxBA,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE;QAC1B;QACAA,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAClC;IACF;EACF,CAAC,CAAC;;EAEF;EACAG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,gBAAgB,CAAC;EAEnD,OAAOA,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}