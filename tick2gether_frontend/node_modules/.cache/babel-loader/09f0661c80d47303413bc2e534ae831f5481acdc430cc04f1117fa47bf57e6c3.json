{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx\";\nimport React from 'react';\nimport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage } from './webSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.handleMessageReceived = this.handleMessageReceived.bind(this);\n  }\n  componentDidMount() {\n    const userId = this.props.userId;\n    connectWebSocket(userId, this.handleMessageReceived);\n    this.fetchTodos();\n  }\n  componentWillUnmount() {\n    disconnectWebSocket();\n  }\n  fetchTodos() {\n    // API-Aufruf, um die Aufgaben abzurufen und den Status zu aktualisieren\n    // Beispiel:\n    fetch(`/api/v1/tasks/${this.props.userId}`).then(response => response.json()).then(data => {\n      this.setState({\n        todos: data\n      });\n    }).catch(error => console.error('Error fetching tasks:', error));\n  }\n  handleMessageReceived(message) {\n    console.log(\"WebSocket message received:\", message);\n    if (message.type === 'TASK_UPDATE') {\n      // Aktualisieren Sie die Aufgabenliste basierend auf der empfangenen Nachricht\n      this.updateTaskInState(message.task);\n    }\n  }\n  updateTaskInState(updatedTask) {\n    this.setState(prevState => {\n      const todos = prevState.todos.map(task => task.taskId === updatedTask.taskId ? updatedTask : task);\n      return {\n        todos\n      };\n    });\n  }\n  handleCheckboxChange(taskId) {\n    const task = this.state.todos.find(task => task.taskId === taskId);\n    if (task) {\n      const updatedTask = {\n        ...task,\n        completed: !task.completed\n      };\n\n      // API-Aufruf, um die Aufgabe zu aktualisieren\n      fetch(`/api/v1/task/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      }).then(response => response.json()).then(data => {\n        this.updateTaskInState(data);\n        // WebSocket-Nachricht senden, um andere Benutzer zu benachrichtigen\n        sendWebSocketMessage('/app/updateTask', {\n          task: data\n        });\n      }).catch(error => console.error('Error updating task:', error));\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"To-Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.todos.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: task.completed,\n              onChange: () => this.handleCheckboxChange(task.taskId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), task.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, task.taskId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default ToDoList;","map":{"version":3,"names":["React","connectWebSocket","disconnectWebSocket","sendWebSocketMessage","jsxDEV","_jsxDEV","ToDoList","Component","constructor","props","state","todos","handleMessageReceived","bind","componentDidMount","userId","fetchTodos","componentWillUnmount","fetch","then","response","json","data","setState","catch","error","console","message","log","type","updateTaskInState","task","updatedTask","prevState","map","taskId","handleCheckboxChange","find","completed","method","headers","body","JSON","stringify","render","children","fileName","_jsxFileName","lineNumber","columnNumber","checked","onChange","text"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx"],"sourcesContent":["import React from 'react';\nimport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage } from './webSocketService';\n\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.handleMessageReceived = this.handleMessageReceived.bind(this);\n  }\n\n  componentDidMount() {\n    const userId = this.props.userId;\n    connectWebSocket(userId, this.handleMessageReceived);\n    this.fetchTodos();\n  }\n\n  componentWillUnmount() {\n    disconnectWebSocket();\n  }\n\n  fetchTodos() {\n    // API-Aufruf, um die Aufgaben abzurufen und den Status zu aktualisieren\n    // Beispiel:\n    fetch(`/api/v1/tasks/${this.props.userId}`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ todos: data });\n      })\n      .catch(error => console.error('Error fetching tasks:', error));\n  }\n\n  handleMessageReceived(message) {\n    console.log(\"WebSocket message received:\", message);\n    if (message.type === 'TASK_UPDATE') {\n      // Aktualisieren Sie die Aufgabenliste basierend auf der empfangenen Nachricht\n      this.updateTaskInState(message.task);\n    }\n  }\n\n  updateTaskInState(updatedTask) {\n    this.setState(prevState => {\n      const todos = prevState.todos.map(task =>\n        task.taskId === updatedTask.taskId ? updatedTask : task\n      );\n      return { todos };\n    });\n  }\n\n  handleCheckboxChange(taskId) {\n    const task = this.state.todos.find(task => task.taskId === taskId);\n    if (task) {\n      const updatedTask = { ...task, completed: !task.completed };\n\n      // API-Aufruf, um die Aufgabe zu aktualisieren\n      fetch(`/api/v1/task/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedTask),\n      })\n        .then(response => response.json())\n        .then(data => {\n          this.updateTaskInState(data);\n          // WebSocket-Nachricht senden, um andere Benutzer zu benachrichtigen\n          sendWebSocketMessage('/app/updateTask', { task: data });\n        })\n        .catch(error => console.error('Error updating task:', error));\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>To-Do List</h1>\n        <ul>\n          {this.state.todos.map(task => (\n            <li key={task.taskId}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={task.completed}\n                  onChange={() => this.handleCheckboxChange(task.taskId)}\n                />\n                {task.text}\n              </label>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}