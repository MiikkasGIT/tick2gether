{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useDashboard.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { fetchTasks, addTask, deleteTask, fetchUserId, fetchEmail, addCategory, fetchCategories } from '../api';\nimport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage, sendUpdateTaskMessage } from '../websocket';\nconst useDashboard = navigate => {\n  _s();\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n  const initializeDashboard = useCallback(async () => {\n    try {\n      const email = await fetchEmail();\n      const fetchedUserId = await fetchUserId(email);\n      if (fetchedUserId) {\n        setUserId(fetchedUserId);\n        const fetchedTasks = await fetchTasks();\n        setTasks(fetchedTasks);\n        const fetchedCategories = await fetchCategories(fetchedUserId);\n        setCategories(fetchedCategories);\n        if (fetchedCategories.length > 0) {\n          setSelectedCategory(fetchedCategories[0]);\n        }\n      } else {\n        navigate('/login');\n      }\n    } catch (error) {\n      navigate('/login');\n    }\n  }, [navigate]);\n  useEffect(() => {\n    initializeDashboard();\n  }, [initializeDashboard]);\n  useEffect(() => {\n    const handleWebSocketMessage = message => {\n      console.log('Received WebSocket message:', message);\n      const {\n        type,\n        taskId,\n        ...updatedTaskData\n      } = message;\n      if (type === 'TASK_UPDATE') {\n        setTasks(prevTasks => {\n          const taskIndex = prevTasks.findIndex(task => task.taskId === taskId);\n          if (taskIndex !== -1) {\n            const updatedTasks = [...prevTasks];\n            updatedTasks[taskIndex] = {\n              ...prevTasks[taskIndex],\n              ...updatedTaskData\n            };\n            return updatedTasks;\n          } else {\n            return [...prevTasks, {\n              taskId,\n              ...updatedTaskData\n            }];\n          }\n        });\n      }\n    };\n    if (userId) {\n      connectWebSocket(handleWebSocketMessage);\n      return () => disconnectWebSocket();\n    }\n  }, [userId]);\n  const handleAddNewTask = async newTask => {\n    try {\n      const formattedTask = {\n        ...newTask,\n        categoryId: selectedCategory.id,\n        userId\n      };\n      const addedTask = await addTask(formattedTask, userId);\n      setShowAddTaskPopUp(false);\n      setTasks(prevTasks => [...prevTasks, addedTask]);\n      sendUpdateTaskMessage(addedTask);\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n  const handleSaveTask = async updatedTask => {\n    try {\n      const taskToUpdate = {\n        ...updatedTask,\n        userId,\n        taskId: currentTask.taskId,\n        categoryId: (selectedCategory === null || selectedCategory === void 0 ? void 0 : selectedCategory.id) || currentTask.categoryId\n      };\n      setShowEditTaskPopUp(false);\n      setTasks(prevTasks => prevTasks.map(task => task.taskId === taskToUpdate.taskId ? taskToUpdate : task));\n      sendUpdateTaskMessage(taskToUpdate);\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n  const handleDeleteTask = async id => {\n    try {\n      await deleteTask(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.taskId !== id));\n      sendWebSocketMessage(`/app/deleteTask/${id}`, {\n        type: 'TASK_DELETE',\n        taskId: id\n      });\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const handleAddCategory = async newCategory => {\n    try {\n      const data = await addCategory(newCategory);\n      const newCategoryObject = {\n        id: data.categoryId,\n        name: data.name\n      };\n      sendWebSocketMessage(`/app/updateCategory/${newCategoryObject.id}`, {\n        type: 'CATEGORY_UPDATE',\n        category: newCategoryObject\n      });\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n  return {\n    showEditTaskPopUp,\n    setShowEditTaskPopUp,\n    showAddCategoryPopUp,\n    setShowAddCategoryPopUp,\n    isDeleteMode,\n    setIsDeleteMode,\n    tasks,\n    setTasks,\n    categories,\n    setCategories,\n    selectedCategory,\n    setSelectedCategory,\n    currentTask,\n    setCurrentTask,\n    showAddTaskPopUp,\n    setShowAddTaskPopUp,\n    userId,\n    setUserId,\n    selectedTodoId,\n    setSelectedTodoId,\n    handleAddNewTask,\n    handleSaveTask,\n    handleDeleteTask,\n    handleAddCategory\n  };\n};\n_s(useDashboard, \"OkvhcxsGCYKggaaNOt975xXQ7Io=\");\nexport default useDashboard;","map":{"version":3,"names":["useState","useEffect","useCallback","fetchTasks","addTask","deleteTask","fetchUserId","fetchEmail","addCategory","fetchCategories","connectWebSocket","disconnectWebSocket","sendWebSocketMessage","sendUpdateTaskMessage","useDashboard","navigate","_s","showEditTaskPopUp","setShowEditTaskPopUp","showAddCategoryPopUp","setShowAddCategoryPopUp","isDeleteMode","setIsDeleteMode","tasks","setTasks","categories","setCategories","selectedCategory","setSelectedCategory","currentTask","setCurrentTask","showAddTaskPopUp","setShowAddTaskPopUp","userId","setUserId","selectedTodoId","setSelectedTodoId","initializeDashboard","email","fetchedUserId","fetchedTasks","fetchedCategories","length","error","handleWebSocketMessage","message","console","log","type","taskId","updatedTaskData","prevTasks","taskIndex","findIndex","task","updatedTasks","handleAddNewTask","newTask","formattedTask","categoryId","id","addedTask","handleSaveTask","updatedTask","taskToUpdate","map","handleDeleteTask","filter","handleAddCategory","newCategory","data","newCategoryObject","name","category","prevCategories"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/hooks/useDashboard.js"],"sourcesContent":["// hooks/useDashboard.js\nimport { useState, useEffect, useCallback } from 'react';\nimport { fetchTasks, addTask, deleteTask, fetchUserId, fetchEmail, addCategory, fetchCategories } from '../api';\nimport { connectWebSocket, disconnectWebSocket, sendWebSocketMessage, sendUpdateTaskMessage } from '../websocket';\n\nconst useDashboard = (navigate) => {\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n\n  const initializeDashboard = useCallback(async () => {\n    try {\n      const email = await fetchEmail();\n      const fetchedUserId = await fetchUserId(email);\n\n      if (fetchedUserId) {\n        setUserId(fetchedUserId);\n        const fetchedTasks = await fetchTasks();\n        setTasks(fetchedTasks);\n        const fetchedCategories = await fetchCategories(fetchedUserId);\n        setCategories(fetchedCategories);\n        if (fetchedCategories.length > 0) {\n          setSelectedCategory(fetchedCategories[0]);\n        }\n      } else {\n        navigate('/login');\n      }\n    } catch (error) {\n      navigate('/login');\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    initializeDashboard();\n  }, [initializeDashboard]);\n\n  useEffect(() => {\n    const handleWebSocketMessage = (message) => {\n      console.log('Received WebSocket message:', message);\n\n      const { type, taskId, ...updatedTaskData } = message;\n\n      if (type === 'TASK_UPDATE') {\n        setTasks(prevTasks => {\n          const taskIndex = prevTasks.findIndex(task => task.taskId === taskId);\n          if (taskIndex !== -1) {\n            const updatedTasks = [...prevTasks];\n            updatedTasks[taskIndex] = { ...prevTasks[taskIndex], ...updatedTaskData };\n            return updatedTasks;\n          } else {\n            return [...prevTasks, { taskId, ...updatedTaskData }];\n          }\n        });\n      }\n    };\n\n    if (userId) {\n      connectWebSocket(handleWebSocketMessage);\n      return () => disconnectWebSocket();\n    }\n  }, [userId]);\n\n  const handleAddNewTask = async (newTask) => {\n    try {\n      const formattedTask = { ...newTask, categoryId: selectedCategory.id, userId };\n      const addedTask = await addTask(formattedTask, userId);\n      setShowAddTaskPopUp(false);\n      setTasks(prevTasks => [...prevTasks, addedTask]);\n      sendUpdateTaskMessage(addedTask);\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  const handleSaveTask = async (updatedTask) => {\n    try {\n      const taskToUpdate = { ...updatedTask, userId, taskId: currentTask.taskId, categoryId: selectedCategory?.id || currentTask.categoryId };\n      setShowEditTaskPopUp(false);\n      setTasks(prevTasks => prevTasks.map(task => (task.taskId === taskToUpdate.taskId ? taskToUpdate : task)));\n      sendUpdateTaskMessage(taskToUpdate);\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n\n  const handleDeleteTask = async (id) => {\n    try {\n      await deleteTask(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.taskId !== id));\n      sendWebSocketMessage(`/app/deleteTask/${id}`, { type: 'TASK_DELETE', taskId: id });\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const handleAddCategory = async (newCategory) => {\n    try {\n      const data = await addCategory(newCategory);\n      const newCategoryObject = { id: data.categoryId, name: data.name };\n      sendWebSocketMessage(`/app/updateCategory/${newCategoryObject.id}`, { type: 'CATEGORY_UPDATE', category: newCategoryObject });\n      setCategories(prevCategories => [...prevCategories, newCategoryObject]);\n    } catch (error) {\n      console.error('Error adding category:', error);\n    }\n  };\n\n  return {\n    showEditTaskPopUp,\n    setShowEditTaskPopUp,\n    showAddCategoryPopUp,\n    setShowAddCategoryPopUp,\n    isDeleteMode,\n    setIsDeleteMode,\n    tasks,\n    setTasks,\n    categories,\n    setCategories,\n    selectedCategory,\n    setSelectedCategory,\n    currentTask,\n    setCurrentTask,\n    showAddTaskPopUp,\n    setShowAddTaskPopUp,\n    userId,\n    setUserId,\n    selectedTodoId,\n    setSelectedTodoId,\n    handleAddNewTask,\n    handleSaveTask,\n    handleDeleteTask,\n    handleAddCategory\n  };\n};\n\nexport default useDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}