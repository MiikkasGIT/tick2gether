{"ast":null,"code":"// websocket.js\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.connected = true;\n      this.stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n        console.log('Task message received:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Parsed task message:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Error parsing task message:', error);\n        }\n      });\n      this.stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n        console.log('Category message received:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Parsed category message:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Error parsing category message:', error);\n        }\n      });\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","connect","onTaskMessageReceived","onCategoryMessageReceived","userId","socket","over","console","log","subscribe","message","body","taskMessage","JSON","parse","error","categoryMessage","setTimeout","disconnect","sendMessage","destination","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["// websocket.js\nimport { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, () => {\n      console.log('Connected to WebSocket');\n      this.connected = true;\n      this.stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n        console.log('Task message received:', message.body);\n        try {\n          const taskMessage = JSON.parse(message.body);\n          console.log('Parsed task message:', taskMessage);\n          onTaskMessageReceived(taskMessage);\n        } catch (error) {\n          console.error('Error parsing task message:', error);\n        }\n      });\n      this.stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n        console.log('Category message received:', message.body);\n        try {\n          const categoryMessage = JSON.parse(message.body);\n          console.log('Parsed category message:', categoryMessage);\n          onCategoryMessageReceived(categoryMessage);\n        } catch (error) {\n          console.error('Error parsing category message:', error);\n        }\n      });\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}