{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n  }\n  connect(onMessageReceived) {\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    const token = localStorage.getItem('jwtToken');\n    console.log('JWT Token:', token); // Debugging-Ausgabe\n\n    this.stompClient.connect({\n      Authorization: `Bearer ${token}`\n    }, () => {\n      console.log('Connected to WebSocket');\n\n      // Set up multiple subscriptions\n      this.stompClient.subscribe('/topic/category', message => {\n        console.log('Received category message:', message);\n        if (message.body) {\n          try {\n            const parsedMessage = JSON.parse(message.body);\n            onMessageReceived('category', parsedMessage);\n          } catch (error) {\n            console.error('Failed to parse category message:', error);\n          }\n        }\n      });\n      this.stompClient.subscribe('/topic/task', message => {\n        console.log('Received task message:', message);\n        if (message.body) {\n          try {\n            const parsedMessage = JSON.parse(message.body);\n            onMessageReceived('task', parsedMessage);\n          } catch (error) {\n            console.error('Failed to parse task message:', error);\n          }\n        }\n      });\n\n      // Add other subscriptions as needed\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.stompClient.connected) {\n      console.log('Sending message to:', destination, message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('STOMP client is not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = onMessageReceived => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => {\n  console.log('Sending message to:', destination); // Debugging-Ausgabe\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connect","onMessageReceived","socket","over","token","localStorage","getItem","console","log","Authorization","subscribe","message","body","parsedMessage","JSON","parse","error","setTimeout","disconnect","sendMessage","destination","connected","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n    constructor() {\n        this.stompClient = null;\n    }\n\n    connect(onMessageReceived) {\n        const socket = new SockJS(SOCKET_URL);\n        this.stompClient = Stomp.over(socket);\n\n        const token = localStorage.getItem('jwtToken');\n        console.log('JWT Token:', token); // Debugging-Ausgabe\n\n        this.stompClient.connect(\n            { Authorization: `Bearer ${token}` },\n            () => {\n                console.log('Connected to WebSocket');\n\n                // Set up multiple subscriptions\n                this.stompClient.subscribe('/topic/category', (message) => {\n                    console.log('Received category message:', message);\n                    if (message.body) {\n                        try {\n                            const parsedMessage = JSON.parse(message.body);\n                            onMessageReceived('category', parsedMessage);\n                        } catch (error) {\n                            console.error('Failed to parse category message:', error);\n                        }\n                    }\n                });\n\n                this.stompClient.subscribe('/topic/task', (message) => {\n                    console.log('Received task message:', message);\n                    if (message.body) {\n                        try {\n                            const parsedMessage = JSON.parse(message.body);\n                            onMessageReceived('task', parsedMessage);\n                        } catch (error) {\n                            console.error('Failed to parse task message:', error);\n                        }\n                    }\n                });\n\n                // Add other subscriptions as needed\n            },\n            (error) => {\n                console.error('Error connecting to WebSocket:', error);\n                setTimeout(() => this.connect(onMessageReceived), 5000); // Reconnect after 5 seconds\n            }\n        );\n    }\n\n    disconnect() {\n        if (this.stompClient) {\n            this.stompClient.disconnect(() => {\n                console.log('Disconnected from WebSocket');\n            });\n        }\n    }\n\n    sendMessage(destination, message) {\n        if (this.stompClient && this.stompClient.connected) {\n            console.log('Sending message to:', destination, message);\n            this.stompClient.send(destination, {}, JSON.stringify(message));\n        } else {\n            console.error('STOMP client is not connected');\n        }\n    }\n}\n\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onMessageReceived) => webSocketService.connect(onMessageReceived);\nexport const disconnectWebSocket = () => webSocketService.disconnect();\nexport const sendWebSocketMessage = (destination, message) => {\n    console.log('Sending message to:', destination); // Debugging-Ausgabe\n    webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}