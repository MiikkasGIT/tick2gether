{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n  }\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId);\n    }, error => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n  subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    this.stompClient.subscribe(`/user/${userId}/topic/tasks`, message => {\n      console.log('Task message received:', message.body);\n      try {\n        const taskMessage = JSON.parse(message.body);\n        console.log('Parsed task message:', taskMessage);\n        onTaskMessageReceived(taskMessage);\n      } catch (error) {\n        console.error('Error parsing task message:', error);\n      }\n    });\n    this.stompClient.subscribe(`/user/${userId}/topic/categories`, message => {\n      console.log('Category message received:', message.body);\n      try {\n        const categoryMessage = JSON.parse(message.body);\n        console.log('Parsed category message:', categoryMessage);\n        onCategoryMessageReceived(categoryMessage);\n      } catch (error) {\n        console.error('Error parsing category message:', error);\n      }\n    });\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message to:', destination, 'with payload:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\nexport default webSocketService;","map":{"version":3,"names":["Stomp","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","connect","onTaskMessageReceived","onCategoryMessageReceived","userId","console","log","socket","over","frame","subscribeToTopics","error","setTimeout","subscribe","message","body","taskMessage","JSON","parse","categoryMessage","disconnect","sendMessage","destination","send","stringify","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Stomp } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000; // 5 seconds\n  }\n\n  connect(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    console.log('Attempting to connect to WebSocket...');\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame) => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      this.subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId);\n    }, (error) => {\n      console.error('Error connecting to WebSocket:', error);\n      this.connected = false;\n      setTimeout(() => this.connect(onTaskMessageReceived, onCategoryMessageReceived, userId), this.reconnectDelay);\n    });\n  }\n\n  subscribeToTopics(onTaskMessageReceived, onCategoryMessageReceived, userId) {\n    this.stompClient.subscribe(`/user/${userId}/topic/tasks`, (message) => {\n      console.log('Task message received:', message.body);\n      try {\n        const taskMessage = JSON.parse(message.body);\n        console.log('Parsed task message:', taskMessage);\n        onTaskMessageReceived(taskMessage);\n      } catch (error) {\n        console.error('Error parsing task message:', error);\n      }\n    });\n\n    this.stompClient.subscribe(`/user/${userId}/topic/categories`, (message) => {\n      console.log('Category message received:', message.body);\n      try {\n        const categoryMessage = JSON.parse(message.body);\n        console.log('Parsed category message:', categoryMessage);\n        onCategoryMessageReceived(categoryMessage);\n      } catch (error) {\n        console.error('Error parsing category message:', error);\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect(() => {\n        console.log('Disconnected from WebSocket');\n        this.connected = false;\n      });\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.stompClient && this.connected) {\n      console.log('Sending message to:', destination, 'with payload:', message);\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (onTaskMessageReceived, onCategoryMessageReceived, userId) => {\n  webSocketService.connect(onTaskMessageReceived, onCategoryMessageReceived, userId);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n\nexport default webSocketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}