{"ast":null,"code":"var _jsxFileName = \"/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isSameDay, isAfter, isBefore } from 'date-fns';\nimport { deleteTask } from '../api'; // Passe den Importpfad entsprechend deiner Dateistruktur an\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ToDoList({\n  todos = [],\n  setTodos,\n  isDeleteMode,\n  onEditTodo,\n  onDateChange,\n  selectedCategory\n}) {\n  _s();\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n  const handleCheckboxChange = id => {\n    const updatedTodos = todos.map(todo => todo.id === id ? {\n      ...todo,\n      completed: !todo.completed\n    } : todo);\n    setTodos(updatedTodos);\n  };\n  const handleDeleteClick = async id => {\n    try {\n      console.log('ID' + id);\n      await deleteTask(id); // Aufruf der API-Funktion zum Löschen des Todos\n      const updatedTodos = todos.filter(todo => todo.id !== id);\n      setTodos(updatedTodos);\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n      // Handle error (e.g., show error message to user)\n    }\n  };\n  const handleTodoClick = id => {\n    setSelectedTodoId(id); // Set selected todo id\n  };\n  const handleEditClick = todo => {\n    onEditTodo(todo);\n  };\n  const handleDateChange = async (id, date, purpose) => {\n    try {\n      const updatedTodos = todos.map(todo => todo.id === id ? {\n        ...todo,\n        [`${purpose}Date`]: date\n      } : todo);\n      setTodos(updatedTodos);\n      await onDateChange(id, date, purpose);\n    } catch (error) {\n      console.error('Error updating date:', error);\n    }\n  };\n  const today = startOfToday();\n  const filteredTodos = todos.filter(todo => {\n    if (selectedCategory.name === 'Planned') {\n      return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n    }\n    if (selectedCategory.name === 'Today' || selectedCategory.name === 'Personal' || selectedCategory.name === 'Work' || selectedCategory.name === 'Any Time') {\n      return todo.category === selectedCategory.name && (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today));\n    }\n    if (selectedCategory.name === 'All Tasks') {\n      return (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today)) && todo.category !== 'Planned';\n    }\n    if (selectedCategory.name === 'Logbook') {\n      return todo.category === 'Logbook';\n    }\n    return todo.category === selectedCategory.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      className: \"sr-only\",\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-1\",\n      children: filteredTodos.map(todo => /*#__PURE__*/_jsxDEV(ToDo, {\n        todo: todo,\n        handleCheckboxChange: () => handleCheckboxChange(todo.id),\n        handleTodoClick: () => handleTodoClick(todo.id),\n        handleDelete: () => handleDeleteClick(todo.id),\n        handleEditClick: () => handleEditClick(todo),\n        isDeleteMode: isDeleteMode,\n        onDateChange: handleDateChange,\n        isSelected: todo.id === selectedTodoId // Pass the selected state\n        ,\n        isTodayCategory: selectedCategory.name === 'Today'\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoList, \"UPx6eQ0RL4RFIiRK5kGJdQvdazk=\");\n_c = ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","ToDo","startOfToday","isSameDay","isAfter","isBefore","deleteTask","jsxDEV","_jsxDEV","ToDoList","todos","setTodos","isDeleteMode","onEditTodo","onDateChange","selectedCategory","_s","selectedTodoId","setSelectedTodoId","handleCheckboxChange","id","updatedTodos","map","todo","completed","handleDeleteClick","console","log","filter","error","response","data","message","handleTodoClick","handleEditClick","handleDateChange","date","purpose","today","filteredTodos","name","planDate","Date","category","children","className","fileName","_jsxFileName","lineNumber","columnNumber","handleDelete","isSelected","isTodayCategory","_c","$RefreshReg$"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/components/ToDoList.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport ToDo from './ToDo';\nimport { startOfToday, isSameDay, isAfter, isBefore } from 'date-fns';\nimport { deleteTask } from '../api'; // Passe den Importpfad entsprechend deiner Dateistruktur an\n\nexport default function ToDoList({ todos = [], setTodos, isDeleteMode, onEditTodo, onDateChange, selectedCategory }) {\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n\n  const handleCheckboxChange = (id) => {\n    const updatedTodos = todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    );\n    setTodos(updatedTodos);\n  };\n\n  const handleDeleteClick = async (id) => {\n    try {\n      console.log('ID' + id);\n      await deleteTask(id); // Aufruf der API-Funktion zum Löschen des Todos\n      const updatedTodos = todos.filter(todo => todo.id !== id);\n      setTodos(updatedTodos);\n    } catch (error) {\n      console.error('Error deleting task:', error.response ? error.response.data : error.message);\n      // Handle error (e.g., show error message to user)\n    }\n  };\n\n  const handleTodoClick = (id) => {\n    setSelectedTodoId(id); // Set selected todo id\n  };\n\n  const handleEditClick = (todo) => {\n    onEditTodo(todo);\n  };\n\n  const handleDateChange = async (id, date, purpose) => {\n    try {\n      const updatedTodos = todos.map(todo =>\n        todo.id === id ? { ...todo, [`${purpose}Date`]: date } : todo\n      );\n      setTodos(updatedTodos);\n      await onDateChange(id, date, purpose);\n    } catch (error) {\n      console.error('Error updating date:', error);\n    }\n  };\n\n  const today = startOfToday();\n\n  const filteredTodos = todos.filter(todo => {\n    if (selectedCategory.name === 'Planned') {\n      return todo.planDate && !todo.completed && isAfter(new Date(todo.planDate), today);\n    }\n    if (selectedCategory.name === 'Today' || selectedCategory.name === 'Personal' || selectedCategory.name === 'Work' || selectedCategory.name === 'Any Time') {\n      return (todo.category === selectedCategory.name && (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today)));\n    }\n    if (selectedCategory.name === 'All Tasks') {\n      return (!todo.planDate || isSameDay(new Date(todo.planDate), today) || isBefore(new Date(todo.planDate), today)) && todo.category !== 'Planned';\n    }\n    if (selectedCategory.name === 'Logbook') {\n      return todo.category === 'Logbook';\n    }\n    return todo.category === selectedCategory.name;\n  });\n\n  return (\n    <fieldset>\n      <legend className=\"sr-only\">Tasks</legend>\n      <div className=\"space-y-1\">\n        {filteredTodos.map(todo => (\n          <ToDo\n            key={todo.id}\n            todo={todo}\n            handleCheckboxChange={() => handleCheckboxChange(todo.id)}\n            handleTodoClick={() => handleTodoClick(todo.id)}\n            handleDelete={() => handleDeleteClick(todo.id)}\n            handleEditClick={() => handleEditClick(todo)}\n            isDeleteMode={isDeleteMode}\n            onDateChange={handleDateChange}\n            isSelected={todo.id === selectedTodoId} // Pass the selected state\n            isTodayCategory={selectedCategory.name === 'Today'}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}