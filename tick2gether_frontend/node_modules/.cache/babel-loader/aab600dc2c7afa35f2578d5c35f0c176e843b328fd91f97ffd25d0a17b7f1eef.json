{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { useTasks } from './useTasks';\nimport { useCategories } from './useCategories';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage, sendWebSocketMessage } from '../websocket'; // Beispiel-Pfad\n\nexport function useDashboard() {\n  _s();\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n  // const [userId, setUserId] = useState(null);\n\n  const {\n    tasks,\n    handleAddTask,\n    handleDeleteTask,\n    setTasks\n  } = useTasks();\n  const {\n    categories,\n    selectedCategory,\n    setSelectedCategory,\n    handleAddCategory\n  } = useCategories();\n  const handleWebSocketMessage = useCallback(message => {\n    console.log('Received WebSocket message:', message);\n    // Handle WebSocket message\n  }, []);\n  useWebSocket(handleWebSocketMessage);\n  const handleCheckboxChange = async taskId => {\n    const updatedTodos = tasks.map(todo => {\n      if (todo.taskId === taskId) {\n        const updatedTodo = {\n          ...todo,\n          completed: !todo.completed\n        };\n        if (updatedTodo.completed) {\n          updatedTodo.categoryId = 7; // Logbook category\n        }\n        return updatedTodo;\n      }\n      return todo;\n    });\n    setTasks(updatedTodos);\n    const updatedTask = updatedTodos.find(todo => todo.taskId === taskId);\n    try {\n      sendWebSocketMessage(`/app/updateTask/${taskId}`, {\n        ...updatedTask\n      });\n    } catch (error) {\n      console.error('Error sending WebSocket message:', error);\n    }\n  };\n  const handleDateChange = async (taskId, date, purpose) => {\n    const updatedTodos = tasks.map(todo => {\n      if (todo.taskId === taskId) {\n        return {\n          ...todo,\n          [`${purpose}Date`]: date ? new Date(date).toISOString() : null\n        };\n      }\n      return todo;\n    });\n    setTasks(updatedTodos);\n    const updatedTask = updatedTodos.find(todo => todo.taskId === taskId);\n    try {\n      sendWebSocketMessage(`/app/updateTask/${taskId}`, {\n        ...updatedTask\n      });\n    } catch (error) {\n      console.error('Error sending WebSocket message for date update:', error);\n    }\n  };\n  return {\n    showEditTaskPopUp,\n    showAddTaskPopUp,\n    showAddCategoryPopUp,\n    isDeleteMode,\n    currentTask,\n    setCurrentTask,\n    setShowEditTaskPopUp,\n    setShowAddTaskPopUp,\n    setShowAddCategoryPopUp,\n    setIsDeleteMode,\n    handleAddTask,\n    handleDeleteTask,\n    handleCheckboxChange,\n    handleDateChange,\n    handleAddCategory,\n    tasks,\n    categories,\n    selectedCategory,\n    setSelectedCategory\n  };\n}\n_s(useDashboard, \"zJyKKggAZsa3utwFZvZqgB0GnPI=\", true, function () {\n  return [useTasks, useCategories];\n});","map":{"version":3,"names":["useState","useCallback","useTasks","useCategories","connectWebSocket","disconnectWebSocket","sendUpdateTaskMessage","sendWebSocketMessage","useDashboard","_s","showEditTaskPopUp","setShowEditTaskPopUp","showAddTaskPopUp","setShowAddTaskPopUp","showAddCategoryPopUp","setShowAddCategoryPopUp","isDeleteMode","setIsDeleteMode","currentTask","setCurrentTask","tasks","handleAddTask","handleDeleteTask","setTasks","categories","selectedCategory","setSelectedCategory","handleAddCategory","handleWebSocketMessage","message","console","log","useWebSocket","handleCheckboxChange","taskId","updatedTodos","map","todo","updatedTodo","completed","categoryId","updatedTask","find","error","handleDateChange","date","purpose","Date","toISOString"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/hooks/useDashboard.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { useTasks } from './useTasks';\nimport { useCategories } from './useCategories';\nimport { connectWebSocket, disconnectWebSocket, sendUpdateTaskMessage, sendWebSocketMessage } from '../websocket'; // Beispiel-Pfad\n\nexport function useDashboard() {\n  const [showEditTaskPopUp, setShowEditTaskPopUp] = useState(false);\n  const [showAddTaskPopUp, setShowAddTaskPopUp] = useState(false);\n  const [showAddCategoryPopUp, setShowAddCategoryPopUp] = useState(false);\n  const [isDeleteMode, setIsDeleteMode] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n  // const [userId, setUserId] = useState(null);\n\n  const { tasks, handleAddTask, handleDeleteTask, setTasks } = useTasks();\n  const { categories, selectedCategory, setSelectedCategory, handleAddCategory } = useCategories();\n\n  const handleWebSocketMessage = useCallback((message) => {\n    console.log('Received WebSocket message:', message);\n    // Handle WebSocket message\n  }, []);\n\n  useWebSocket(handleWebSocketMessage);\n\n  const handleCheckboxChange = async (taskId) => {\n    const updatedTodos = tasks.map(todo => {\n      if (todo.taskId === taskId) {\n        const updatedTodo = { ...todo, completed: !todo.completed };\n        if (updatedTodo.completed) {\n          updatedTodo.categoryId = 7; // Logbook category\n        }\n        return updatedTodo;\n      }\n      return todo;\n    });\n\n    setTasks(updatedTodos);\n\n    const updatedTask = updatedTodos.find(todo => todo.taskId === taskId);\n    try {\n      sendWebSocketMessage(`/app/updateTask/${taskId}`, { ...updatedTask });\n    } catch (error) {\n      console.error('Error sending WebSocket message:', error);\n    }\n  };\n\n  const handleDateChange = async (taskId, date, purpose) => {\n    const updatedTodos = tasks.map(todo => {\n      if (todo.taskId === taskId) {\n        return {\n          ...todo,\n          [`${purpose}Date`]: date ? new Date(date).toISOString() : null,\n        };\n      }\n      return todo;\n    });\n\n    setTasks(updatedTodos);\n\n    const updatedTask = updatedTodos.find(todo => todo.taskId === taskId);\n    try {\n      sendWebSocketMessage(`/app/updateTask/${taskId}`, { ...updatedTask });\n    } catch (error) {\n      console.error('Error sending WebSocket message for date update:', error);\n    }\n  };\n\n  return {\n    showEditTaskPopUp,\n    showAddTaskPopUp,\n    showAddCategoryPopUp,\n    isDeleteMode,\n    currentTask,\n    setCurrentTask,\n    setShowEditTaskPopUp,\n    setShowAddTaskPopUp,\n    setShowAddCategoryPopUp,\n    setIsDeleteMode,\n    handleAddTask,\n    handleDeleteTask,\n    handleCheckboxChange,\n    handleDateChange,\n    handleAddCategory,\n    tasks,\n    categories,\n    selectedCategory,\n    setSelectedCategory,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}