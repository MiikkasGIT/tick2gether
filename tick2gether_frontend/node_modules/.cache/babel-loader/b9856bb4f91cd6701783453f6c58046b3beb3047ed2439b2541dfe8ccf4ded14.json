{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst SOCKET_URL = 'http://localhost:8080/ws';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000;\n    this.messageQueue = [];\n  }\n  connect(userId, onMessageReceived, onCategoryMessageReceived) {\n    if (!userId) {\n      console.error('Cannot connect, userId is not provided.');\n      return;\n    }\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = new Client({\n      webSocketFactory: () => socket,\n      reconnectDelay: this.reconnectDelay,\n      onConnect: () => {\n        console.log('WebSocket connected');\n        this.connected = true;\n        this.stompClient.subscribe(`/user/${userId}/queue/tasks`, message => {\n          onMessageReceived(JSON.parse(message.body));\n        });\n        this.stompClient.subscribe(`/user/${userId}/queue/categories`, message => {\n          onCategoryMessageReceived(JSON.parse(message.body));\n        });\n        this.processQueue();\n      },\n      onStompError: frame => {\n        console.error('Broker error: ', frame.headers['message']);\n        console.error('Additional details: ', frame.body);\n      },\n      onWebSocketError: event => {\n        console.error('WebSocket error: ', event);\n      },\n      onDisconnect: () => {\n        console.log('WebSocket disconnected');\n        this.connected = false;\n      }\n    });\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n      console.log('WebSocket client deactivated');\n    }\n  }\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: destination,\n        body: JSON.stringify(message)\n      });\n    } else {\n      this.messageQueue.push({\n        destination,\n        message\n      });\n    }\n  }\n  processQueue() {\n    while (this.messageQueue.length > 0) {\n      const {\n        destination,\n        message\n      } = this.messageQueue.shift();\n      this.sendMessage(destination, message);\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport const connectWebSocket = (userId, onMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onMessageReceived, onCategoryMessageReceived);\n};\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};","map":{"version":3,"names":["Client","SockJS","SOCKET_URL","WebSocketService","constructor","stompClient","connected","reconnectDelay","messageQueue","connect","userId","onMessageReceived","onCategoryMessageReceived","console","error","log","socket","webSocketFactory","onConnect","subscribe","message","JSON","parse","body","processQueue","onStompError","frame","headers","onWebSocketError","event","onDisconnect","activate","disconnect","deactivate","sendMessage","destination","publish","stringify","push","length","shift","webSocketService","connectWebSocket","disconnectWebSocket","sendWebSocketMessage"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst SOCKET_URL = 'http://localhost:8080/ws';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.reconnectDelay = 5000;\n    this.messageQueue = [];\n  }\n\n  connect(userId, onMessageReceived, onCategoryMessageReceived) {\n    if (!userId) {\n      console.error('Cannot connect, userId is not provided.');\n      return;\n    }\n\n    if (this.connected) {\n      console.log('Already connected to WebSocket');\n      return;\n    }\n\n    const socket = new SockJS(SOCKET_URL);\n    this.stompClient = new Client({\n      webSocketFactory: () => socket,\n      reconnectDelay: this.reconnectDelay,\n      onConnect: () => {\n        console.log('WebSocket connected');\n        this.connected = true;\n        this.stompClient.subscribe(`/user/${userId}/queue/tasks`, (message) => {\n          onMessageReceived(JSON.parse(message.body));\n        });\n        this.stompClient.subscribe(`/user/${userId}/queue/categories`, (message) => {\n          onCategoryMessageReceived(JSON.parse(message.body));\n        });\n        this.processQueue();\n      },\n      onStompError: (frame) => {\n        console.error('Broker error: ', frame.headers['message']);\n        console.error('Additional details: ', frame.body);\n      },\n      onWebSocketError: (event) => {\n        console.error('WebSocket error: ', event);\n      },\n      onDisconnect: () => {\n        console.log('WebSocket disconnected');\n        this.connected = false;\n      }\n    });\n\n    this.stompClient.activate();\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n      console.log('WebSocket client deactivated');\n    }\n  }\n\n  sendMessage(destination, message) {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: destination,\n        body: JSON.stringify(message),\n      });\n    } else {\n      this.messageQueue.push({ destination, message });\n    }\n  }\n\n  processQueue() {\n    while (this.messageQueue.length > 0) {\n      const { destination, message } = this.messageQueue.shift();\n      this.sendMessage(destination, message);\n    }\n  }\n}\n\nconst webSocketService = new WebSocketService();\n\nexport const connectWebSocket = (userId, onMessageReceived, onCategoryMessageReceived) => {\n  webSocketService.connect(userId, onMessageReceived, onCategoryMessageReceived);\n};\n\nexport const disconnectWebSocket = () => {\n  webSocketService.disconnect();\n};\n\nexport const sendWebSocketMessage = (destination, message) => {\n  webSocketService.sendMessage(destination, message);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}