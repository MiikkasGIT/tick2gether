{"ast":null,"code":"export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const {\n      categoryId,\n      completed,\n      planDate\n    } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (categoryId) {\n      case 1:\n        // All Tasks (excluding Logbook)\n        if (!completed) {\n          categorizedTasks[1].push(task);\n        }\n        break;\n      case 2:\n        // Today\n        categorizedTasks[2].push(task);\n        break;\n      case 3:\n        // Planned\n        if (planDate) {\n          categorizedTasks[3].push(task);\n        }\n        break;\n      case 4:\n        // Any Time\n        categorizedTasks[4].push(task);\n        break;\n      case 5:\n        // Work\n        categorizedTasks[5].push(task);\n        break;\n      case 6:\n        // Personal\n        categorizedTasks[6].push(task);\n        break;\n      case 7:\n        // Logbook\n        if (completed) {\n          categorizedTasks[7].push(task);\n        }\n        break;\n      default:\n        // For any other custom categories\n        if (!categorizedTasks[categoryId]) {\n          categorizedTasks[categoryId] = [];\n        }\n        categorizedTasks[categoryId].push(task);\n        break;\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n  return categorizedTasks;\n};","map":{"version":3,"names":["categorizeTasks","tasks","categories","categorizedTasks","forEach","category","categoryId","task","completed","planDate","console","log","taskId","push"],"sources":["/Users/finngarrels/IdeaProjects/Tick2GetherProject/tick2gether_frontend/src/utils/categorizeTasks.jsx"],"sourcesContent":["export const categorizeTasks = (tasks, categories) => {\n  const categorizedTasks = {};\n\n  // Initialize categorizedTasks for each category\n  categories.forEach(category => {\n    categorizedTasks[category.categoryId] = [];\n  });\n\n  // Filter tasks based on category rules\n  tasks.forEach(task => {\n    const { categoryId, completed, planDate } = task;\n\n    // Debugging: Log task information\n    console.log(`Processing task with ID: ${task.taskId}, categoryId: ${categoryId}`);\n\n    // Always add task to its specific category\n    if (!categorizedTasks[categoryId]) {\n      categorizedTasks[categoryId] = [];\n    }\n    categorizedTasks[categoryId].push(task);\n\n    // Use switch case to categorize tasks into standard categories\n    switch (categoryId) {\n      case 1: // All Tasks (excluding Logbook)\n        if (!completed) {\n          categorizedTasks[1].push(task);\n        }\n        break;\n      case 2: // Today\n        categorizedTasks[2].push(task);\n        break;\n      case 3: // Planned\n        if (planDate) {\n          categorizedTasks[3].push(task);\n        }\n        break;\n      case 4: // Any Time\n        categorizedTasks[4].push(task);\n        break;\n      case 5: // Work\n        categorizedTasks[5].push(task);\n        break;\n      case 6: // Personal\n        categorizedTasks[6].push(task);\n        break;\n      case 7: // Logbook\n        if (completed) {\n          categorizedTasks[7].push(task);\n        }\n        break;\n      default:\n        // For any other custom categories\n        if (!categorizedTasks[categoryId]) {\n          categorizedTasks[categoryId] = [];\n        }\n        categorizedTasks[categoryId].push(task);\n        break;\n    }\n  });\n\n  // Debugging: Log categorized tasks\n  console.log('Categorized tasks:', categorizedTasks);\n\n  return categorizedTasks;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACpD,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;EAE3B;EACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,IAAI;IAC7BF,gBAAgB,CAACE,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;EAC5C,CAAC,CAAC;;EAEF;EACAL,KAAK,CAACG,OAAO,CAACG,IAAI,IAAI;IACpB,MAAM;MAAED,UAAU;MAAEE,SAAS;MAAEC;IAAS,CAAC,GAAGF,IAAI;;IAEhD;IACAG,OAAO,CAACC,GAAG,CAAC,4BAA4BJ,IAAI,CAACK,MAAM,iBAAiBN,UAAU,EAAE,CAAC;;IAEjF;IACA,IAAI,CAACH,gBAAgB,CAACG,UAAU,CAAC,EAAE;MACjCH,gBAAgB,CAACG,UAAU,CAAC,GAAG,EAAE;IACnC;IACAH,gBAAgB,CAACG,UAAU,CAAC,CAACO,IAAI,CAACN,IAAI,CAAC;;IAEvC;IACA,QAAQD,UAAU;MAChB,KAAK,CAAC;QAAE;QACN,IAAI,CAACE,SAAS,EAAE;UACdL,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC;QAChC;QACA;MACF,KAAK,CAAC;QAAE;QACNJ,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC;QAC9B;MACF,KAAK,CAAC;QAAE;QACN,IAAIE,QAAQ,EAAE;UACZN,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC;QAChC;QACA;MACF,KAAK,CAAC;QAAE;QACNJ,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC;QAC9B;MACF,KAAK,CAAC;QAAE;QACNJ,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC;QAC9B;MACF,KAAK,CAAC;QAAE;QACNJ,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC;QAC9B;MACF,KAAK,CAAC;QAAE;QACN,IAAIC,SAAS,EAAE;UACbL,gBAAgB,CAAC,CAAC,CAAC,CAACU,IAAI,CAACN,IAAI,CAAC;QAChC;QACA;MACF;QACE;QACA,IAAI,CAACJ,gBAAgB,CAACG,UAAU,CAAC,EAAE;UACjCH,gBAAgB,CAACG,UAAU,CAAC,GAAG,EAAE;QACnC;QACAH,gBAAgB,CAACG,UAAU,CAAC,CAACO,IAAI,CAACN,IAAI,CAAC;QACvC;IACJ;EACF,CAAC,CAAC;;EAEF;EACAG,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,gBAAgB,CAAC;EAEnD,OAAOA,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}